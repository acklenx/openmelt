
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000024d0  00002584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024d0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  0080013a  0080013a  000025be  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000025be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000025ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000667  00000000  00000000  000025ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d10  00000000  00000000  00002c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c6  00000000  00000000  00003961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d33  00000000  00000000  00003b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000485c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000598  00000000  00000000  00004f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000054fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ed       	ldi	r30, 0xD0	; 208
      7c:	f4 e2       	ldi	r31, 0x24	; 36
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3c       	cpi	r26, 0xC6	; 198
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <main>
      9e:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_mode>:


}

void config_mode(void)
{
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	

	//basic tracking adjustment code (is under 50%)
	if (config_mode_throttle_percent < 50)
      ba:	a0 90 b2 01 	lds	r10, 0x01B2
      be:	b0 90 b3 01 	lds	r11, 0x01B3
      c2:	c0 90 b4 01 	lds	r12, 0x01B4
      c6:	d0 90 b5 01 	lds	r13, 0x01B5
      ca:	c6 01       	movw	r24, r12
      cc:	b5 01       	movw	r22, r10
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	48 e4       	ldi	r20, 0x48	; 72
      d4:	52 e4       	ldi	r21, 0x42	; 66
      d6:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
      da:	88 23       	and	r24, r24
      dc:	0c f0       	brlt	.+2      	; 0xe0 <config_mode+0x3a>
      de:	b7 c0       	rjmp	.+366    	; 0x24e <config_mode+0x1a8>
	{
	
		flashy_led = 0;			//flashy LED off unless something is changing
      e0:	10 92 a3 01 	sts	0x01A3, r1
      e4:	10 92 a2 01 	sts	0x01A2, r1
		//flashy LED gets turned off to indicate change
		if ( leftright > (heading_center + heading_leftthresh) ) {tracking_comp = tracking_comp + (tracking_comp * 0.003); flashy_led = 1;}
      e8:	20 91 8e 01 	lds	r18, 0x018E
      ec:	30 91 8f 01 	lds	r19, 0x018F
      f0:	40 91 90 01 	lds	r20, 0x0190
      f4:	50 91 91 01 	lds	r21, 0x0191
      f8:	c0 91 0a 01 	lds	r28, 0x010A
      fc:	d0 91 0b 01 	lds	r29, 0x010B
     100:	80 91 0c 01 	lds	r24, 0x010C
     104:	90 91 0d 01 	lds	r25, 0x010D
     108:	8c 0f       	add	r24, r28
     10a:	9d 1f       	adc	r25, r29
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	82 17       	cp	r24, r18
     116:	93 07       	cpc	r25, r19
     118:	a4 07       	cpc	r26, r20
     11a:	b5 07       	cpc	r27, r21
     11c:	24 f5       	brge	.+72     	; 0x166 <config_mode+0xc0>
     11e:	e0 90 2c 01 	lds	r14, 0x012C
     122:	f0 90 2d 01 	lds	r15, 0x012D
     126:	00 91 2e 01 	lds	r16, 0x012E
     12a:	10 91 2f 01 	lds	r17, 0x012F
     12e:	c8 01       	movw	r24, r16
     130:	b7 01       	movw	r22, r14
     132:	26 ea       	ldi	r18, 0xA6	; 166
     134:	3b e9       	ldi	r19, 0x9B	; 155
     136:	44 e4       	ldi	r20, 0x44	; 68
     138:	5b e3       	ldi	r21, 0x3B	; 59
     13a:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c8 01       	movw	r24, r16
     144:	b7 01       	movw	r22, r14
     146:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
     14a:	60 93 2c 01 	sts	0x012C, r22
     14e:	70 93 2d 01 	sts	0x012D, r23
     152:	80 93 2e 01 	sts	0x012E, r24
     156:	90 93 2f 01 	sts	0x012F, r25
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	90 93 a3 01 	sts	0x01A3, r25
     162:	80 93 a2 01 	sts	0x01A2, r24
		if ( leftright < (heading_center + heading_rightthresh) ) {tracking_comp = tracking_comp - (tracking_comp * 0.003); flashy_led = 1;}	
     166:	20 91 8e 01 	lds	r18, 0x018E
     16a:	30 91 8f 01 	lds	r19, 0x018F
     16e:	40 91 90 01 	lds	r20, 0x0190
     172:	50 91 91 01 	lds	r21, 0x0191
     176:	80 91 0e 01 	lds	r24, 0x010E
     17a:	90 91 0f 01 	lds	r25, 0x010F
     17e:	c8 0f       	add	r28, r24
     180:	d9 1f       	adc	r29, r25
     182:	ce 01       	movw	r24, r28
     184:	aa 27       	eor	r26, r26
     186:	97 fd       	sbrc	r25, 7
     188:	a0 95       	com	r26
     18a:	ba 2f       	mov	r27, r26
     18c:	28 17       	cp	r18, r24
     18e:	39 07       	cpc	r19, r25
     190:	4a 07       	cpc	r20, r26
     192:	5b 07       	cpc	r21, r27
     194:	24 f5       	brge	.+72     	; 0x1de <config_mode+0x138>
     196:	e0 90 2c 01 	lds	r14, 0x012C
     19a:	f0 90 2d 01 	lds	r15, 0x012D
     19e:	00 91 2e 01 	lds	r16, 0x012E
     1a2:	10 91 2f 01 	lds	r17, 0x012F
     1a6:	c8 01       	movw	r24, r16
     1a8:	b7 01       	movw	r22, r14
     1aa:	26 ea       	ldi	r18, 0xA6	; 166
     1ac:	3b e9       	ldi	r19, 0x9B	; 155
     1ae:	44 e4       	ldi	r20, 0x44	; 68
     1b0:	5b eb       	ldi	r21, 0xBB	; 187
     1b2:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
     1c2:	60 93 2c 01 	sts	0x012C, r22
     1c6:	70 93 2d 01 	sts	0x012D, r23
     1ca:	80 93 2e 01 	sts	0x012E, r24
     1ce:	90 93 2f 01 	sts	0x012F, r25
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 a3 01 	sts	0x01A3, r25
     1da:	80 93 a2 01 	sts	0x01A2, r24

		if (tracking_comp < 0.1) tracking_comp = 0.1;
     1de:	60 91 2c 01 	lds	r22, 0x012C
     1e2:	70 91 2d 01 	lds	r23, 0x012D
     1e6:	80 91 2e 01 	lds	r24, 0x012E
     1ea:	90 91 2f 01 	lds	r25, 0x012F
     1ee:	2d ec       	ldi	r18, 0xCD	; 205
     1f0:	3c ec       	ldi	r19, 0xCC	; 204
     1f2:	4c ec       	ldi	r20, 0xCC	; 204
     1f4:	5d e3       	ldi	r21, 0x3D	; 61
     1f6:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	64 f4       	brge	.+24     	; 0x216 <config_mode+0x170>
     1fe:	8d ec       	ldi	r24, 0xCD	; 205
     200:	9c ec       	ldi	r25, 0xCC	; 204
     202:	ac ec       	ldi	r26, 0xCC	; 204
     204:	bd e3       	ldi	r27, 0x3D	; 61
     206:	80 93 2c 01 	sts	0x012C, r24
     20a:	90 93 2d 01 	sts	0x012D, r25
     20e:	a0 93 2e 01 	sts	0x012E, r26
     212:	b0 93 2f 01 	sts	0x012F, r27
		if (tracking_comp > 10) tracking_comp = 10;
     216:	60 91 2c 01 	lds	r22, 0x012C
     21a:	70 91 2d 01 	lds	r23, 0x012D
     21e:	80 91 2e 01 	lds	r24, 0x012E
     222:	90 91 2f 01 	lds	r25, 0x012F
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e2       	ldi	r20, 0x20	; 32
     22c:	51 e4       	ldi	r21, 0x41	; 65
     22e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     232:	18 16       	cp	r1, r24
     234:	64 f4       	brge	.+24     	; 0x24e <config_mode+0x1a8>
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e2       	ldi	r26, 0x20	; 32
     23c:	b1 e4       	ldi	r27, 0x41	; 65
     23e:	80 93 2c 01 	sts	0x012C, r24
     242:	90 93 2d 01 	sts	0x012D, r25
     246:	a0 93 2e 01 	sts	0x012E, r26
     24a:	b0 93 2f 01 	sts	0x012F, r27
	}	


	//heading adjustment code (when throttle is between 50% and 90%)
	if (config_mode_throttle_percent >= 50 && config_mode_throttle_percent < 90)
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 e4       	ldi	r20, 0x48	; 72
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     25e:	88 23       	and	r24, r24
     260:	0c f4       	brge	.+2      	; 0x264 <config_mode+0x1be>
     262:	b0 c0       	rjmp	.+352    	; 0x3c4 <config_mode+0x31e>
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	44 eb       	ldi	r20, 0xB4	; 180
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     274:	88 23       	and	r24, r24
     276:	0c f0       	brlt	.+2      	; 0x27a <config_mode+0x1d4>
     278:	a5 c0       	rjmp	.+330    	; 0x3c4 <config_mode+0x31e>
	{
		
		flashy_led = 1;				//pulse the LED to indicate we're in heading adjustment
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 a3 01 	sts	0x01A3, r25
     282:	80 93 a2 01 	sts	0x01A2, r24
		if ( leftright > (heading_center + heading_leftthresh) ) {led_adjust = led_adjust + 1; flashy_led = 0;}   //flashing gets turned back off to indicate change
     286:	20 91 8e 01 	lds	r18, 0x018E
     28a:	30 91 8f 01 	lds	r19, 0x018F
     28e:	40 91 90 01 	lds	r20, 0x0190
     292:	50 91 91 01 	lds	r21, 0x0191
     296:	c0 91 0a 01 	lds	r28, 0x010A
     29a:	d0 91 0b 01 	lds	r29, 0x010B
     29e:	80 91 0c 01 	lds	r24, 0x010C
     2a2:	90 91 0d 01 	lds	r25, 0x010D
     2a6:	8c 0f       	add	r24, r28
     2a8:	9d 1f       	adc	r25, r29
     2aa:	aa 27       	eor	r26, r26
     2ac:	97 fd       	sbrc	r25, 7
     2ae:	a0 95       	com	r26
     2b0:	ba 2f       	mov	r27, r26
     2b2:	82 17       	cp	r24, r18
     2b4:	93 07       	cpc	r25, r19
     2b6:	a4 07       	cpc	r26, r20
     2b8:	b5 07       	cpc	r27, r21
     2ba:	d4 f4       	brge	.+52     	; 0x2f0 <config_mode+0x24a>
     2bc:	60 91 30 01 	lds	r22, 0x0130
     2c0:	70 91 31 01 	lds	r23, 0x0131
     2c4:	80 91 32 01 	lds	r24, 0x0132
     2c8:	90 91 33 01 	lds	r25, 0x0133
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
     2d8:	60 93 30 01 	sts	0x0130, r22
     2dc:	70 93 31 01 	sts	0x0131, r23
     2e0:	80 93 32 01 	sts	0x0132, r24
     2e4:	90 93 33 01 	sts	0x0133, r25
     2e8:	10 92 a3 01 	sts	0x01A3, r1
     2ec:	10 92 a2 01 	sts	0x01A2, r1
		if ( leftright < (heading_center + heading_rightthresh) ) {led_adjust = led_adjust - 1; flashy_led = 0;}
     2f0:	20 91 8e 01 	lds	r18, 0x018E
     2f4:	30 91 8f 01 	lds	r19, 0x018F
     2f8:	40 91 90 01 	lds	r20, 0x0190
     2fc:	50 91 91 01 	lds	r21, 0x0191
     300:	80 91 0e 01 	lds	r24, 0x010E
     304:	90 91 0f 01 	lds	r25, 0x010F
     308:	c8 0f       	add	r28, r24
     30a:	d9 1f       	adc	r29, r25
     30c:	ce 01       	movw	r24, r28
     30e:	aa 27       	eor	r26, r26
     310:	97 fd       	sbrc	r25, 7
     312:	a0 95       	com	r26
     314:	ba 2f       	mov	r27, r26
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	4a 07       	cpc	r20, r26
     31c:	5b 07       	cpc	r21, r27
     31e:	d4 f4       	brge	.+52     	; 0x354 <config_mode+0x2ae>
     320:	60 91 30 01 	lds	r22, 0x0130
     324:	70 91 31 01 	lds	r23, 0x0131
     328:	80 91 32 01 	lds	r24, 0x0132
     32c:	90 91 33 01 	lds	r25, 0x0133
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
     33c:	60 93 30 01 	sts	0x0130, r22
     340:	70 93 31 01 	sts	0x0131, r23
     344:	80 93 32 01 	sts	0x0132, r24
     348:	90 93 33 01 	sts	0x0133, r25
     34c:	10 92 a3 01 	sts	0x01A3, r1
     350:	10 92 a2 01 	sts	0x01A2, r1

		if (led_adjust < 0) led_adjust = 100;
     354:	60 91 30 01 	lds	r22, 0x0130
     358:	70 91 31 01 	lds	r23, 0x0131
     35c:	80 91 32 01 	lds	r24, 0x0132
     360:	90 91 33 01 	lds	r25, 0x0133
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     370:	88 23       	and	r24, r24
     372:	64 f4       	brge	.+24     	; 0x38c <config_mode+0x2e6>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a8 ec       	ldi	r26, 0xC8	; 200
     37a:	b2 e4       	ldi	r27, 0x42	; 66
     37c:	80 93 30 01 	sts	0x0130, r24
     380:	90 93 31 01 	sts	0x0131, r25
     384:	a0 93 32 01 	sts	0x0132, r26
     388:	b0 93 33 01 	sts	0x0133, r27
		if (led_adjust > 100) led_adjust = 0;
     38c:	60 91 30 01 	lds	r22, 0x0130
     390:	70 91 31 01 	lds	r23, 0x0131
     394:	80 91 32 01 	lds	r24, 0x0132
     398:	90 91 33 01 	lds	r25, 0x0133
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	48 ec       	ldi	r20, 0xC8	; 200
     3a2:	52 e4       	ldi	r21, 0x42	; 66
     3a4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	64 f4       	brge	.+24     	; 0x3c4 <config_mode+0x31e>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 30 01 	sts	0x0130, r24
     3b8:	90 93 31 01 	sts	0x0131, r25
     3bc:	a0 93 32 01 	sts	0x0132, r26
     3c0:	b0 93 33 01 	sts	0x0133, r27
	}	
	
	//if we're above 90% throttle - the bot is effectively in normal drive mode - with throttle locked at 50%


}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	08 95       	ret

000003da <setup>:
void adc_init(void)

{
 
  	// Free running Mode
	ADCSRB = 0x00;
     3da:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     3de:	86 e8       	ldi	r24, 0x86	; 134
     3e0:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	80 93 7c 00 	sts	0x007C, r24

{

	adc_init();		//init the ADC...

	set_throttle_pin_as_input();
     3ea:	20 98       	cbi	0x04, 0	; 4
	set_leftright_pin_as_input();  
     3ec:	21 98       	cbi	0x04, 1	; 4
	set_forwardback_pin_as_input();
     3ee:	22 98       	cbi	0x04, 2	; 4
  
	set_accel_data_pin_as_input();
     3f0:	3c 98       	cbi	0x07, 4	; 7
	
	set_accelpower_pin_as_output();
     3f2:	50 9a       	sbi	0x0a, 0	; 10
	set_accelpower_pin_on();								//turn on power for accel (accel is connected to chip for power)
     3f4:	58 9a       	sbi	0x0b, 0	; 11


	
	set_led_pin_as_output();
     3f6:	55 9a       	sbi	0x0a, 5	; 10

	set_motor1_pin_as_output();
     3f8:	52 9a       	sbi	0x0a, 2	; 10
	set_motor2_pin_as_output();
     3fa:	54 9a       	sbi	0x0a, 4	; 10
	
	set_led_on();						                    //turn on signal LED before timers so it comes on immediately
     3fc:	5d 9a       	sbi	0x0b, 5	; 11
	

	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	80 93 6b 00 	sts	0x006B, r24
	PCICR = 1<<PCIE0; 
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 68 00 	sts	0x0068, r24


void SetupTimer1(void)
{

	TCCR1A = 0;                               //mode = 0
     40a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	80 93 81 00 	sts	0x0081, r24
}


void motors_off(void)
{
	set_motor1_off();
     414:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_off();
     416:	5c 98       	cbi	0x0b, 4	; 11
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
	{
		toggle_led();
     420:	e0 e2       	ldi	r30, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     422:	68 e8       	ldi	r22, 0x88	; 136
     424:	73 e1       	ldi	r23, 0x13	; 19
     426:	0a c0       	rjmp	.+20     	; 0x43c <setup+0x62>
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8e 27       	eor	r24, r30
     42c:	8b b9       	out	0x0b, r24	; 11
     42e:	cb 01       	movw	r24, r22
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <setup+0x56>
     434:	2f 5f       	subi	r18, 0xFF	; 255
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	4f 4f       	sbci	r20, 0xFF	; 255
     43a:	5f 4f       	sbci	r21, 0xFF	; 255

	motors_off();   //make sure those motors are off...


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
     43c:	2b 3f       	cpi	r18, 0xFB	; 251
     43e:	31 05       	cpc	r19, r1
     440:	41 05       	cpc	r20, r1
     442:	51 05       	cpc	r21, r1
     444:	8c f3       	brlt	.-30     	; 0x428 <setup+0x4e>
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot (slower)
	for (x = 1; x <= 15; x++)
	{
		toggle_led();
     44e:	a0 e2       	ldi	r26, 0x20	; 32
     450:	64 ef       	ldi	r22, 0xF4	; 244
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	0e c0       	rjmp	.+28     	; 0x472 <setup+0x98>
     456:	8b b1       	in	r24, 0x0b	; 11
     458:	8a 27       	eor	r24, r26
     45a:	8b b9       	out	0x0b, r24	; 11
     45c:	86 e9       	ldi	r24, 0x96	; 150
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fb 01       	movw	r30, r22
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <setup+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     466:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     468:	d9 f7       	brne	.-10     	; 0x460 <setup+0x86>
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	4f 4f       	sbci	r20, 0xFF	; 255
     470:	5f 4f       	sbci	r21, 0xFF	; 255
		_delay_ms(1);
	}


	//flash LED on boot (slower)
	for (x = 1; x <= 15; x++)
     472:	20 31       	cpi	r18, 0x10	; 16
     474:	31 05       	cpc	r19, r1
     476:	41 05       	cpc	r20, r1
     478:	51 05       	cpc	r21, r1
     47a:	6c f3       	brlt	.-38     	; 0x456 <setup+0x7c>
     47c:	20 93 64 01 	sts	0x0164, r18
     480:	30 93 65 01 	sts	0x0165, r19
     484:	40 93 66 01 	sts	0x0166, r20
     488:	50 93 67 01 	sts	0x0167, r21
	{
		toggle_led();
		_delay_ms(15);
	}

	throttle = 0;   //make sure throttle is off at boot
     48c:	10 92 86 01 	sts	0x0186, r1
     490:	10 92 87 01 	sts	0x0187, r1
     494:	10 92 88 01 	sts	0x0188, r1
     498:	10 92 89 01 	sts	0x0189, r1
	
	sei(); //enable interrupts
     49c:	78 94       	sei


}
     49e:	08 95       	ret

000004a0 <do_spin_180>:
}


	
void do_spin_180(int spin_cycle)
{	
     4a0:	2f 92       	push	r2
     4a2:	3f 92       	push	r3
     4a4:	4f 92       	push	r4
     4a6:	5f 92       	push	r5
     4a8:	6f 92       	push	r6
     4aa:	7f 92       	push	r7
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	a2 97       	sbiw	r28, 0x22	; 34
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	5c 01       	movw	r10, r24

	while (TCNT1 < half_spin_time)
     4d6:	20 91 8a 01 	lds	r18, 0x018A
     4da:	30 91 8b 01 	lds	r19, 0x018B
     4de:	40 91 8c 01 	lds	r20, 0x018C
     4e2:	50 91 8d 01 	lds	r21, 0x018D
     4e6:	29 83       	std	Y+1, r18	; 0x01
     4e8:	3a 83       	std	Y+2, r19	; 0x02
     4ea:	4b 83       	std	Y+3, r20	; 0x03
     4ec:	5c 83       	std	Y+4, r21	; 0x04
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
     4ee:	80 91 c2 01 	lds	r24, 0x01C2
     4f2:	90 91 c3 01 	lds	r25, 0x01C3
     4f6:	a0 91 c4 01 	lds	r26, 0x01C4
     4fa:	b0 91 c5 01 	lds	r27, 0x01C5
     4fe:	8d 8f       	std	Y+29, r24	; 0x1d
     500:	9e 8f       	std	Y+30, r25	; 0x1e
     502:	af 8f       	std	Y+31, r26	; 0x1f
     504:	b8 a3       	std	Y+32, r27	; 0x20
		if (TCNT1 > end_brake) motors_left();					//full power if we're after braking
     506:	20 91 92 01 	lds	r18, 0x0192
     50a:	30 91 93 01 	lds	r19, 0x0193
     50e:	40 91 94 01 	lds	r20, 0x0194
     512:	50 91 95 01 	lds	r21, 0x0195
     516:	29 8f       	std	Y+25, r18	; 0x19
     518:	3a 8f       	std	Y+26, r19	; 0x1a
     51a:	4b 8f       	std	Y+27, r20	; 0x1b
     51c:	5c 8f       	std	Y+28, r21	; 0x1c

		led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops
     51e:	80 91 68 01 	lds	r24, 0x0168
     522:	90 91 69 01 	lds	r25, 0x0169
     526:	a0 91 6a 01 	lds	r26, 0x016A
     52a:	b0 91 6b 01 	lds	r27, 0x016B
     52e:	8d 8b       	std	Y+21, r24	; 0x15
     530:	9e 8b       	std	Y+22, r25	; 0x16
     532:	af 8b       	std	Y+23, r26	; 0x17
     534:	b8 8f       	std	Y+24, r27	; 0x18

		if ( TCNT1 > begin_brake && TCNT1 < end_brake )         //switch to single motor as soon as entering braking cycle
		{
			//if sitting still
			if ( forward == 0 && backward == 0 )
     536:	a0 91 a0 01 	lds	r26, 0x01A0
     53a:	b0 91 a1 01 	lds	r27, 0x01A1
     53e:	bc 8b       	std	Y+20, r27	; 0x14
     540:	ab 8b       	std	Y+19, r26	; 0x13
     542:	e0 91 b0 01 	lds	r30, 0x01B0
     546:	f0 91 b1 01 	lds	r31, 0x01B1
     54a:	fa 8b       	std	Y+18, r31	; 0x12
     54c:	e9 8b       	std	Y+17, r30	; 0x11
			{
				if ( alternate_motor_cycle == 0 )  //alternates which motor is used each cycle if sitting still
     54e:	20 91 3e 01 	lds	r18, 0x013E
     552:	30 91 3f 01 	lds	r19, 0x013F
     556:	38 8b       	std	Y+16, r19	; 0x10
     558:	2f 87       	std	Y+15, r18	; 0x0f
				
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power

		if ( TCNT1 < power_kill_part1 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time
     55a:	80 91 82 01 	lds	r24, 0x0182
     55e:	90 91 83 01 	lds	r25, 0x0183
     562:	a0 91 84 01 	lds	r26, 0x0184
     566:	b0 91 85 01 	lds	r27, 0x0185
     56a:	8b 87       	std	Y+11, r24	; 0x0b
     56c:	9c 87       	std	Y+12, r25	; 0x0c
     56e:	ad 87       	std	Y+13, r26	; 0x0d
     570:	be 87       	std	Y+14, r27	; 0x0e
		if ( TCNT1 > power_kill_part2 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time
     572:	20 91 7a 01 	lds	r18, 0x017A
     576:	30 91 7b 01 	lds	r19, 0x017B
     57a:	40 91 7c 01 	lds	r20, 0x017C
     57e:	50 91 7d 01 	lds	r21, 0x017D
     582:	2f 83       	std	Y+7, r18	; 0x07
     584:	38 87       	std	Y+8, r19	; 0x08
     586:	49 87       	std	Y+9, r20	; 0x09
     588:	5a 87       	std	Y+10, r21	; 0x0a

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     58a:	20 90 96 01 	lds	r2, 0x0196
     58e:	30 90 97 01 	lds	r3, 0x0197
     592:	40 90 98 01 	lds	r4, 0x0198
     596:	50 90 99 01 	lds	r5, 0x0199
     59a:	60 90 b8 01 	lds	r6, 0x01B8
     59e:	70 90 b9 01 	lds	r7, 0x01B9
     5a2:	80 90 ba 01 	lds	r8, 0x01BA
     5a6:	90 90 bb 01 	lds	r9, 0x01BB
	
	
		if ( led_is_on_now == 1 )
		{
			//flash the LED if we're in flashy mode - otherwise it's just on
			if ( flashy_led == 1 )
     5aa:	40 91 a2 01 	lds	r20, 0x01A2
     5ae:	50 91 a3 01 	lds	r21, 0x01A3
     5b2:	5e 83       	std	Y+6, r21	; 0x06
     5b4:	4d 83       	std	Y+5, r20	; 0x05
     5b6:	c0 90 72 01 	lds	r12, 0x0172
     5ba:	d0 90 73 01 	lds	r13, 0x0173
     5be:	e0 90 74 01 	lds	r14, 0x0174
     5c2:	f0 90 75 01 	lds	r15, 0x0175
     5c6:	80 91 70 01 	lds	r24, 0x0170
     5ca:	90 91 71 01 	lds	r25, 0x0171
     5ce:	9a a3       	std	Y+34, r25	; 0x22
     5d0:	89 a3       	std	Y+33, r24	; 0x21
		if ( TCNT1 > power_kill_part2 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     5d2:	01 e0       	ldi	r16, 0x01	; 1
     5d4:	31 c1       	rjmp	.+610    	; 0x838 <__stack+0x339>
{	

	while (TCNT1 < half_spin_time)
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
     5d6:	60 91 84 00 	lds	r22, 0x0084
     5da:	70 91 85 00 	lds	r23, 0x0085
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     5e6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5e8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5ea:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5ec:	58 a1       	ldd	r21, Y+32	; 0x20
     5ee:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     5f2:	88 23       	and	r24, r24
     5f4:	14 f4       	brge	.+4      	; 0x5fa <__stack+0xfb>
}


void motors_left(void)
{
	set_motor1_on();
     5f6:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_on();
     5f8:	5c 9a       	sbi	0x0b, 4	; 11

	while (TCNT1 < half_spin_time)
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
		if (TCNT1 > end_brake) motors_left();					//full power if we're after braking
     5fa:	60 91 84 00 	lds	r22, 0x0084
     5fe:	70 91 85 00 	lds	r23, 0x0085
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     60a:	29 8d       	ldd	r18, Y+25	; 0x19
     60c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     60e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     610:	5c 8d       	ldd	r21, Y+28	; 0x1c
     612:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     616:	18 16       	cp	r1, r24
     618:	14 f4       	brge	.+4      	; 0x61e <__stack+0x11f>
}


void motors_left(void)
{
	set_motor1_on();
     61a:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_on();
     61c:	5c 9a       	sbi	0x0b, 4	; 11
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
		if (TCNT1 > end_brake) motors_left();					//full power if we're after braking

		led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops
     61e:	60 91 84 00 	lds	r22, 0x0084
     622:	70 91 85 00 	lds	r23, 0x0085
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	2d 89       	ldd	r18, Y+21	; 0x15
     62c:	3e 89       	ldd	r19, Y+22	; 0x16
     62e:	4f 89       	ldd	r20, Y+23	; 0x17
     630:	58 8d       	ldd	r21, Y+24	; 0x18
     632:	62 0f       	add	r22, r18
     634:	73 1f       	adc	r23, r19
     636:	84 1f       	adc	r24, r20
     638:	95 1f       	adc	r25, r21
     63a:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24

		if ( TCNT1 > begin_brake && TCNT1 < end_brake )         //switch to single motor as soon as entering braking cycle
     642:	60 91 84 00 	lds	r22, 0x0084
     646:	70 91 85 00 	lds	r23, 0x0085
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     652:	2d 8d       	ldd	r18, Y+29	; 0x1d
     654:	3e 8d       	ldd	r19, Y+30	; 0x1e
     656:	4f 8d       	ldd	r20, Y+31	; 0x1f
     658:	58 a1       	ldd	r21, Y+32	; 0x20
     65a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     65e:	18 16       	cp	r1, r24
     660:	0c f0       	brlt	.+2      	; 0x664 <__stack+0x165>
     662:	56 c0       	rjmp	.+172    	; 0x710 <__stack+0x211>
     664:	60 91 84 00 	lds	r22, 0x0084
     668:	70 91 85 00 	lds	r23, 0x0085
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     674:	29 8d       	ldd	r18, Y+25	; 0x19
     676:	3a 8d       	ldd	r19, Y+26	; 0x1a
     678:	4b 8d       	ldd	r20, Y+27	; 0x1b
     67a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     67c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     680:	88 23       	and	r24, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <__stack+0x187>
     684:	45 c0       	rjmp	.+138    	; 0x710 <__stack+0x211>
		{
			//if sitting still
			if ( forward == 0 && backward == 0 )
     686:	4b 89       	ldd	r20, Y+19	; 0x13
     688:	5c 89       	ldd	r21, Y+20	; 0x14
     68a:	45 2b       	or	r20, r21
     68c:	f9 f4       	brne	.+62     	; 0x6cc <__stack+0x1cd>
     68e:	89 89       	ldd	r24, Y+17	; 0x11
     690:	9a 89       	ldd	r25, Y+18	; 0x12
     692:	89 2b       	or	r24, r25
     694:	61 f5       	brne	.+88     	; 0x6ee <__stack+0x1ef>
			{
				if ( alternate_motor_cycle == 0 )  //alternates which motor is used each cycle if sitting still
     696:	af 85       	ldd	r26, Y+15	; 0x0f
     698:	b8 89       	ldd	r27, Y+16	; 0x10
     69a:	ab 2b       	or	r26, r27
     69c:	49 f4       	brne	.+18     	; 0x6b0 <__stack+0x1b1>
				{	
					if (spin_cycle == 1) motor1_on();
     69e:	b1 e0       	ldi	r27, 0x01	; 1
     6a0:	ab 16       	cp	r10, r27
     6a2:	b1 04       	cpc	r11, r1
     6a4:	d9 f0       	breq	.+54     	; 0x6dc <__stack+0x1dd>
					if (spin_cycle == 2) motor2_on();
     6a6:	e2 e0       	ldi	r30, 0x02	; 2
     6a8:	ae 16       	cp	r10, r30
     6aa:	b1 04       	cpc	r11, r1
     6ac:	01 f5       	brne	.+64     	; 0x6ee <__stack+0x1ef>
     6ae:	1d c0       	rjmp	.+58     	; 0x6ea <__stack+0x1eb>
				}

				if ( alternate_motor_cycle == 1 )
     6b0:	2f 85       	ldd	r18, Y+15	; 0x0f
     6b2:	38 89       	ldd	r19, Y+16	; 0x10
     6b4:	21 30       	cpi	r18, 0x01	; 1
     6b6:	31 05       	cpc	r19, r1
     6b8:	d1 f4       	brne	.+52     	; 0x6ee <__stack+0x1ef>
				{	
					if (spin_cycle == 1) motor2_on();
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	a3 16       	cp	r10, r19
     6be:	b1 04       	cpc	r11, r1
     6c0:	a1 f0       	breq	.+40     	; 0x6ea <__stack+0x1eb>
					if (spin_cycle == 2) motor1_on();
     6c2:	42 e0       	ldi	r20, 0x02	; 2
     6c4:	a4 16       	cp	r10, r20
     6c6:	b1 04       	cpc	r11, r1
     6c8:	91 f4       	brne	.+36     	; 0x6ee <__stack+0x1ef>
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <__stack+0x1dd>
				}

			}

			//if ( going forward / back set motors appropriately (this is "where it happens")
			if ( forward == 1)
     6cc:	8b 89       	ldd	r24, Y+19	; 0x13
     6ce:	9c 89       	ldd	r25, Y+20	; 0x14
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	69 f4       	brne	.+26     	; 0x6ee <__stack+0x1ef>
			{	
				if (spin_cycle == 1) motor1_on();
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	a9 16       	cp	r10, r25
     6d8:	b1 04       	cpc	r11, r1
     6da:	19 f4       	brne	.+6      	; 0x6e2 <__stack+0x1e3>
}


void motor1_on(void)
{
	set_motor1_on();
     6dc:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_off();
     6de:	5c 98       	cbi	0x0b, 4	; 11
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <__stack+0x1ef>

			//if ( going forward / back set motors appropriately (this is "where it happens")
			if ( forward == 1)
			{	
				if (spin_cycle == 1) motor1_on();
				if (spin_cycle == 2) motor2_on();
     6e2:	a2 e0       	ldi	r26, 0x02	; 2
     6e4:	aa 16       	cp	r10, r26
     6e6:	b1 04       	cpc	r11, r1
     6e8:	11 f4       	brne	.+4      	; 0x6ee <__stack+0x1ef>
	set_motor2_off();
}

void motor2_on(void)
{
	set_motor1_off();
     6ea:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_on();
     6ec:	5c 9a       	sbi	0x0b, 4	; 11
			{	
				if (spin_cycle == 1) motor1_on();
				if (spin_cycle == 2) motor2_on();
			}

			if ( backward == 1)
     6ee:	e9 89       	ldd	r30, Y+17	; 0x11
     6f0:	fa 89       	ldd	r31, Y+18	; 0x12
     6f2:	31 97       	sbiw	r30, 0x01	; 1
     6f4:	69 f4       	brne	.+26     	; 0x710 <__stack+0x211>
			{	
				if (spin_cycle == 1) motor2_on();
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	af 16       	cp	r10, r31
     6fa:	b1 04       	cpc	r11, r1
     6fc:	19 f4       	brne	.+6      	; 0x704 <__stack+0x205>
	set_motor2_off();
}

void motor2_on(void)
{
	set_motor1_off();
     6fe:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_on();
     700:	5c 9a       	sbi	0x0b, 4	; 11
     702:	06 c0       	rjmp	.+12     	; 0x710 <__stack+0x211>
			}

			if ( backward == 1)
			{	
				if (spin_cycle == 1) motor2_on();
				if (spin_cycle == 2) motor1_on();
     704:	22 e0       	ldi	r18, 0x02	; 2
     706:	a2 16       	cp	r10, r18
     708:	b1 04       	cpc	r11, r1
     70a:	11 f4       	brne	.+4      	; 0x710 <__stack+0x211>
}


void motor1_on(void)
{
	set_motor1_on();
     70c:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_off();
     70e:	5c 98       	cbi	0x0b, 4	; 11
				if (spin_cycle == 2) motor1_on();
			}
				
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power
     710:	60 91 84 00 	lds	r22, 0x0084
     714:	70 91 85 00 	lds	r23, 0x0085
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     720:	29 8d       	ldd	r18, Y+25	; 0x19
     722:	3a 8d       	ldd	r19, Y+26	; 0x1a
     724:	4b 8d       	ldd	r20, Y+27	; 0x1b
     726:	5c 8d       	ldd	r21, Y+28	; 0x1c
     728:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     72c:	18 16       	cp	r1, r24
     72e:	14 f4       	brge	.+4      	; 0x734 <__stack+0x235>
}


void motors_left(void)
{
	set_motor1_on();
     730:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_on();
     732:	5c 9a       	sbi	0x0b, 4	; 11
				
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power

		if ( TCNT1 < power_kill_part1 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time
     734:	60 91 84 00 	lds	r22, 0x0084
     738:	70 91 85 00 	lds	r23, 0x0085
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     744:	2b 85       	ldd	r18, Y+11	; 0x0b
     746:	3c 85       	ldd	r19, Y+12	; 0x0c
     748:	4d 85       	ldd	r20, Y+13	; 0x0d
     74a:	5e 85       	ldd	r21, Y+14	; 0x0e
     74c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     750:	88 23       	and	r24, r24
     752:	14 f4       	brge	.+4      	; 0x758 <__stack+0x259>
}


void motors_off(void)
{
	set_motor1_off();
     754:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_off();
     756:	5c 98       	cbi	0x0b, 4	; 11
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power

		if ( TCNT1 < power_kill_part1 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time
		if ( TCNT1 > power_kill_part2 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time
     758:	60 91 84 00 	lds	r22, 0x0084
     75c:	70 91 85 00 	lds	r23, 0x0085
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     768:	2f 81       	ldd	r18, Y+7	; 0x07
     76a:	38 85       	ldd	r19, Y+8	; 0x08
     76c:	49 85       	ldd	r20, Y+9	; 0x09
     76e:	5a 85       	ldd	r21, Y+10	; 0x0a
     770:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     774:	18 16       	cp	r1, r24
     776:	14 f4       	brge	.+4      	; 0x77c <__stack+0x27d>
}


void motors_off(void)
{
	set_motor1_off();
     778:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_off();
     77a:	5c 98       	cbi	0x0b, 4	; 11
		if ( TCNT1 > power_kill_part2 ) motors_off();            //if throttle is less that 100% - kill power at appropriate time

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     77c:	c2 01       	movw	r24, r4
     77e:	b1 01       	movw	r22, r2
     780:	a4 01       	movw	r20, r8
     782:	93 01       	movw	r18, r6
     784:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	dc f4       	brge	.+54     	; 0x7c2 <__stack+0x2c3>
     78c:	10 e0       	ldi	r17, 0x00	; 0
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	a4 01       	movw	r20, r8
     794:	93 01       	movw	r18, r6
     796:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     79a:	18 16       	cp	r1, r24
     79c:	0c f4       	brge	.+2      	; 0x7a0 <__stack+0x2a1>
     79e:	11 e0       	ldi	r17, 0x01	; 1
     7a0:	10 27       	eor	r17, r16
     7a2:	41 2f       	mov	r20, r17
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	5a a3       	std	Y+34, r21	; 0x22
     7a8:	49 a3       	std	Y+33, r20	; 0x21
		{
			led_is_on_now = 1;
			if ( led_ref > led_off ) led_is_on_now = 0;
			if ( led_ref > led_on ) led_is_on_now = 1;
     7aa:	c7 01       	movw	r24, r14
     7ac:	b6 01       	movw	r22, r12
     7ae:	a2 01       	movw	r20, r4
     7b0:	91 01       	movw	r18, r2
     7b2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     7b6:	18 16       	cp	r1, r24
     7b8:	24 f4       	brge	.+8      	; 0x7c2 <__stack+0x2c3>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	9a a3       	std	Y+34, r25	; 0x22
     7c0:	89 a3       	std	Y+33, r24	; 0x21
		}


		if (led_off > led_on)
     7c2:	c4 01       	movw	r24, r8
     7c4:	b3 01       	movw	r22, r6
     7c6:	a2 01       	movw	r20, r4
     7c8:	91 01       	movw	r18, r2
     7ca:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	c4 f4       	brge	.+48     	; 0x802 <__stack+0x303>
     7d2:	1a a2       	std	Y+34, r1	; 0x22
     7d4:	19 a2       	std	Y+33, r1	; 0x21
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	a2 01       	movw	r20, r4
     7dc:	91 01       	movw	r18, r2
     7de:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     7e2:	18 16       	cp	r1, r24
     7e4:	24 f4       	brge	.+8      	; 0x7ee <__stack+0x2ef>
     7e6:	a1 e0       	ldi	r26, 0x01	; 1
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	ba a3       	std	Y+34, r27	; 0x22
     7ec:	a9 a3       	std	Y+33, r26	; 0x21
		{
		
			led_is_on_now = 0;
			if ( led_ref > led_on ) led_is_on_now = 1;
			if ( led_ref > led_off ) led_is_on_now = 0;
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	a4 01       	movw	r20, r8
     7f4:	93 01       	movw	r18, r6
     7f6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	14 f4       	brge	.+4      	; 0x802 <__stack+0x303>
     7fe:	1a a2       	std	Y+34, r1	; 0x22
     800:	19 a2       	std	Y+33, r1	; 0x21
		
		}
	
	
		if ( led_is_on_now == 1 )
     802:	29 a1       	ldd	r18, Y+33	; 0x21
     804:	3a a1       	ldd	r19, Y+34	; 0x22
     806:	21 30       	cpi	r18, 0x01	; 1
     808:	31 05       	cpc	r19, r1
     80a:	89 f4       	brne	.+34     	; 0x82e <__stack+0x32f>
		{
			//flash the LED if we're in flashy mode - otherwise it's just on
			if ( flashy_led == 1 )
     80c:	4d 81       	ldd	r20, Y+5	; 0x05
     80e:	5e 81       	ldd	r21, Y+6	; 0x06
     810:	41 30       	cpi	r20, 0x01	; 1
     812:	51 05       	cpc	r21, r1
     814:	51 f4       	brne	.+20     	; 0x82a <__stack+0x32b>
			{
				
				if ((TCNT1 / 160) % 2 == 0) set_led_on(); else set_led_off();
     816:	80 91 84 00 	lds	r24, 0x0084
     81a:	90 91 85 00 	lds	r25, 0x0085
     81e:	60 ea       	ldi	r22, 0xA0	; 160
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__udivmodhi4>
     826:	60 fd       	sbrc	r22, 0
     828:	06 c0       	rjmp	.+12     	; 0x836 <__stack+0x337>
			}
			else
			{
				set_led_on();
     82a:	5d 9a       	sbi	0x0b, 5	; 11
     82c:	05 c0       	rjmp	.+10     	; 0x838 <__stack+0x339>
			}
		}

		if ( led_is_on_now == 0 )
     82e:	89 a1       	ldd	r24, Y+33	; 0x21
     830:	9a a1       	ldd	r25, Y+34	; 0x22
     832:	89 2b       	or	r24, r25
     834:	09 f4       	brne	.+2      	; 0x838 <__stack+0x339>
		{
			set_led_off();
     836:	5d 98       	cbi	0x0b, 5	; 11

	
void do_spin_180(int spin_cycle)
{	

	while (TCNT1 < half_spin_time)
     838:	60 91 84 00 	lds	r22, 0x0084
     83c:	70 91 85 00 	lds	r23, 0x0085
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     848:	29 81       	ldd	r18, Y+1	; 0x01
     84a:	3a 81       	ldd	r19, Y+2	; 0x02
     84c:	4b 81       	ldd	r20, Y+3	; 0x03
     84e:	5c 81       	ldd	r21, Y+4	; 0x04
     850:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     854:	87 fd       	sbrc	r24, 7
     856:	bf ce       	rjmp	.-642    	; 0x5d6 <__stack+0xd7>
     858:	c0 92 72 01 	sts	0x0172, r12
     85c:	d0 92 73 01 	sts	0x0173, r13
     860:	e0 92 74 01 	sts	0x0174, r14
     864:	f0 92 75 01 	sts	0x0175, r15
     868:	a9 a1       	ldd	r26, Y+33	; 0x21
     86a:	ba a1       	ldd	r27, Y+34	; 0x22
     86c:	b0 93 71 01 	sts	0x0171, r27
     870:	a0 93 70 01 	sts	0x0170, r26
			set_led_off();
		}
		
	}

}
     874:	a2 96       	adiw	r28, 0x22	; 34
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	cf 91       	pop	r28
     882:	df 91       	pop	r29
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	4f 90       	pop	r4
     8a0:	3f 90       	pop	r3
     8a2:	2f 90       	pop	r2
     8a4:	08 95       	ret

000008a6 <motors_off>:


void motors_off(void)
{
	set_motor1_off();
     8a6:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_off();
     8a8:	5c 98       	cbi	0x0b, 4	; 11
}
     8aa:	08 95       	ret

000008ac <motors_left>:


void motors_left(void)
{
	set_motor1_on();
     8ac:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_on();
     8ae:	5c 9a       	sbi	0x0b, 4	; 11
}
     8b0:	08 95       	ret

000008b2 <motor1_on>:


void motor1_on(void)
{
	set_motor1_on();
     8b2:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_off();
     8b4:	5c 98       	cbi	0x0b, 4	; 11
}
     8b6:	08 95       	ret

000008b8 <motor2_on>:

void motor2_on(void)
{
	set_motor1_off();
     8b8:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_on();
     8ba:	5c 9a       	sbi	0x0b, 4	; 11
}
     8bc:	08 95       	ret

000008be <reset_rc>:


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     8be:	10 92 4a 01 	sts	0x014A, r1
     8c2:	10 92 4b 01 	sts	0x014B, r1
     8c6:	10 92 4c 01 	sts	0x014C, r1
     8ca:	10 92 4d 01 	sts	0x014D, r1
	leftright_hightime = 0;
     8ce:	10 92 52 01 	sts	0x0152, r1
     8d2:	10 92 53 01 	sts	0x0153, r1
     8d6:	10 92 54 01 	sts	0x0154, r1
     8da:	10 92 55 01 	sts	0x0155, r1
	forwardback_hightime = 0;
     8de:	10 92 4e 01 	sts	0x014E, r1
     8e2:	10 92 4f 01 	sts	0x014F, r1
     8e6:	10 92 50 01 	sts	0x0150, r1
     8ea:	10 92 51 01 	sts	0x0151, r1

}
     8ee:	08 95       	ret

000008f0 <throttle_change>:

//updates RC channels any time specified pin goes high/low
//following 3 routines are all identical except for channels and some safety code in throttle_change (not easy to consolidate them)
void throttle_change(void)
{
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
	
	//did the pin go HIGH? - then note time
	if ( throttle_pin != 0 ) throttle_hightime = TCNT1;    
     8f8:	18 9b       	sbis	0x03, 0	; 3
     8fa:	0e c0       	rjmp	.+28     	; 0x918 <throttle_change+0x28>
     8fc:	80 91 84 00 	lds	r24, 0x0084
     900:	90 91 85 00 	lds	r25, 0x0085
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	80 93 4a 01 	sts	0x014A, r24
     90c:	90 93 4b 01 	sts	0x014B, r25
     910:	a0 93 4c 01 	sts	0x014C, r26
     914:	b0 93 4d 01 	sts	0x014D, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if ( throttle_pin == 0 && throttle_hightime != 0 && TCNT1 > throttle_hightime)
     918:	18 99       	sbic	0x03, 0	; 3
     91a:	59 c0       	rjmp	.+178    	; 0x9ce <throttle_change+0xde>
     91c:	e0 90 4a 01 	lds	r14, 0x014A
     920:	f0 90 4b 01 	lds	r15, 0x014B
     924:	00 91 4c 01 	lds	r16, 0x014C
     928:	10 91 4d 01 	lds	r17, 0x014D
     92c:	e1 14       	cp	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	01 05       	cpc	r16, r1
     932:	11 05       	cpc	r17, r1
     934:	09 f4       	brne	.+2      	; 0x938 <throttle_change+0x48>
     936:	4b c0       	rjmp	.+150    	; 0x9ce <throttle_change+0xde>
     938:	80 91 84 00 	lds	r24, 0x0084
     93c:	90 91 85 00 	lds	r25, 0x0085
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	e8 16       	cp	r14, r24
     946:	f9 06       	cpc	r15, r25
     948:	0a 07       	cpc	r16, r26
     94a:	1b 07       	cpc	r17, r27
     94c:	0c f0       	brlt	.+2      	; 0x950 <throttle_change+0x60>
     94e:	3f c0       	rjmp	.+126    	; 0x9ce <throttle_change+0xde>
	{		
		throttle = ((throttle * 85) + ((TCNT1 - throttle_hightime) * 15)) / 100;		//smoothed RC data
     950:	60 91 86 01 	lds	r22, 0x0186
     954:	70 91 87 01 	lds	r23, 0x0187
     958:	80 91 88 01 	lds	r24, 0x0188
     95c:	90 91 89 01 	lds	r25, 0x0189
     960:	20 91 84 00 	lds	r18, 0x0084
     964:	30 91 85 00 	lds	r19, 0x0085
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	2e 19       	sub	r18, r14
     96e:	3f 09       	sbc	r19, r15
     970:	40 0b       	sbc	r20, r16
     972:	51 0b       	sbc	r21, r17
     974:	79 01       	movw	r14, r18
     976:	8a 01       	movw	r16, r20
     978:	e4 e0       	ldi	r30, 0x04	; 4
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	ea 95       	dec	r30
     984:	d1 f7       	brne	.-12     	; 0x97a <throttle_change+0x8a>
     986:	e2 1a       	sub	r14, r18
     988:	f3 0a       	sbc	r15, r19
     98a:	04 0b       	sbc	r16, r20
     98c:	15 0b       	sbc	r17, r21
     98e:	25 e5       	ldi	r18, 0x55	; 85
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsi3>
     99a:	e6 0e       	add	r14, r22
     99c:	f7 1e       	adc	r15, r23
     99e:	08 1f       	adc	r16, r24
     9a0:	19 1f       	adc	r17, r25
     9a2:	c8 01       	movw	r24, r16
     9a4:	b7 01       	movw	r22, r14
     9a6:	24 e6       	ldi	r18, 0x64	; 100
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodsi4>
     9b2:	c9 01       	movw	r24, r18
     9b4:	da 01       	movw	r26, r20
     9b6:	80 93 86 01 	sts	0x0186, r24
     9ba:	90 93 87 01 	sts	0x0187, r25
     9be:	a0 93 88 01 	sts	0x0188, r26
     9c2:	b0 93 89 01 	sts	0x0189, r27
																						//throttle is highly smoothed to help prevent accidental spin-down
		rotations_since_throttle_was_set = 0;					 //note that throttle was successfully set (for safety)
     9c6:	10 92 43 01 	sts	0x0143, r1
     9ca:	10 92 42 01 	sts	0x0142, r1
	}


	throttle_hilow = throttle_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     9ce:	83 b1       	in	r24, 0x03	; 3
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	81 70       	andi	r24, 0x01	; 1
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	90 93 bf 01 	sts	0x01BF, r25
     9da:	80 93 be 01 	sts	0x01BE, r24
	
}
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <leftright_change>:

void leftright_change(void)
{
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	//did the pin go HIGH? - then note time
	if (leftright_pin != 0 ) leftright_hightime = TCNT1;    
     9f0:	19 9b       	sbis	0x03, 1	; 3
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <leftright_change+0x28>
     9f4:	80 91 84 00 	lds	r24, 0x0084
     9f8:	90 91 85 00 	lds	r25, 0x0085
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	80 93 52 01 	sts	0x0152, r24
     a04:	90 93 53 01 	sts	0x0153, r25
     a08:	a0 93 54 01 	sts	0x0154, r26
     a0c:	b0 93 55 01 	sts	0x0155, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (leftright_pin == 0 && leftright_hightime != 0 && TCNT1 > leftright_hightime)
     a10:	19 99       	sbic	0x03, 1	; 3
     a12:	3e c0       	rjmp	.+124    	; 0xa90 <leftright_change+0xa8>
     a14:	e0 90 52 01 	lds	r14, 0x0152
     a18:	f0 90 53 01 	lds	r15, 0x0153
     a1c:	00 91 54 01 	lds	r16, 0x0154
     a20:	10 91 55 01 	lds	r17, 0x0155
     a24:	e1 14       	cp	r14, r1
     a26:	f1 04       	cpc	r15, r1
     a28:	01 05       	cpc	r16, r1
     a2a:	11 05       	cpc	r17, r1
     a2c:	89 f1       	breq	.+98     	; 0xa90 <leftright_change+0xa8>
     a2e:	80 91 84 00 	lds	r24, 0x0084
     a32:	90 91 85 00 	lds	r25, 0x0085
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e8 16       	cp	r14, r24
     a3c:	f9 06       	cpc	r15, r25
     a3e:	0a 07       	cpc	r16, r26
     a40:	1b 07       	cpc	r17, r27
     a42:	34 f5       	brge	.+76     	; 0xa90 <leftright_change+0xa8>
	{
			leftright = ((leftright * 50) + ((TCNT1 - leftright_hightime) * 50)) / 100;		//smoothed RC data
     a44:	20 91 8e 01 	lds	r18, 0x018E
     a48:	30 91 8f 01 	lds	r19, 0x018F
     a4c:	40 91 90 01 	lds	r20, 0x0190
     a50:	50 91 91 01 	lds	r21, 0x0191
     a54:	60 91 84 00 	lds	r22, 0x0084
     a58:	70 91 85 00 	lds	r23, 0x0085
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	6e 19       	sub	r22, r14
     a62:	7f 09       	sbc	r23, r15
     a64:	80 0b       	sbc	r24, r16
     a66:	91 0b       	sbc	r25, r17
     a68:	62 0f       	add	r22, r18
     a6a:	73 1f       	adc	r23, r19
     a6c:	84 1f       	adc	r24, r20
     a6e:	95 1f       	adc	r25, r21
     a70:	22 e0       	ldi	r18, 0x02	; 2
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodsi4>
     a7c:	c9 01       	movw	r24, r18
     a7e:	da 01       	movw	r26, r20
     a80:	80 93 8e 01 	sts	0x018E, r24
     a84:	90 93 8f 01 	sts	0x018F, r25
     a88:	a0 93 90 01 	sts	0x0190, r26
     a8c:	b0 93 91 01 	sts	0x0191, r27
	}
  
	leftright_hilow = leftright_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     a90:	83 b1       	in	r24, 0x03	; 3
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	82 70       	andi	r24, 0x02	; 2
     a96:	90 70       	andi	r25, 0x00	; 0
     a98:	90 93 5b 01 	sts	0x015B, r25
     a9c:	80 93 5a 01 	sts	0x015A, r24
		
}
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	08 95       	ret

00000aaa <forwardback_change>:

void forwardback_change(void)
{
	//did the pin go HIGH? - then note time
	if (forwardback_pin != 0 ) forwardback_hightime = TCNT1;    
     aaa:	1a 9b       	sbis	0x03, 2	; 3
     aac:	0e c0       	rjmp	.+28     	; 0xaca <forwardback_change+0x20>
     aae:	80 91 84 00 	lds	r24, 0x0084
     ab2:	90 91 85 00 	lds	r25, 0x0085
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	80 93 4e 01 	sts	0x014E, r24
     abe:	90 93 4f 01 	sts	0x014F, r25
     ac2:	a0 93 50 01 	sts	0x0150, r26
     ac6:	b0 93 51 01 	sts	0x0151, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (forwardback_pin == 0 && forwardback_hightime != 0 && TCNT1 > forwardback_hightime) forwardback = TCNT1 - forwardback_hightime;      
     aca:	1a 99       	sbic	0x03, 2	; 3
     acc:	2a c0       	rjmp	.+84     	; 0xb22 <forwardback_change+0x78>
     ace:	20 91 4e 01 	lds	r18, 0x014E
     ad2:	30 91 4f 01 	lds	r19, 0x014F
     ad6:	40 91 50 01 	lds	r20, 0x0150
     ada:	50 91 51 01 	lds	r21, 0x0151
     ade:	21 15       	cp	r18, r1
     ae0:	31 05       	cpc	r19, r1
     ae2:	41 05       	cpc	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	e9 f0       	breq	.+58     	; 0xb22 <forwardback_change+0x78>
     ae8:	80 91 84 00 	lds	r24, 0x0084
     aec:	90 91 85 00 	lds	r25, 0x0085
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	4a 07       	cpc	r20, r26
     afa:	5b 07       	cpc	r21, r27
     afc:	94 f4       	brge	.+36     	; 0xb22 <forwardback_change+0x78>
     afe:	80 91 84 00 	lds	r24, 0x0084
     b02:	90 91 85 00 	lds	r25, 0x0085
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	82 1b       	sub	r24, r18
     b0c:	93 0b       	sbc	r25, r19
     b0e:	a4 0b       	sbc	r26, r20
     b10:	b5 0b       	sbc	r27, r21
     b12:	80 93 6c 01 	sts	0x016C, r24
     b16:	90 93 6d 01 	sts	0x016D, r25
     b1a:	a0 93 6e 01 	sts	0x016E, r26
     b1e:	b0 93 6f 01 	sts	0x016F, r27
  
	forwardback_hilow = forwardback_pin;                               //make note of pin state for reference next time interrupt is triggered...
     b22:	83 b1       	in	r24, 0x03	; 3
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	84 70       	andi	r24, 0x04	; 4
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	90 93 b7 01 	sts	0x01B7, r25
     b2e:	80 93 b6 01 	sts	0x01B6, r24

}
     b32:	08 95       	ret

00000b34 <__vector_3>:


//main interrupt handler - is called any time any ports on PORTB change

ISR (PCINT0_vect)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	
	//check all RC channels to see if they were updated
	if (throttle_hilow != throttle_pin) throttle_change();
     b56:	83 b1       	in	r24, 0x03	; 3
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	81 70       	andi	r24, 0x01	; 1
     b5c:	90 70       	andi	r25, 0x00	; 0
     b5e:	20 91 be 01 	lds	r18, 0x01BE
     b62:	30 91 bf 01 	lds	r19, 0x01BF
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	11 f0       	breq	.+4      	; 0xb70 <__vector_3+0x3c>
     b6c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <throttle_change>
	if (leftright_hilow != leftright_pin) leftright_change();
     b70:	83 b1       	in	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	82 70       	andi	r24, 0x02	; 2
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	20 91 5a 01 	lds	r18, 0x015A
     b7c:	30 91 5b 01 	lds	r19, 0x015B
     b80:	28 17       	cp	r18, r24
     b82:	39 07       	cpc	r19, r25
     b84:	11 f0       	breq	.+4      	; 0xb8a <__vector_3+0x56>
     b86:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <leftright_change>
	if (forwardback_hilow != forwardback_pin) forwardback_change();
     b8a:	83 b1       	in	r24, 0x03	; 3
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	84 70       	andi	r24, 0x04	; 4
     b90:	90 70       	andi	r25, 0x00	; 0
     b92:	20 91 b6 01 	lds	r18, 0x01B6
     b96:	30 91 b7 01 	lds	r19, 0x01B7
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	11 f0       	breq	.+4      	; 0xba4 <__vector_3+0x70>
     ba0:	0e 94 55 05 	call	0xaaa	; 0xaaa <forwardback_change>

}
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	bf 91       	pop	r27
     baa:	af 91       	pop	r26
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	7f 91       	pop	r23
     bb2:	6f 91       	pop	r22
     bb4:	5f 91       	pop	r21
     bb6:	4f 91       	pop	r20
     bb8:	3f 91       	pop	r19
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <SetupTimer1>:


void SetupTimer1(void)
{

	TCCR1A = 0;                               //mode = 0
     bc6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	80 93 81 00 	sts	0x0081, r24

}
     bd0:	08 95       	ret

00000bd2 <adc_init>:
void adc_init(void)

{
 
  	// Free running Mode
	ADCSRB = 0x00;
     bd2:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     bd6:	86 e8       	ldi	r24, 0x86	; 134
     bd8:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	80 93 7c 00 	sts	0x007C, r24

   
}
     be2:	08 95       	ret

00000be4 <read_adc>:
{

    unsigned int adc_data;
	
	// Start conversion by setting ADSC on ADCSRA Register
	  ADCSRA |= (1<<ADSC);
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	80 64       	ori	r24, 0x40	; 64
     bea:	80 93 7a 00 	sts	0x007A, r24

	// wait until convertion complete ADSC=0 -> Complete
    while (ADCSRA & (1<<ADSC));
     bee:	80 91 7a 00 	lds	r24, 0x007A
     bf2:	86 fd       	sbrc	r24, 6
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <read_adc+0xa>
	    
	adc_data = ADCL;   
     bf6:	90 91 78 00 	lds	r25, 0x0078

	//shift from low level to high level ADC, from 8bit to 10bit

	adc_data += (ADCH<<8);	  
     bfa:	80 91 79 00 	lds	r24, 0x0079
     bfe:	38 2f       	mov	r19, r24
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	29 0f       	add	r18, r25
     c04:	31 1d       	adc	r19, r1

	return (adc_data);

}
     c06:	c9 01       	movw	r24, r18
     c08:	08 95       	ret

00000c0a <get_config_constants>:


}

void get_config_constants(void)
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
     c12:	10 92 35 01 	sts	0x0135, r1
     c16:	10 92 34 01 	sts	0x0134, r1
	for (x = 0; x < 20; x++)
     c1a:	10 92 64 01 	sts	0x0164, r1
     c1e:	10 92 65 01 	sts	0x0165, r1
     c22:	10 92 66 01 	sts	0x0166, r1
     c26:	10 92 67 01 	sts	0x0167, r1
     c2a:	00 e5       	ldi	r16, 0x50	; 80
     c2c:	13 ec       	ldi	r17, 0xC3	; 195
     c2e:	1e c0       	rjmp	.+60     	; 0xc6c <get_config_constants+0x62>
	{
		base_accel = base_accel + read_adc();               				//get accel data
     c30:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_adc>
     c34:	c8 0f       	add	r28, r24
     c36:	d9 1f       	adc	r29, r25
     c38:	d0 93 35 01 	sts	0x0135, r29
     c3c:	c0 93 34 01 	sts	0x0134, r28
     c40:	c8 01       	movw	r24, r16
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <get_config_constants+0x38>
{

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
	for (x = 0; x < 20; x++)
     c46:	80 91 64 01 	lds	r24, 0x0164
     c4a:	90 91 65 01 	lds	r25, 0x0165
     c4e:	a0 91 66 01 	lds	r26, 0x0166
     c52:	b0 91 67 01 	lds	r27, 0x0167
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	a1 1d       	adc	r26, r1
     c5a:	b1 1d       	adc	r27, r1
     c5c:	80 93 64 01 	sts	0x0164, r24
     c60:	90 93 65 01 	sts	0x0165, r25
     c64:	a0 93 66 01 	sts	0x0166, r26
     c68:	b0 93 67 01 	sts	0x0167, r27
     c6c:	80 91 64 01 	lds	r24, 0x0164
     c70:	90 91 65 01 	lds	r25, 0x0165
     c74:	a0 91 66 01 	lds	r26, 0x0166
     c78:	b0 91 67 01 	lds	r27, 0x0167
     c7c:	c0 91 34 01 	lds	r28, 0x0134
     c80:	d0 91 35 01 	lds	r29, 0x0135
     c84:	44 97       	sbiw	r24, 0x14	; 20
     c86:	a1 05       	cpc	r26, r1
     c88:	b1 05       	cpc	r27, r1
     c8a:	94 f2       	brlt	.-92     	; 0xc30 <get_config_constants+0x26>
	{
		base_accel = base_accel + read_adc();               				//get accel data
		_delay_ms(10);
	}
	base_accel = base_accel / 20;
     c8c:	ce 01       	movw	r24, r28
     c8e:	64 e1       	ldi	r22, 0x14	; 20
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 ed 11 	call	0x23da	; 0x23da <__divmodhi4>
     c96:	70 93 35 01 	sts	0x0135, r23
     c9a:	60 93 34 01 	sts	0x0134, r22
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	c4 ef       	ldi	r28, 0xF4	; 244
     cac:	d1 e0       	ldi	r29, 0x01	; 1
     cae:	15 c0       	rjmp	.+42     	; 0xcda <get_config_constants+0xd0>
	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
	{
		heading_center = heading_center + leftright;               		
     cb0:	80 91 8e 01 	lds	r24, 0x018E
     cb4:	90 91 8f 01 	lds	r25, 0x018F
     cb8:	a0 91 90 01 	lds	r26, 0x0190
     cbc:	b0 91 91 01 	lds	r27, 0x0191
     cc0:	68 0f       	add	r22, r24
     cc2:	79 1f       	adc	r23, r25
     cc4:	88 ec       	ldi	r24, 0xC8	; 200
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fe 01       	movw	r30, r28
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <get_config_constants+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd0:	d9 f7       	brne	.-10     	; 0xcc8 <get_config_constants+0xbe>
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	4f 4f       	sbci	r20, 0xFF	; 255
     cd8:	5f 4f       	sbci	r21, 0xFF	; 255


	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
     cda:	24 31       	cpi	r18, 0x14	; 20
     cdc:	31 05       	cpc	r19, r1
     cde:	41 05       	cpc	r20, r1
     ce0:	51 05       	cpc	r21, r1
     ce2:	34 f3       	brlt	.-52     	; 0xcb0 <get_config_constants+0xa6>
     ce4:	20 93 64 01 	sts	0x0164, r18
     ce8:	30 93 65 01 	sts	0x0165, r19
     cec:	40 93 66 01 	sts	0x0166, r20
     cf0:	50 93 67 01 	sts	0x0167, r21
	{
		heading_center = heading_center + leftright;               		
		_delay_ms(20);

	}
	heading_center = heading_center / 20;
     cf4:	cb 01       	movw	r24, r22
     cf6:	64 e1       	ldi	r22, 0x14	; 20
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 ed 11 	call	0x23da	; 0x23da <__divmodhi4>
     cfe:	70 93 0b 01 	sts	0x010B, r23
     d02:	60 93 0a 01 	sts	0x010A, r22


}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <main_calculations>:



void main_calculations(void)

{
     d10:	2f 92       	push	r2
     d12:	3f 92       	push	r3
     d14:	4f 92       	push	r4
     d16:	5f 92       	push	r5
     d18:	6f 92       	push	r6
     d1a:	7f 92       	push	r7
     d1c:	8f 92       	push	r8
     d1e:	9f 92       	push	r9
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <main_calculations+0x26>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <main_calculations+0x28>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <main_calculations+0x2a>
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     d3e:	10 92 4a 01 	sts	0x014A, r1
     d42:	10 92 4b 01 	sts	0x014B, r1
     d46:	10 92 4c 01 	sts	0x014C, r1
     d4a:	10 92 4d 01 	sts	0x014D, r1
	leftright_hightime = 0;
     d4e:	10 92 52 01 	sts	0x0152, r1
     d52:	10 92 53 01 	sts	0x0153, r1
     d56:	10 92 54 01 	sts	0x0154, r1
     d5a:	10 92 55 01 	sts	0x0155, r1
	forwardback_hightime = 0;
     d5e:	10 92 4e 01 	sts	0x014E, r1
     d62:	10 92 4f 01 	sts	0x014F, r1
     d66:	10 92 50 01 	sts	0x0150, r1
     d6a:	10 92 51 01 	sts	0x0151, r1

{

	reset_rc();				//resets existing RC data - must get called before timer1 is reset to prevent errors
	
	TCNT1 = 0;				//resets timer (used to track for time spent outside motor drive loop)
     d6e:	10 92 85 00 	sts	0x0085, r1
     d72:	10 92 84 00 	sts	0x0084, r1

//	cli();                	//disable interrupts - bad things seem to happen if the RC interrupts get triggered while doing math...
							//RC data is not updated while in this code

	//Are we going forward or backwards?
	if ( forwardback > (forwardback_center + forwardback_forwardthresh)) forward = 1; else forward = 0;
     d76:	20 91 6c 01 	lds	r18, 0x016C
     d7a:	30 91 6d 01 	lds	r19, 0x016D
     d7e:	40 91 6e 01 	lds	r20, 0x016E
     d82:	50 91 6f 01 	lds	r21, 0x016F
     d86:	60 91 04 01 	lds	r22, 0x0104
     d8a:	70 91 05 01 	lds	r23, 0x0105
     d8e:	80 91 06 01 	lds	r24, 0x0106
     d92:	90 91 07 01 	lds	r25, 0x0107
     d96:	86 0f       	add	r24, r22
     d98:	97 1f       	adc	r25, r23
     d9a:	aa 27       	eor	r26, r26
     d9c:	97 fd       	sbrc	r25, 7
     d9e:	a0 95       	com	r26
     da0:	ba 2f       	mov	r27, r26
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	a4 07       	cpc	r26, r20
     da8:	b5 07       	cpc	r27, r21
     daa:	3c f4       	brge	.+14     	; 0xdba <main_calculations+0xaa>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	90 93 a1 01 	sts	0x01A1, r25
     db4:	80 93 a0 01 	sts	0x01A0, r24
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <main_calculations+0xb2>
     dba:	10 92 a1 01 	sts	0x01A1, r1
     dbe:	10 92 a0 01 	sts	0x01A0, r1
	if ( forwardback < (forwardback_center + forwardback_backthresh)) backward = 1; else backward = 0;
     dc2:	20 91 6c 01 	lds	r18, 0x016C
     dc6:	30 91 6d 01 	lds	r19, 0x016D
     dca:	40 91 6e 01 	lds	r20, 0x016E
     dce:	50 91 6f 01 	lds	r21, 0x016F
     dd2:	80 91 08 01 	lds	r24, 0x0108
     dd6:	90 91 09 01 	lds	r25, 0x0109
     dda:	68 0f       	add	r22, r24
     ddc:	79 1f       	adc	r23, r25
     dde:	cb 01       	movw	r24, r22
     de0:	aa 27       	eor	r26, r26
     de2:	97 fd       	sbrc	r25, 7
     de4:	a0 95       	com	r26
     de6:	ba 2f       	mov	r27, r26
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	3c f4       	brge	.+14     	; 0xe00 <main_calculations+0xf0>
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 b1 01 	sts	0x01B1, r25
     dfa:	80 93 b0 01 	sts	0x01B0, r24
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <main_calculations+0xf8>
     e00:	10 92 b1 01 	sts	0x01B1, r1
     e04:	10 92 b0 01 	sts	0x01B0, r1

	flashy_led = 0;											//by default LED isn't flashy
     e08:	10 92 a3 01 	sts	0x01A3, r1
     e0c:	10 92 a2 01 	sts	0x01A2, r1

	accel_raw_data = read_adc();               				//get accel data
     e10:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <read_adc>
     e14:	9c 01       	movw	r18, r24
     e16:	90 93 9f 01 	sts	0x019F, r25
     e1a:	80 93 9e 01 	sts	0x019E, r24
	
	accel_read = accel_raw_data;                              //move it over to single in case we want to do floating point
	accel_read = accel_read - base_accel;                     //compensate for base (2.5v) level
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	ca 01       	movw	r24, r20
     e24:	b9 01       	movw	r22, r18
     e26:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
     e2a:	7b 01       	movw	r14, r22
     e2c:	8c 01       	movw	r16, r24
     e2e:	60 91 34 01 	lds	r22, 0x0134
     e32:	70 91 35 01 	lds	r23, 0x0135
     e36:	88 27       	eor	r24, r24
     e38:	77 fd       	sbrc	r23, 7
     e3a:	80 95       	com	r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c8 01       	movw	r24, r16
     e48:	b7 01       	movw	r22, r14
     e4a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
     e4e:	60 93 9a 01 	sts	0x019A, r22
     e52:	70 93 9b 01 	sts	0x019B, r23
     e56:	80 93 9c 01 	sts	0x019C, r24
     e5a:	90 93 9d 01 	sts	0x019D, r25
	g = accel_read * g_per_adc_increment;                    //convert to g's
     e5e:	20 91 20 01 	lds	r18, 0x0120
     e62:	30 91 21 01 	lds	r19, 0x0121
     e66:	40 91 22 01 	lds	r20, 0x0122
     e6a:	50 91 23 01 	lds	r21, 0x0123
     e6e:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     e72:	3b 01       	movw	r6, r22
     e74:	4c 01       	movw	r8, r24
     e76:	60 93 76 01 	sts	0x0176, r22
     e7a:	70 93 77 01 	sts	0x0177, r23
     e7e:	80 93 78 01 	sts	0x0178, r24
     e82:	90 93 79 01 	sts	0x0179, r25

	rpm = g * 89445;                                //calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	rpm = rpm / radius;
	rpm = pow(rpm, .5);								
     e86:	20 e8       	ldi	r18, 0x80	; 128
     e88:	32 eb       	ldi	r19, 0xB2	; 178
     e8a:	4e ea       	ldi	r20, 0xAE	; 174
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     e92:	20 91 1c 01 	lds	r18, 0x011C
     e96:	30 91 1d 01 	lds	r19, 0x011D
     e9a:	40 91 1e 01 	lds	r20, 0x011E
     e9e:	50 91 1f 01 	lds	r21, 0x011F
     ea2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
     ea6:	0e 94 67 11 	call	0x22ce	; 0x22ce <sqrt>
     eaa:	7b 01       	movw	r14, r22
     eac:	8c 01       	movw	r16, r24
     eae:	17 01       	movw	r2, r14
     eb0:	28 01       	movw	r4, r16
     eb2:	e0 92 a4 01 	sts	0x01A4, r14
     eb6:	f0 92 a5 01 	sts	0x01A5, r15
     eba:	00 93 a6 01 	sts	0x01A6, r16
     ebe:	10 93 a7 01 	sts	0x01A7, r17
	
	if (rpm > max_observed_rpm) max_observed_rpm = rpm;		//update max_observed_rpm if current rpm is higher
     ec2:	60 91 46 01 	lds	r22, 0x0146
     ec6:	70 91 47 01 	lds	r23, 0x0147
     eca:	80 91 48 01 	lds	r24, 0x0148
     ece:	90 91 49 01 	lds	r25, 0x0149
     ed2:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	64 f4       	brge	.+24     	; 0xefe <main_calculations+0x1ee>
     ee6:	c8 01       	movw	r24, r16
     ee8:	b7 01       	movw	r22, r14
     eea:	0e 94 19 10 	call	0x2032	; 0x2032 <__fixsfsi>
     eee:	60 93 46 01 	sts	0x0146, r22
     ef2:	70 93 47 01 	sts	0x0147, r23
     ef6:	80 93 48 01 	sts	0x0148, r24
     efa:	90 93 49 01 	sts	0x0149, r25
	
	full_spin_time_ms = rpm / 60;                                      //convert RPM to duration of each spin in milliseconds
     efe:	c2 01       	movw	r24, r4
     f00:	b1 01       	movw	r22, r2
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e7       	ldi	r20, 0x70	; 112
     f08:	52 e4       	ldi	r21, 0x42	; 66
     f0a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
     f0e:	60 93 5c 01 	sts	0x015C, r22
     f12:	70 93 5d 01 	sts	0x015D, r23
     f16:	80 93 5e 01 	sts	0x015E, r24
     f1a:	90 93 5f 01 	sts	0x015F, r25
		
	if (full_spin_time_ms == 0) full_spin_time_ms = 1;                          //must prevent any possible division by zero!!!
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	61 f4       	brne	.+24     	; 0xf46 <main_calculations+0x236>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 e8       	ldi	r26, 0x80	; 128
     f34:	bf e3       	ldi	r27, 0x3F	; 63
     f36:	80 93 5c 01 	sts	0x015C, r24
     f3a:	90 93 5d 01 	sts	0x015D, r25
     f3e:	a0 93 5e 01 	sts	0x015E, r26
     f42:	b0 93 5f 01 	sts	0x015F, r27
	full_spin_time_ms = 1 / full_spin_time_ms;
	full_spin_time_ms = full_spin_time_ms * 1000;									//seconds to milliseconds

	full_spin_time_ms = full_spin_time_ms * tracking_comp;                      //compensate with user-set tracking adjustment
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	9f e3       	ldi	r25, 0x3F	; 63
     f4e:	20 91 5c 01 	lds	r18, 0x015C
     f52:	30 91 5d 01 	lds	r19, 0x015D
     f56:	40 91 5e 01 	lds	r20, 0x015E
     f5a:	50 91 5f 01 	lds	r21, 0x015F
     f5e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     f6e:	20 91 2c 01 	lds	r18, 0x012C
     f72:	30 91 2d 01 	lds	r19, 0x012D
     f76:	40 91 2e 01 	lds	r20, 0x012E
     f7a:	50 91 2f 01 	lds	r21, 0x012F
     f7e:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	60 93 5c 01 	sts	0x015C, r22
     f8a:	70 93 5d 01 	sts	0x015D, r23
     f8e:	80 93 5e 01 	sts	0x015E, r24
     f92:	90 93 5f 01 	sts	0x015F, r25

  
	if ( forward == 1 ) full_spin_time_ms = full_spin_time_ms * forward_comp;   //extra compensation if going forward
     f96:	80 91 a0 01 	lds	r24, 0x01A0
     f9a:	90 91 a1 01 	lds	r25, 0x01A1
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <main_calculations+0x2ba>
     fa2:	ca 01       	movw	r24, r20
     fa4:	b9 01       	movw	r22, r18
     fa6:	20 91 24 01 	lds	r18, 0x0124
     faa:	30 91 25 01 	lds	r19, 0x0125
     fae:	40 91 26 01 	lds	r20, 0x0126
     fb2:	50 91 27 01 	lds	r21, 0x0127
     fb6:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     fba:	60 93 5c 01 	sts	0x015C, r22
     fbe:	70 93 5d 01 	sts	0x015D, r23
     fc2:	80 93 5e 01 	sts	0x015E, r24
     fc6:	90 93 5f 01 	sts	0x015F, r25
	if ( backward == 1 ) full_spin_time_ms = full_spin_time_ms * backward_comp; //extra compensation if going backward
     fca:	80 91 b0 01 	lds	r24, 0x01B0
     fce:	90 91 b1 01 	lds	r25, 0x01B1
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	d1 f4       	brne	.+52     	; 0x100a <main_calculations+0x2fa>
     fd6:	60 91 5c 01 	lds	r22, 0x015C
     fda:	70 91 5d 01 	lds	r23, 0x015D
     fde:	80 91 5e 01 	lds	r24, 0x015E
     fe2:	90 91 5f 01 	lds	r25, 0x015F
     fe6:	20 91 28 01 	lds	r18, 0x0128
     fea:	30 91 29 01 	lds	r19, 0x0129
     fee:	40 91 2a 01 	lds	r20, 0x012A
     ff2:	50 91 2b 01 	lds	r21, 0x012B
     ff6:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
     ffa:	60 93 5c 01 	sts	0x015C, r22
     ffe:	70 93 5d 01 	sts	0x015D, r23
    1002:	80 93 5e 01 	sts	0x015E, r24
    1006:	90 93 5f 01 	sts	0x015F, r25



	//converts throttle reading from remote into percentage
	throttle_percent = ((throttle - throttle_low) * 100) / (throttle_high - throttle_low);
    100a:	60 91 86 01 	lds	r22, 0x0186
    100e:	70 91 87 01 	lds	r23, 0x0187
    1012:	80 91 88 01 	lds	r24, 0x0188
    1016:	90 91 89 01 	lds	r25, 0x0189
    101a:	00 91 00 01 	lds	r16, 0x0100
    101e:	10 91 01 01 	lds	r17, 0x0101
    1022:	98 01       	movw	r18, r16
    1024:	44 27       	eor	r20, r20
    1026:	37 fd       	sbrc	r19, 7
    1028:	40 95       	com	r20
    102a:	54 2f       	mov	r21, r20
    102c:	62 1b       	sub	r22, r18
    102e:	73 0b       	sbc	r23, r19
    1030:	84 0b       	sbc	r24, r20
    1032:	95 0b       	sbc	r25, r21
    1034:	24 e6       	ldi	r18, 0x64	; 100
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsi3>
    1040:	20 91 02 01 	lds	r18, 0x0102
    1044:	30 91 03 01 	lds	r19, 0x0103
    1048:	20 1b       	sub	r18, r16
    104a:	31 0b       	sbc	r19, r17
    104c:	44 27       	eor	r20, r20
    104e:	37 fd       	sbrc	r19, 7
    1050:	40 95       	com	r20
    1052:	54 2f       	mov	r21, r20
    1054:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodsi4>
    1058:	ca 01       	movw	r24, r20
    105a:	b9 01       	movw	r22, r18
    105c:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
    1060:	60 93 ac 01 	sts	0x01AC, r22
    1064:	70 93 ad 01 	sts	0x01AD, r23
    1068:	80 93 ae 01 	sts	0x01AE, r24
    106c:	90 93 af 01 	sts	0x01AF, r25
	if ( throttle_percent < 12 ) throttle_percent = 12;    //don't got under X%	 (throttle percent is only set if we exit safety - so lack of "0" throttle isn't a problem)
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e4       	ldi	r20, 0x40	; 64
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    107c:	88 23       	and	r24, r24
    107e:	64 f4       	brge	.+24     	; 0x1098 <main_calculations+0x388>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a0 e4       	ldi	r26, 0x40	; 64
    1086:	b1 e4       	ldi	r27, 0x41	; 65
    1088:	80 93 ac 01 	sts	0x01AC, r24
    108c:	90 93 ad 01 	sts	0x01AD, r25
    1090:	a0 93 ae 01 	sts	0x01AE, r26
    1094:	b0 93 af 01 	sts	0x01AF, r27
	if ( throttle_percent > 100 ) throttle_percent = 100;    //don't got over 100%
    1098:	60 91 ac 01 	lds	r22, 0x01AC
    109c:	70 91 ad 01 	lds	r23, 0x01AD
    10a0:	80 91 ae 01 	lds	r24, 0x01AE
    10a4:	90 91 af 01 	lds	r25, 0x01AF
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	48 ec       	ldi	r20, 0xC8	; 200
    10ae:	52 e4       	ldi	r21, 0x42	; 66
    10b0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	64 f4       	brge	.+24     	; 0x10d0 <main_calculations+0x3c0>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a8 ec       	ldi	r26, 0xC8	; 200
    10be:	b2 e4       	ldi	r27, 0x42	; 66
    10c0:	80 93 ac 01 	sts	0x01AC, r24
    10c4:	90 93 ad 01 	sts	0x01AD, r25
    10c8:	a0 93 ae 01 	sts	0x01AE, r26
    10cc:	b0 93 af 01 	sts	0x01AF, r27
	

	config_mode_throttle_percent = throttle_percent;				//second copy of variable used in config mode (since we're otherwise locking it at 50%)
    10d0:	20 91 ac 01 	lds	r18, 0x01AC
    10d4:	30 91 ad 01 	lds	r19, 0x01AD
    10d8:	40 91 ae 01 	lds	r20, 0x01AE
    10dc:	50 91 af 01 	lds	r21, 0x01AF
    10e0:	20 93 b2 01 	sts	0x01B2, r18
    10e4:	30 93 b3 01 	sts	0x01B3, r19
    10e8:	40 93 b4 01 	sts	0x01B4, r20
    10ec:	50 93 b5 01 	sts	0x01B5, r21
	if (in_config_mode == 1) throttle_percent = 50;			//throttle is locked at 50 percent in config mode
    10f0:	80 91 c0 01 	lds	r24, 0x01C0
    10f4:	90 91 c1 01 	lds	r25, 0x01C1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	69 f4       	brne	.+26     	; 0x111a <main_calculations+0x40a>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a8 e4       	ldi	r26, 0x48	; 72
    1106:	b2 e4       	ldi	r27, 0x42	; 66
    1108:	80 93 ac 01 	sts	0x01AC, r24
    110c:	90 93 ad 01 	sts	0x01AD, r25
    1110:	a0 93 ae 01 	sts	0x01AE, r26
    1114:	b0 93 af 01 	sts	0x01AF, r27
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <main_calculations+0x412>


	//calculates + modifies changes to heading based on input from transmitter - not done if in config mode (and not in the 90+% normal drive mode)
	
	if (in_config_mode == 0 || config_mode_throttle_percent > 90)
    111a:	ad 81       	ldd	r26, Y+5	; 0x05
    111c:	be 81       	ldd	r27, Y+6	; 0x06
    111e:	ab 2b       	or	r26, r27
    1120:	59 f0       	breq	.+22     	; 0x1138 <main_calculations+0x428>
    1122:	ca 01       	movw	r24, r20
    1124:	b9 01       	movw	r22, r18
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	44 eb       	ldi	r20, 0xB4	; 180
    112c:	52 e4       	ldi	r21, 0x42	; 66
    112e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    1132:	18 16       	cp	r1, r24
    1134:	0c f0       	brlt	.+2      	; 0x1138 <main_calculations+0x428>
    1136:	44 c0       	rjmp	.+136    	; 0x11c0 <main_calculations+0x4b0>
	{
		steering_multiplier = heading_center - leftright;
    1138:	20 91 8e 01 	lds	r18, 0x018E
    113c:	30 91 8f 01 	lds	r19, 0x018F
    1140:	40 91 90 01 	lds	r20, 0x0190
    1144:	50 91 91 01 	lds	r21, 0x0191
		steering_multiplier = steering_multiplier * turn_speed;
    1148:	60 91 0a 01 	lds	r22, 0x010A
    114c:	70 91 0b 01 	lds	r23, 0x010B
    1150:	88 27       	eor	r24, r24
    1152:	77 fd       	sbrc	r23, 7
    1154:	80 95       	com	r24
    1156:	98 2f       	mov	r25, r24
    1158:	62 1b       	sub	r22, r18
    115a:	73 0b       	sbc	r23, r19
    115c:	84 0b       	sbc	r24, r20
    115e:	95 0b       	sbc	r25, r21
    1160:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
    1164:	20 91 36 01 	lds	r18, 0x0136
    1168:	30 91 37 01 	lds	r19, 0x0137
    116c:	40 91 38 01 	lds	r20, 0x0138
    1170:	50 91 39 01 	lds	r21, 0x0139
    1174:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
		steering_multiplier = 1 - steering_multiplier;		//starts with 1 as a base value (ie - if it was 0.0 it becomes 1.0 - so there's no change in heading)
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e8       	ldi	r24, 0x80	; 128
    1182:	9f e3       	ldi	r25, 0x3F	; 63
    1184:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	60 93 56 01 	sts	0x0156, r22
    1190:	70 93 57 01 	sts	0x0157, r23
    1194:	80 93 58 01 	sts	0x0158, r24
    1198:	90 93 59 01 	sts	0x0159, r25
		full_spin_time_ms = full_spin_time_ms * steering_multiplier;
    119c:	60 91 5c 01 	lds	r22, 0x015C
    11a0:	70 91 5d 01 	lds	r23, 0x015D
    11a4:	80 91 5e 01 	lds	r24, 0x015E
    11a8:	90 91 5f 01 	lds	r25, 0x015F
    11ac:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    11b0:	60 93 5c 01 	sts	0x015C, r22
    11b4:	70 93 5d 01 	sts	0x015D, r23
    11b8:	80 93 5e 01 	sts	0x015E, r24
    11bc:	90 93 5f 01 	sts	0x015F, r25
	}
	

	half_spin_time = full_spin_time_ms / 2;                          //sets period in MS for each half of spin
    11c0:	a0 90 5c 01 	lds	r10, 0x015C
    11c4:	b0 90 5d 01 	lds	r11, 0x015D
    11c8:	c0 90 5e 01 	lds	r12, 0x015E
    11cc:	d0 90 5f 01 	lds	r13, 0x015F
    11d0:	c6 01       	movw	r24, r12
    11d2:	b5 01       	movw	r22, r10
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    11e0:	60 93 8a 01 	sts	0x018A, r22
    11e4:	70 93 8b 01 	sts	0x018B, r23
    11e8:	80 93 8c 01 	sts	0x018C, r24
    11ec:	90 93 8d 01 	sts	0x018D, r25

	//caps on timing if going too slow or fast
	if ( half_spin_time > 200) half_spin_time = 200;			//slowest allowed - 200ms per half-cycle = 150rpm
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	48 e4       	ldi	r20, 0x48	; 72
    11f6:	53 e4       	ldi	r21, 0x43	; 67
    11f8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    11fc:	18 16       	cp	r1, r24
    11fe:	64 f4       	brge	.+24     	; 0x1218 <main_calculations+0x508>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a8 e4       	ldi	r26, 0x48	; 72
    1206:	b3 e4       	ldi	r27, 0x43	; 67
    1208:	80 93 8a 01 	sts	0x018A, r24
    120c:	90 93 8b 01 	sts	0x018B, r25
    1210:	a0 93 8c 01 	sts	0x018C, r26
    1214:	b0 93 8d 01 	sts	0x018D, r27
	if ( half_spin_time < 5) half_spin_time = 5;				//fastest - 5ms per half-cycle = 6000rpm
    1218:	60 91 8a 01 	lds	r22, 0x018A
    121c:	70 91 8b 01 	lds	r23, 0x018B
    1220:	80 91 8c 01 	lds	r24, 0x018C
    1224:	90 91 8d 01 	lds	r25, 0x018D
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 ea       	ldi	r20, 0xA0	; 160
    122e:	50 e4       	ldi	r21, 0x40	; 64
    1230:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    1234:	88 23       	and	r24, r24
    1236:	64 f4       	brge	.+24     	; 0x1250 <main_calculations+0x540>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a0 ea       	ldi	r26, 0xA0	; 160
    123e:	b0 e4       	ldi	r27, 0x40	; 64
    1240:	80 93 8a 01 	sts	0x018A, r24
    1244:	90 93 8b 01 	sts	0x018B, r25
    1248:	a0 93 8c 01 	sts	0x018C, r26
    124c:	b0 93 8d 01 	sts	0x018D, r27


	//set heading beacon size and location

	led_on = full_spin_time_ms * led_adjust;
	led_on = led_on / 100;
    1250:	c6 01       	movw	r24, r12
    1252:	b5 01       	movw	r22, r10
    1254:	20 91 30 01 	lds	r18, 0x0130
    1258:	30 91 31 01 	lds	r19, 0x0131
    125c:	40 91 32 01 	lds	r20, 0x0132
    1260:	50 91 33 01 	lds	r21, 0x0133
    1264:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	48 ec       	ldi	r20, 0xC8	; 200
    126e:	52 e4       	ldi	r21, 0x42	; 66
    1270:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1274:	7b 01       	movw	r14, r22
    1276:	8c 01       	movw	r16, r24
    1278:	60 93 96 01 	sts	0x0196, r22
    127c:	70 93 97 01 	sts	0x0197, r23
    1280:	80 93 98 01 	sts	0x0198, r24
    1284:	90 93 99 01 	sts	0x0199, r25
	led_off = full_spin_time_ms / 3;                                  //led signal is 33% of circle
	led_off = led_off + led_on;
    1288:	c6 01       	movw	r24, r12
    128a:	b5 01       	movw	r22, r10
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e4       	ldi	r20, 0x40	; 64
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1298:	a8 01       	movw	r20, r16
    129a:	97 01       	movw	r18, r14
    129c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
    12a0:	7b 01       	movw	r14, r22
    12a2:	8c 01       	movw	r16, r24
    12a4:	60 93 b8 01 	sts	0x01B8, r22
    12a8:	70 93 b9 01 	sts	0x01B9, r23
    12ac:	80 93 ba 01 	sts	0x01BA, r24
    12b0:	90 93 bb 01 	sts	0x01BB, r25


	if (led_off >= full_spin_time_ms ) //if led_off is "later" or at end of cycle - shift led_off behind by one cycle
    12b4:	a6 01       	movw	r20, r12
    12b6:	95 01       	movw	r18, r10
    12b8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    12bc:	88 23       	and	r24, r24
    12be:	74 f0       	brlt	.+28     	; 0x12dc <main_calculations+0x5cc>
	{                        
		led_off = led_off - full_spin_time_ms;
    12c0:	c8 01       	movw	r24, r16
    12c2:	b7 01       	movw	r22, r14
    12c4:	a6 01       	movw	r20, r12
    12c6:	95 01       	movw	r18, r10
    12c8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    12cc:	60 93 b8 01 	sts	0x01B8, r22
    12d0:	70 93 b9 01 	sts	0x01B9, r23
    12d4:	80 93 ba 01 	sts	0x01BA, r24
    12d8:	90 93 bb 01 	sts	0x01BB, r25
	}

	if ( led_off < 1 ) led_off = led_off + full_spin_time_ms;
    12dc:	e0 90 b8 01 	lds	r14, 0x01B8
    12e0:	f0 90 b9 01 	lds	r15, 0x01B9
    12e4:	00 91 ba 01 	lds	r16, 0x01BA
    12e8:	10 91 bb 01 	lds	r17, 0x01BB
    12ec:	c8 01       	movw	r24, r16
    12ee:	b7 01       	movw	r22, r14
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	74 f4       	brge	.+28     	; 0x131c <main_calculations+0x60c>
    1300:	c8 01       	movw	r24, r16
    1302:	b7 01       	movw	r22, r14
    1304:	a6 01       	movw	r20, r12
    1306:	95 01       	movw	r18, r10
    1308:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
    130c:	60 93 b8 01 	sts	0x01B8, r22
    1310:	70 93 b9 01 	sts	0x01B9, r23
    1314:	80 93 ba 01 	sts	0x01BA, r24
    1318:	90 93 bb 01 	sts	0x01BB, r25

	//throttling

	full_power_spin = 0;
    131c:	10 92 bd 01 	sts	0x01BD, r1
    1320:	10 92 bc 01 	sts	0x01BC, r1
	if ( rpm < min_rpm ) full_power_spin = 1;                //if we're under the minimum RPM for translation - do the full power spin!
    1324:	c2 01       	movw	r24, r4
    1326:	b1 01       	movw	r22, r2
    1328:	20 91 10 01 	lds	r18, 0x0110
    132c:	30 91 11 01 	lds	r19, 0x0111
    1330:	40 91 12 01 	lds	r20, 0x0112
    1334:	50 91 13 01 	lds	r21, 0x0113
    1338:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    133c:	88 23       	and	r24, r24
    133e:	34 f4       	brge	.+12     	; 0x134c <main_calculations+0x63c>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 bd 01 	sts	0x01BD, r25
    1348:	80 93 bc 01 	sts	0x01BC, r24
	if ( g > max_g || rpm > max_allowed_rpm ) throttle_percent = 10;  				     //if we're over max alowed G's or RPM - reduce throttle
    134c:	c4 01       	movw	r24, r8
    134e:	b3 01       	movw	r22, r6
    1350:	20 91 18 01 	lds	r18, 0x0118
    1354:	30 91 19 01 	lds	r19, 0x0119
    1358:	40 91 1a 01 	lds	r20, 0x011A
    135c:	50 91 1b 01 	lds	r21, 0x011B
    1360:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    1364:	18 16       	cp	r1, r24
    1366:	74 f0       	brlt	.+28     	; 0x1384 <main_calculations+0x674>
    1368:	c2 01       	movw	r24, r4
    136a:	b1 01       	movw	r22, r2
    136c:	20 91 14 01 	lds	r18, 0x0114
    1370:	30 91 15 01 	lds	r19, 0x0115
    1374:	40 91 16 01 	lds	r20, 0x0116
    1378:	50 91 17 01 	lds	r21, 0x0117
    137c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    1380:	18 16       	cp	r1, r24
    1382:	64 f4       	brge	.+24     	; 0x139c <main_calculations+0x68c>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e2       	ldi	r26, 0x20	; 32
    138a:	b1 e4       	ldi	r27, 0x41	; 65
    138c:	80 93 ac 01 	sts	0x01AC, r24
    1390:	90 93 ad 01 	sts	0x01AD, r25
    1394:	a0 93 ae 01 	sts	0x01AE, r26
    1398:	b0 93 af 01 	sts	0x01AF, r27
	
	
	//if throttle is at or over 50% throttle - adjust time spent in braking
	if ( throttle_percent > 50 )
    139c:	80 91 ac 01 	lds	r24, 0x01AC
    13a0:	90 91 ad 01 	lds	r25, 0x01AD
    13a4:	a0 91 ae 01 	lds	r26, 0x01AE
    13a8:	b0 91 af 01 	lds	r27, 0x01AF
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	ab 83       	std	Y+3, r26	; 0x03
    13b2:	bc 83       	std	Y+4, r27	; 0x04
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	48 e4       	ldi	r20, 0x48	; 72
    13be:	52 e4       	ldi	r21, 0x42	; 66
    13c0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__gesf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	0c f0       	brlt	.+2      	; 0x13ca <main_calculations+0x6ba>
    13c8:	76 c0       	rjmp	.+236    	; 0x14b6 <main_calculations+0x7a6>
	{                          

		flashy_led = 1;                                        //flash the LED to indicate we're in fast mode
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	90 93 a3 01 	sts	0x01A3, r25
    13d2:	80 93 a2 01 	sts	0x01A2, r24

		braking_length = half_spin_time * 25;                  
    13d6:	20 90 8a 01 	lds	r2, 0x018A
    13da:	30 90 8b 01 	lds	r3, 0x018B
    13de:	40 90 8c 01 	lds	r4, 0x018C
    13e2:	50 90 8d 01 	lds	r5, 0x018D
    13e6:	c2 01       	movw	r24, r4
    13e8:	b1 01       	movw	r22, r2
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	48 ec       	ldi	r20, 0xC8	; 200
    13f0:	51 e4       	ldi	r21, 0x41	; 65
    13f2:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
		braking_length = braking_length / throttle_percent;    
    13f6:	29 81       	ldd	r18, Y+1	; 0x01
    13f8:	3a 81       	ldd	r19, Y+2	; 0x02
    13fa:	4b 81       	ldd	r20, Y+3	; 0x03
    13fc:	5c 81       	ldd	r21, Y+4	; 0x04
    13fe:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1402:	7b 01       	movw	r14, r22
    1404:	8c 01       	movw	r16, r24
    1406:	60 93 60 01 	sts	0x0160, r22
    140a:	70 93 61 01 	sts	0x0161, r23
    140e:	80 93 62 01 	sts	0x0162, r24
    1412:	90 93 63 01 	sts	0x0163, r25

		begin_brake = half_spin_time / 2;
    1416:	c2 01       	movw	r24, r4
    1418:	b1 01       	movw	r22, r2
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1426:	5b 01       	movw	r10, r22
    1428:	6c 01       	movw	r12, r24
		begin_brake = begin_brake - braking_length;
    142a:	a8 01       	movw	r20, r16
    142c:	97 01       	movw	r18, r14
    142e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    1432:	3b 01       	movw	r6, r22
    1434:	4c 01       	movw	r8, r24
    1436:	60 93 c2 01 	sts	0x01C2, r22
    143a:	70 93 c3 01 	sts	0x01C3, r23
    143e:	80 93 c4 01 	sts	0x01C4, r24
    1442:	90 93 c5 01 	sts	0x01C5, r25

		end_brake = half_spin_time / 2;
		end_brake = end_brake + braking_length;
    1446:	c6 01       	movw	r24, r12
    1448:	b5 01       	movw	r22, r10
    144a:	a8 01       	movw	r20, r16
    144c:	97 01       	movw	r18, r14
    144e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
    1452:	60 93 92 01 	sts	0x0192, r22
    1456:	70 93 93 01 	sts	0x0193, r23
    145a:	80 93 94 01 	sts	0x0194, r24
    145e:	90 93 95 01 	sts	0x0195, r25
	
		if ( begin_brake < 1 )	begin_brake = 1;               //make sure begin_brake isn't getting set to 0
    1462:	c4 01       	movw	r24, r8
    1464:	b3 01       	movw	r22, r6
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    1472:	88 23       	and	r24, r24
    1474:	64 f4       	brge	.+24     	; 0x148e <main_calculations+0x77e>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e8       	ldi	r26, 0x80	; 128
    147c:	bf e3       	ldi	r27, 0x3F	; 63
    147e:	80 93 c2 01 	sts	0x01C2, r24
    1482:	90 93 c3 01 	sts	0x01C3, r25
    1486:	a0 93 c4 01 	sts	0x01C4, r26
    148a:	b0 93 c5 01 	sts	0x01C5, r27
			
		power_kill_part1 = 0;                                  //power_kill not used if throttle over 50%
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	80 93 82 01 	sts	0x0182, r24
    149a:	90 93 83 01 	sts	0x0183, r25
    149e:	a0 93 84 01 	sts	0x0184, r26
    14a2:	b0 93 85 01 	sts	0x0185, r27
		power_kill_part2 = half_spin_time;
    14a6:	20 92 7a 01 	sts	0x017A, r2
    14aa:	30 92 7b 01 	sts	0x017B, r3
    14ae:	40 92 7c 01 	sts	0x017C, r4
    14b2:	50 92 7d 01 	sts	0x017D, r5

	}


	if ( throttle_percent <= 50 )                           //if throttle under 50% - kill the motors for a portion of each spin
    14b6:	69 81       	ldd	r22, Y+1	; 0x01
    14b8:	7a 81       	ldd	r23, Y+2	; 0x02
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	48 e4       	ldi	r20, 0x48	; 72
    14c4:	52 e4       	ldi	r21, 0x42	; 66
    14c6:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__cmpsf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	0c f4       	brge	.+2      	; 0x14d0 <main_calculations+0x7c0>
    14ce:	4e c0       	rjmp	.+156    	; 0x156c <main_calculations+0x85c>
	{
		begin_brake = 1;
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e8       	ldi	r26, 0x80	; 128
    14d6:	bf e3       	ldi	r27, 0x3F	; 63
    14d8:	80 93 c2 01 	sts	0x01C2, r24
    14dc:	90 93 c3 01 	sts	0x01C3, r25
    14e0:	a0 93 c4 01 	sts	0x01C4, r26
    14e4:	b0 93 c5 01 	sts	0x01C5, r27
		end_brake = half_spin_time;
    14e8:	e0 90 8a 01 	lds	r14, 0x018A
    14ec:	f0 90 8b 01 	lds	r15, 0x018B
    14f0:	00 91 8c 01 	lds	r16, 0x018C
    14f4:	10 91 8d 01 	lds	r17, 0x018D
    14f8:	e0 92 92 01 	sts	0x0192, r14
    14fc:	f0 92 93 01 	sts	0x0193, r15
    1500:	00 93 94 01 	sts	0x0194, r16
    1504:	10 93 95 01 	sts	0x0195, r17

		power_kill_length = 50 - throttle_percent;           //set time in each cycle to cut power (throttling)
		power_kill_length = power_kill_length * half_spin_time;
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	88 e4       	ldi	r24, 0x48	; 72
    150e:	92 e4       	ldi	r25, 0x42	; 66
    1510:	29 81       	ldd	r18, Y+1	; 0x01
    1512:	3a 81       	ldd	r19, Y+2	; 0x02
    1514:	4b 81       	ldd	r20, Y+3	; 0x03
    1516:	5c 81       	ldd	r21, Y+4	; 0x04
    1518:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    151c:	a8 01       	movw	r20, r16
    151e:	97 01       	movw	r18, r14
    1520:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
		power_kill_length = power_kill_length / 150;
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	46 e1       	ldi	r20, 0x16	; 22
    152a:	53 e4       	ldi	r21, 0x43	; 67
    152c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	60 93 a8 01 	sts	0x01A8, r22
    1538:	70 93 a9 01 	sts	0x01A9, r23
    153c:	80 93 aa 01 	sts	0x01AA, r24
    1540:	90 93 ab 01 	sts	0x01AB, r25

		power_kill_part1 = power_kill_length;
    1544:	60 93 82 01 	sts	0x0182, r22
    1548:	70 93 83 01 	sts	0x0183, r23
    154c:	80 93 84 01 	sts	0x0184, r24
    1550:	90 93 85 01 	sts	0x0185, r25
		power_kill_part2 = half_spin_time - power_kill_length;
    1554:	c8 01       	movw	r24, r16
    1556:	b7 01       	movw	r22, r14
    1558:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    155c:	60 93 7a 01 	sts	0x017A, r22
    1560:	70 93 7b 01 	sts	0x017B, r23
    1564:	80 93 7c 01 	sts	0x017C, r24
    1568:	90 93 7d 01 	sts	0x017D, r25

	}

	if ( full_power_spin == 1 )      //if we're actually doing full power this spin (no translation) - ignore any calculations / reset variables
    156c:	80 91 bc 01 	lds	r24, 0x01BC
    1570:	90 91 bd 01 	lds	r25, 0x01BD
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	81 f5       	brne	.+96     	; 0x15d8 <main_calculations+0x8c8>
	{
		end_brake = 1;
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf e3       	ldi	r27, 0x3F	; 63
    1580:	80 93 92 01 	sts	0x0192, r24
    1584:	90 93 93 01 	sts	0x0193, r25
    1588:	a0 93 94 01 	sts	0x0194, r26
    158c:	b0 93 95 01 	sts	0x0195, r27
		begin_brake = 0;
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	80 93 c2 01 	sts	0x01C2, r24
    159c:	90 93 c3 01 	sts	0x01C3, r25
    15a0:	a0 93 c4 01 	sts	0x01C4, r26
    15a4:	b0 93 c5 01 	sts	0x01C5, r27

		power_kill_part1 = 0;
    15a8:	80 93 82 01 	sts	0x0182, r24
    15ac:	90 93 83 01 	sts	0x0183, r25
    15b0:	a0 93 84 01 	sts	0x0184, r26
    15b4:	b0 93 85 01 	sts	0x0185, r27
		power_kill_part2 = half_spin_time;
    15b8:	80 91 8a 01 	lds	r24, 0x018A
    15bc:	90 91 8b 01 	lds	r25, 0x018B
    15c0:	a0 91 8c 01 	lds	r26, 0x018C
    15c4:	b0 91 8d 01 	lds	r27, 0x018D
    15c8:	80 93 7a 01 	sts	0x017A, r24
    15cc:	90 93 7b 01 	sts	0x017B, r25
    15d0:	a0 93 7c 01 	sts	0x017C, r26
    15d4:	b0 93 7d 01 	sts	0x017D, r27
	}
	
	if (in_config_mode == 1) config_mode();	//do config_mode stuff if we're in configuration mode
    15d8:	ad 81       	ldd	r26, Y+5	; 0x05
    15da:	be 81       	ldd	r27, Y+6	; 0x06
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	11 f4       	brne	.+4      	; 0x15e4 <main_calculations+0x8d4>
    15e0:	0e 94 53 00 	call	0xa6	; 0xa6 <config_mode>
		
	//adjustments - convert times from milliseconds to timer ticks
	led_on = led_on * 312.5;
    15e4:	60 91 96 01 	lds	r22, 0x0196
    15e8:	70 91 97 01 	lds	r23, 0x0197
    15ec:	80 91 98 01 	lds	r24, 0x0198
    15f0:	90 91 99 01 	lds	r25, 0x0199
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e4       	ldi	r19, 0x40	; 64
    15f8:	4c e9       	ldi	r20, 0x9C	; 156
    15fa:	53 e4       	ldi	r21, 0x43	; 67
    15fc:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1600:	60 93 96 01 	sts	0x0196, r22
    1604:	70 93 97 01 	sts	0x0197, r23
    1608:	80 93 98 01 	sts	0x0198, r24
    160c:	90 93 99 01 	sts	0x0199, r25
	led_off = led_off * 312.5;
    1610:	60 91 b8 01 	lds	r22, 0x01B8
    1614:	70 91 b9 01 	lds	r23, 0x01B9
    1618:	80 91 ba 01 	lds	r24, 0x01BA
    161c:	90 91 bb 01 	lds	r25, 0x01BB
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e4       	ldi	r19, 0x40	; 64
    1624:	4c e9       	ldi	r20, 0x9C	; 156
    1626:	53 e4       	ldi	r21, 0x43	; 67
    1628:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    162c:	60 93 b8 01 	sts	0x01B8, r22
    1630:	70 93 b9 01 	sts	0x01B9, r23
    1634:	80 93 ba 01 	sts	0x01BA, r24
    1638:	90 93 bb 01 	sts	0x01BB, r25
	half_spin_time = half_spin_time * 312.5;
    163c:	60 91 8a 01 	lds	r22, 0x018A
    1640:	70 91 8b 01 	lds	r23, 0x018B
    1644:	80 91 8c 01 	lds	r24, 0x018C
    1648:	90 91 8d 01 	lds	r25, 0x018D
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e4       	ldi	r19, 0x40	; 64
    1650:	4c e9       	ldi	r20, 0x9C	; 156
    1652:	53 e4       	ldi	r21, 0x43	; 67
    1654:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1658:	60 93 8a 01 	sts	0x018A, r22
    165c:	70 93 8b 01 	sts	0x018B, r23
    1660:	80 93 8c 01 	sts	0x018C, r24
    1664:	90 93 8d 01 	sts	0x018D, r25
	power_kill_part1 = power_kill_part1 * 312.5;
    1668:	60 91 82 01 	lds	r22, 0x0182
    166c:	70 91 83 01 	lds	r23, 0x0183
    1670:	80 91 84 01 	lds	r24, 0x0184
    1674:	90 91 85 01 	lds	r25, 0x0185
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e4       	ldi	r19, 0x40	; 64
    167c:	4c e9       	ldi	r20, 0x9C	; 156
    167e:	53 e4       	ldi	r21, 0x43	; 67
    1680:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1684:	60 93 82 01 	sts	0x0182, r22
    1688:	70 93 83 01 	sts	0x0183, r23
    168c:	80 93 84 01 	sts	0x0184, r24
    1690:	90 93 85 01 	sts	0x0185, r25
	power_kill_part2 = power_kill_part2 * 312.5;
    1694:	60 91 7a 01 	lds	r22, 0x017A
    1698:	70 91 7b 01 	lds	r23, 0x017B
    169c:	80 91 7c 01 	lds	r24, 0x017C
    16a0:	90 91 7d 01 	lds	r25, 0x017D
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e4       	ldi	r19, 0x40	; 64
    16a8:	4c e9       	ldi	r20, 0x9C	; 156
    16aa:	53 e4       	ldi	r21, 0x43	; 67
    16ac:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    16b0:	60 93 7a 01 	sts	0x017A, r22
    16b4:	70 93 7b 01 	sts	0x017B, r23
    16b8:	80 93 7c 01 	sts	0x017C, r24
    16bc:	90 93 7d 01 	sts	0x017D, r25
	begin_brake = begin_brake * 312.5;
    16c0:	60 91 c2 01 	lds	r22, 0x01C2
    16c4:	70 91 c3 01 	lds	r23, 0x01C3
    16c8:	80 91 c4 01 	lds	r24, 0x01C4
    16cc:	90 91 c5 01 	lds	r25, 0x01C5
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e4       	ldi	r19, 0x40	; 64
    16d4:	4c e9       	ldi	r20, 0x9C	; 156
    16d6:	53 e4       	ldi	r21, 0x43	; 67
    16d8:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    16dc:	60 93 c2 01 	sts	0x01C2, r22
    16e0:	70 93 c3 01 	sts	0x01C3, r23
    16e4:	80 93 c4 01 	sts	0x01C4, r24
    16e8:	90 93 c5 01 	sts	0x01C5, r25
	end_brake = end_brake * 312.5;
    16ec:	60 91 92 01 	lds	r22, 0x0192
    16f0:	70 91 93 01 	lds	r23, 0x0193
    16f4:	80 91 94 01 	lds	r24, 0x0194
    16f8:	90 91 95 01 	lds	r25, 0x0195
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e4       	ldi	r19, 0x40	; 64
    1700:	4c e9       	ldi	r20, 0x9C	; 156
    1702:	53 e4       	ldi	r21, 0x43	; 67
    1704:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1708:	60 93 92 01 	sts	0x0192, r22
    170c:	70 93 93 01 	sts	0x0193, r23
    1710:	80 93 94 01 	sts	0x0194, r24
    1714:	90 93 95 01 	sts	0x0195, r25

//	sei();  //enable interrupts to allow updating of transmitter data - out of all the critical stuff
	

}
    1718:	26 96       	adiw	r28, 0x06	; 6
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	3f 90       	pop	r3
    1746:	2f 90       	pop	r2
    1748:	08 95       	ret

0000174a <save_config>:
	}

}

void save_config(void)
{
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
	long tracking_word1;	//first word of tracking_comp
	float tracking_word2;	//second word of tracking_comp
	
	//this code busts up tracking_comp (float) into two words for storage to ROM (there are probably cleaner ways to do this)
	
	tracking_word1 = tracking_comp * 1000;							//mulitply tracking_comp by 1000 to get 1st word
    175a:	60 91 2c 01 	lds	r22, 0x012C
    175e:	70 91 2d 01 	lds	r23, 0x012D
    1762:	80 91 2e 01 	lds	r24, 0x012E
    1766:	90 91 2f 01 	lds	r25, 0x012F
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a e7       	ldi	r20, 0x7A	; 122
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    1776:	7b 01       	movw	r14, r22
    1778:	8c 01       	movw	r16, r24
    177a:	0e 94 19 10 	call	0x2032	; 0x2032 <__fixsfsi>
    177e:	5b 01       	movw	r10, r22
    1780:	6c 01       	movw	r12, r24
	tracking_word2 = ((tracking_comp * 1000) - tracking_word1);	//amount that didn't make it into word1 goes into word2
    1782:	0e 94 4c 10 	call	0x2098	; 0x2098 <__floatsisf>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	c8 01       	movw	r24, r16
    178c:	b7 01       	movw	r22, r14
    178e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__subsf3>
    1792:	7b 01       	movw	r14, r22
    1794:	8c 01       	movw	r16, r24
	tracking_word2 = tracking_word2 * 10000;						//multiply that by 10,000
		
	//EPROM variables - for saved configuration data
	eeprom_write_word(&saved_data_valid, 128);	//used as an indicator that saved data is good
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	60 e8       	ldi	r22, 0x80	; 128
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>
	eeprom_write_word(&led_adjust_save, led_adjust);	//saves out led offset
    17a2:	60 91 30 01 	lds	r22, 0x0130
    17a6:	70 91 31 01 	lds	r23, 0x0131
    17aa:	80 91 32 01 	lds	r24, 0x0132
    17ae:	90 91 33 01 	lds	r25, 0x0133
    17b2:	0e 94 1e 10 	call	0x203c	; 0x203c <__fixunssfsi>
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	b9 01       	movw	r22, r18
    17c0:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word1, tracking_word1);	//saves out tracking calibration word1 (converted to integer)
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	b5 01       	movw	r22, r10
    17ca:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word2, tracking_word2);	//saves out tracking calibration word2 (converted to integer)
    17ce:	c8 01       	movw	r24, r16
    17d0:	b7 01       	movw	r22, r14
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e4       	ldi	r19, 0x40	; 64
    17d6:	4c e1       	ldi	r20, 0x1C	; 28
    17d8:	56 e4       	ldi	r21, 0x46	; 70
    17da:	0e 94 00 11 	call	0x2200	; 0x2200 <__mulsf3>
    17de:	0e 94 1e 10 	call	0x203c	; 0x203c <__fixunssfsi>
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	86 e0       	ldi	r24, 0x06	; 6
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	b9 01       	movw	r22, r18
    17ec:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>
	eeprom_write_word(&heading_center_save, heading_center);	//saves out RC center value for left/right 
    17f0:	60 91 0a 01 	lds	r22, 0x010A
    17f4:	70 91 0b 01 	lds	r23, 0x010B
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>
	eeprom_write_word(&base_accel_save, base_accel);	//saves out accelerometer 0G value
    1800:	60 91 34 01 	lds	r22, 0x0134
    1804:	70 91 35 01 	lds	r23, 0x0135
    1808:	8a e0       	ldi	r24, 0x0A	; 10
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 43 12 	call	0x2486	; 0x2486 <__eewr_word_m168>


}
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	08 95       	ret

00001822 <safety_and_idle>:
}



void safety_and_idle(void)
{
    1822:	2f 92       	push	r2
    1824:	3f 92       	push	r3
    1826:	4f 92       	push	r4
    1828:	5f 92       	push	r5
    182a:	6f 92       	push	r6
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	c4 ef       	ldi	r28, 0xF4	; 244
    1848:	d1 e0       	ldi	r29, 0x01	; 1
		{

			_delay_ms(10);
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
			{
				got_centered_forwardback = 1;
    184a:	a0 e5       	ldi	r26, 0x50	; 80
    184c:	4a 2e       	mov	r4, r26
    184e:	a3 ec       	ldi	r26, 0xC3	; 195
    1850:	5a 2e       	mov	r5, r26
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	2f 2e       	mov	r2, r31
    1856:	31 2c       	mov	r3, r1
    1858:	fb c1       	rjmp	.+1014   	; 0x1c50 <safety_and_idle+0x42e>
}


void motors_off(void)
{
	set_motor1_off();
    185a:	5a 98       	cbi	0x0b, 2	; 11
	set_motor2_off();
    185c:	5c 98       	cbi	0x0b, 4	; 11
	{


		motors_off();			//motors are off while sitting idle

		if (throttle < throttle_low || throttle > (throttle_high + 100)) throttle_up_count = 0;		//single low / bad throttle resets the counter to 0
    185e:	80 91 86 01 	lds	r24, 0x0186
    1862:	90 91 87 01 	lds	r25, 0x0187
    1866:	a0 91 88 01 	lds	r26, 0x0188
    186a:	b0 91 89 01 	lds	r27, 0x0189
    186e:	8e 15       	cp	r24, r14
    1870:	9f 05       	cpc	r25, r15
    1872:	a0 07       	cpc	r26, r16
    1874:	b1 07       	cpc	r27, r17
    1876:	bc f0       	brlt	.+46     	; 0x18a6 <safety_and_idle+0x84>
    1878:	20 91 86 01 	lds	r18, 0x0186
    187c:	30 91 87 01 	lds	r19, 0x0187
    1880:	40 91 88 01 	lds	r20, 0x0188
    1884:	50 91 89 01 	lds	r21, 0x0189
    1888:	80 91 02 01 	lds	r24, 0x0102
    188c:	90 91 03 01 	lds	r25, 0x0103
    1890:	8c 59       	subi	r24, 0x9C	; 156
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	aa 27       	eor	r26, r26
    1896:	97 fd       	sbrc	r25, 7
    1898:	a0 95       	com	r26
    189a:	ba 2f       	mov	r27, r26
    189c:	82 17       	cp	r24, r18
    189e:	93 07       	cpc	r25, r19
    18a0:	a4 07       	cpc	r26, r20
    18a2:	b5 07       	cpc	r27, r21
    18a4:	24 f4       	brge	.+8      	; 0x18ae <safety_and_idle+0x8c>
    18a6:	10 92 45 01 	sts	0x0145, r1
    18aa:	10 92 44 01 	sts	0x0144, r1
		if (throttle > throttle_low && throttle < (throttle_high + 100)) throttle_up_count ++;		//if the throttle has been moved high - increment the counter
    18ae:	80 91 86 01 	lds	r24, 0x0186
    18b2:	90 91 87 01 	lds	r25, 0x0187
    18b6:	a0 91 88 01 	lds	r26, 0x0188
    18ba:	b0 91 89 01 	lds	r27, 0x0189
    18be:	e8 16       	cp	r14, r24
    18c0:	f9 06       	cpc	r15, r25
    18c2:	0a 07       	cpc	r16, r26
    18c4:	1b 07       	cpc	r17, r27
    18c6:	04 f5       	brge	.+64     	; 0x1908 <safety_and_idle+0xe6>
    18c8:	20 91 86 01 	lds	r18, 0x0186
    18cc:	30 91 87 01 	lds	r19, 0x0187
    18d0:	40 91 88 01 	lds	r20, 0x0188
    18d4:	50 91 89 01 	lds	r21, 0x0189
    18d8:	80 91 02 01 	lds	r24, 0x0102
    18dc:	90 91 03 01 	lds	r25, 0x0103
    18e0:	8c 59       	subi	r24, 0x9C	; 156
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	aa 27       	eor	r26, r26
    18e6:	97 fd       	sbrc	r25, 7
    18e8:	a0 95       	com	r26
    18ea:	ba 2f       	mov	r27, r26
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	4a 07       	cpc	r20, r26
    18f2:	5b 07       	cpc	r21, r27
    18f4:	4c f4       	brge	.+18     	; 0x1908 <safety_and_idle+0xe6>
    18f6:	80 91 44 01 	lds	r24, 0x0144
    18fa:	90 91 45 01 	lds	r25, 0x0145
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	90 93 45 01 	sts	0x0145, r25
    1904:	80 93 44 01 	sts	0x0144, r24

		//interrupt blinking if stick isn't centered (helps to verify TX is working)
		if ( leftright > (heading_center + heading_leftthresh) ) {set_led_on(); _delay_ms(200);}
    1908:	20 91 8e 01 	lds	r18, 0x018E
    190c:	30 91 8f 01 	lds	r19, 0x018F
    1910:	40 91 90 01 	lds	r20, 0x0190
    1914:	50 91 91 01 	lds	r21, 0x0191
    1918:	60 91 0a 01 	lds	r22, 0x010A
    191c:	70 91 0b 01 	lds	r23, 0x010B
    1920:	80 91 0c 01 	lds	r24, 0x010C
    1924:	90 91 0d 01 	lds	r25, 0x010D
    1928:	86 0f       	add	r24, r22
    192a:	97 1f       	adc	r25, r23
    192c:	aa 27       	eor	r26, r26
    192e:	97 fd       	sbrc	r25, 7
    1930:	a0 95       	com	r26
    1932:	ba 2f       	mov	r27, r26
    1934:	82 17       	cp	r24, r18
    1936:	93 07       	cpc	r25, r19
    1938:	a4 07       	cpc	r26, r20
    193a:	b5 07       	cpc	r27, r21
    193c:	44 f4       	brge	.+16     	; 0x194e <safety_and_idle+0x12c>
    193e:	5d 9a       	sbi	0x0b, 5	; 11
    1940:	80 ed       	ldi	r24, 0xD0	; 208
    1942:	97 e0       	ldi	r25, 0x07	; 7
    1944:	fe 01       	movw	r30, r28
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <safety_and_idle+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	d9 f7       	brne	.-10     	; 0x1944 <safety_and_idle+0x122>
		if ( leftright < (heading_center + heading_rightthresh) ) {set_led_on(); _delay_ms(200);}
    194e:	20 91 8e 01 	lds	r18, 0x018E
    1952:	30 91 8f 01 	lds	r19, 0x018F
    1956:	40 91 90 01 	lds	r20, 0x0190
    195a:	50 91 91 01 	lds	r21, 0x0191
    195e:	80 91 0e 01 	lds	r24, 0x010E
    1962:	90 91 0f 01 	lds	r25, 0x010F
    1966:	68 0f       	add	r22, r24
    1968:	79 1f       	adc	r23, r25
    196a:	cb 01       	movw	r24, r22
    196c:	aa 27       	eor	r26, r26
    196e:	97 fd       	sbrc	r25, 7
    1970:	a0 95       	com	r26
    1972:	ba 2f       	mov	r27, r26
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	4a 07       	cpc	r20, r26
    197a:	5b 07       	cpc	r21, r27
    197c:	44 f4       	brge	.+16     	; 0x198e <safety_and_idle+0x16c>
    197e:	5d 9a       	sbi	0x0b, 5	; 11
    1980:	80 ed       	ldi	r24, 0xD0	; 208
    1982:	97 e0       	ldi	r25, 0x07	; 7
    1984:	fe 01       	movw	r30, r28
    1986:	31 97       	sbiw	r30, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <safety_and_idle+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	d9 f7       	brne	.-10     	; 0x1984 <safety_and_idle+0x162>

		//sit there and flash LED
		
		toggle_led();
    198e:	8b b1       	in	r24, 0x0b	; 11
    1990:	90 e2       	ldi	r25, 0x20	; 32
    1992:	89 27       	eor	r24, r25
    1994:	8b b9       	out	0x0b, r24	; 11
    1996:	8c e2       	ldi	r24, 0x2C	; 44
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	fe 01       	movw	r30, r28
    199c:	31 97       	sbiw	r30, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <safety_and_idle+0x17a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	d9 f7       	brne	.-10     	; 0x199a <safety_and_idle+0x178>
		_delay_ms(30);		
		

		//slower LED flash if in config mode
		if (in_config_mode == 1) {set_led_off(); _delay_ms(200);}		
    19a4:	80 90 c0 01 	lds	r8, 0x01C0
    19a8:	90 90 c1 01 	lds	r9, 0x01C1
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	88 16       	cp	r8, r24
    19b0:	91 04       	cpc	r9, r1
    19b2:	41 f4       	brne	.+16     	; 0x19c4 <safety_and_idle+0x1a2>
    19b4:	5d 98       	cbi	0x0b, 5	; 11
    19b6:	80 ed       	ldi	r24, 0xD0	; 208
    19b8:	97 e0       	ldi	r25, 0x07	; 7
    19ba:	fe 01       	movw	r30, r28
    19bc:	31 97       	sbiw	r30, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <safety_and_idle+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	d9 f7       	brne	.-10     	; 0x19ba <safety_and_idle+0x198>
		
		
		//verifies we got a centered forwardback stick at least once before allowing config mode (prevents boot directly into config mode if fail-safe is below center)
		if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))
    19c4:	20 91 6c 01 	lds	r18, 0x016C
    19c8:	30 91 6d 01 	lds	r19, 0x016D
    19cc:	40 91 6e 01 	lds	r20, 0x016E
    19d0:	50 91 6f 01 	lds	r21, 0x016F
    19d4:	60 91 04 01 	lds	r22, 0x0104
    19d8:	70 91 05 01 	lds	r23, 0x0105
    19dc:	80 91 08 01 	lds	r24, 0x0108
    19e0:	90 91 09 01 	lds	r25, 0x0109
    19e4:	86 0f       	add	r24, r22
    19e6:	97 1f       	adc	r25, r23
    19e8:	7c 01       	movw	r14, r24
    19ea:	00 27       	eor	r16, r16
    19ec:	f7 fc       	sbrc	r15, 7
    19ee:	00 95       	com	r16
    19f0:	10 2f       	mov	r17, r16
    19f2:	e2 16       	cp	r14, r18
    19f4:	f3 06       	cpc	r15, r19
    19f6:	04 07       	cpc	r16, r20
    19f8:	15 07       	cpc	r17, r21
    19fa:	cc f5       	brge	.+114    	; 0x1a6e <safety_and_idle+0x24c>
    19fc:	20 91 6c 01 	lds	r18, 0x016C
    1a00:	30 91 6d 01 	lds	r19, 0x016D
    1a04:	40 91 6e 01 	lds	r20, 0x016E
    1a08:	50 91 6f 01 	lds	r21, 0x016F
    1a0c:	80 91 06 01 	lds	r24, 0x0106
    1a10:	90 91 07 01 	lds	r25, 0x0107
    1a14:	68 0f       	add	r22, r24
    1a16:	79 1f       	adc	r23, r25
    1a18:	5b 01       	movw	r10, r22
    1a1a:	cc 24       	eor	r12, r12
    1a1c:	b7 fc       	sbrc	r11, 7
    1a1e:	c0 94       	com	r12
    1a20:	dc 2c       	mov	r13, r12
    1a22:	2a 15       	cp	r18, r10
    1a24:	3b 05       	cpc	r19, r11
    1a26:	4c 05       	cpc	r20, r12
    1a28:	5d 05       	cpc	r21, r13
    1a2a:	0c f5       	brge	.+66     	; 0x1a6e <safety_and_idle+0x24c>
    1a2c:	c2 01       	movw	r24, r4
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <safety_and_idle+0x20c>
		{

			_delay_ms(10);
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
    1a32:	80 91 6c 01 	lds	r24, 0x016C
    1a36:	90 91 6d 01 	lds	r25, 0x016D
    1a3a:	a0 91 6e 01 	lds	r26, 0x016E
    1a3e:	b0 91 6f 01 	lds	r27, 0x016F
    1a42:	e8 16       	cp	r14, r24
    1a44:	f9 06       	cpc	r15, r25
    1a46:	0a 07       	cpc	r16, r26
    1a48:	1b 07       	cpc	r17, r27
    1a4a:	8c f4       	brge	.+34     	; 0x1a6e <safety_and_idle+0x24c>
    1a4c:	80 91 6c 01 	lds	r24, 0x016C
    1a50:	90 91 6d 01 	lds	r25, 0x016D
    1a54:	a0 91 6e 01 	lds	r26, 0x016E
    1a58:	b0 91 6f 01 	lds	r27, 0x016F
    1a5c:	8a 15       	cp	r24, r10
    1a5e:	9b 05       	cpc	r25, r11
    1a60:	ac 05       	cpc	r26, r12
    1a62:	bd 05       	cpc	r27, r13
    1a64:	24 f4       	brge	.+8      	; 0x1a6e <safety_and_idle+0x24c>
			{
				got_centered_forwardback = 1;
    1a66:	30 92 41 01 	sts	0x0141, r3
    1a6a:	20 92 40 01 	sts	0x0140, r2
			}
		}
 

		//check for enter / leave config mode
		if (forwardback < (forwardback_center + forwardback_backthresh) && got_centered_forwardback == 1)		//is the stick being held back?
    1a6e:	80 91 6c 01 	lds	r24, 0x016C
    1a72:	90 91 6d 01 	lds	r25, 0x016D
    1a76:	a0 91 6e 01 	lds	r26, 0x016E
    1a7a:	b0 91 6f 01 	lds	r27, 0x016F
    1a7e:	8e 15       	cp	r24, r14
    1a80:	9f 05       	cpc	r25, r15
    1a82:	a0 07       	cpc	r26, r16
    1a84:	b1 07       	cpc	r27, r17
    1a86:	0c f0       	brlt	.+2      	; 0x1a8a <safety_and_idle+0x268>
    1a88:	98 c0       	rjmp	.+304    	; 0x1bba <safety_and_idle+0x398>
    1a8a:	80 91 40 01 	lds	r24, 0x0140
    1a8e:	90 91 41 01 	lds	r25, 0x0141
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <safety_and_idle+0x276>
    1a96:	91 c0       	rjmp	.+290    	; 0x1bba <safety_and_idle+0x398>
    1a98:	80 e1       	ldi	r24, 0x10	; 16
    1a9a:	97 e2       	ldi	r25, 0x27	; 39
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	31 97       	sbiw	r30, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <safety_and_idle+0x27c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	d9 f7       	brne	.-10     	; 0x1a9c <safety_and_idle+0x27a>
		{

			//wait a bit to make sure stick is being held...
			_delay_ms(1000);
			//still being held back - then enter / leave config mode
			if (forwardback < (forwardback_center + forwardback_backthresh))
    1aa6:	80 91 6c 01 	lds	r24, 0x016C
    1aaa:	90 91 6d 01 	lds	r25, 0x016D
    1aae:	a0 91 6e 01 	lds	r26, 0x016E
    1ab2:	b0 91 6f 01 	lds	r27, 0x016F
    1ab6:	8e 15       	cp	r24, r14
    1ab8:	9f 05       	cpc	r25, r15
    1aba:	a0 07       	cpc	r26, r16
    1abc:	b1 07       	cpc	r27, r17
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <safety_and_idle+0x2a0>
    1ac0:	7c c0       	rjmp	.+248    	; 0x1bba <safety_and_idle+0x398>
			{
				in_config_mode = !in_config_mode;
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	89 28       	or	r8, r9
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <safety_and_idle+0x2ac>
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	30 93 c1 01 	sts	0x01C1, r19
    1ad2:	20 93 c0 01 	sts	0x01C0, r18
    1ad6:	88 e9       	ldi	r24, 0x98	; 152
    1ad8:	9a e3       	ldi	r25, 0x3A	; 58
    1ada:	fe 01       	movw	r30, r28
    1adc:	31 97       	sbiw	r30, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <safety_and_idle+0x2ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	d9 f7       	brne	.-10     	; 0x1ada <safety_and_idle+0x2b8>
				_delay_ms(1500);				//delay a bit longer to help assure config_mode isn't toggled again

				cli();                	//disable interrupts - seems like a good idea before saving stuff to ROM
    1ae4:	f8 94       	cli
				if (in_config_mode == 1) get_config_constants();		//read + set a few constants prior to actually going into config mode
    1ae6:	21 30       	cpi	r18, 0x01	; 1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <safety_and_idle+0x2ce>
    1aec:	0e 94 05 06 	call	0xc0a	; 0xc0a <get_config_constants>
				if (in_config_mode == 0) save_config();				//if we're exiting config mode - save the configuration
    1af0:	80 91 c0 01 	lds	r24, 0x01C0
    1af4:	90 91 c1 01 	lds	r25, 0x01C1
    1af8:	89 2b       	or	r24, r25
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <safety_and_idle+0x2de>
    1afc:	0e 94 a5 0b 	call	0x174a	; 0x174a <save_config>
				sei();  //re-enable interrupts
    1b00:	78 94       	sei
    1b02:	5b c0       	rjmp	.+182    	; 0x1bba <safety_and_idle+0x398>
	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
		{
		   
			set_led_off();
    1b04:	5d 98       	cbi	0x0b, 5	; 11
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1b06:	e1 14       	cp	r14, r1
    1b08:	f1 04       	cpc	r15, r1
    1b0a:	01 05       	cpc	r16, r1
    1b0c:	11 05       	cpc	r17, r1
    1b0e:	a1 f4       	brne	.+40     	; 0x1b38 <safety_and_idle+0x316>
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (x = 0; x < 15; x++)
				{
					set_led_on();
    1b14:	5d 9a       	sbi	0x0b, 5	; 11
    1b16:	88 ea       	ldi	r24, 0xA8	; 168
    1b18:	91 e6       	ldi	r25, 0x61	; 97
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <safety_and_idle+0x2f8>
					_delay_ms (5);
					set_led_off();
    1b1e:	5d 98       	cbi	0x0b, 5	; 11
    1b20:	8c e2       	ldi	r24, 0x2C	; 44
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	fe 01       	movw	r30, r28
    1b26:	31 97       	sbiw	r30, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <safety_and_idle+0x304>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	d9 f7       	brne	.-10     	; 0x1b24 <safety_and_idle+0x302>
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
			{
				for (x = 0; x < 15; x++)
    1b32:	2f 30       	cpi	r18, 0x0F	; 15
    1b34:	31 05       	cpc	r19, r1
    1b36:	71 f7       	brne	.-36     	; 0x1b14 <safety_and_idle+0x2f2>
    1b38:	80 e4       	ldi	r24, 0x40	; 64
    1b3a:	9f e1       	ldi	r25, 0x1F	; 31
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	31 97       	sbiw	r30, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <safety_and_idle+0x31c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	d9 f7       	brne	.-10     	; 0x1b3c <safety_and_idle+0x31a>
    1b46:	21 e3       	ldi	r18, 0x31	; 49
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <safety_and_idle+0x356>
}



void safety_and_idle(void)
{
    1b50:	2c 59       	subi	r18, 0x9C	; 156
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	4f 4f       	sbci	r20, 0xFF	; 255
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
			{
				x = x + 100;		
				set_led_on();
    1b58:	5d 9a       	sbi	0x0b, 5	; 11
    1b5a:	84 ef       	ldi	r24, 0xF4	; 244
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	fe 01       	movw	r30, r28
    1b60:	31 97       	sbiw	r30, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <safety_and_idle+0x33e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	d9 f7       	brne	.-10     	; 0x1b5e <safety_and_idle+0x33c>
				_delay_ms (50);
				set_led_off();
    1b68:	5d 98       	cbi	0x0b, 5	; 11
    1b6a:	80 ea       	ldi	r24, 0xA0	; 160
    1b6c:	9f e0       	ldi	r25, 0x0F	; 15
    1b6e:	fe 01       	movw	r30, r28
    1b70:	31 97       	sbiw	r30, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <safety_and_idle+0x34e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	d9 f7       	brne	.-10     	; 0x1b6e <safety_and_idle+0x34c>
			}
			
			_delay_ms (800);
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
    1b78:	2e 15       	cp	r18, r14
    1b7a:	3f 05       	cpc	r19, r15
    1b7c:	40 07       	cpc	r20, r16
    1b7e:	51 07       	cpc	r21, r17
    1b80:	0c f0       	brlt	.+2      	; 0x1b84 <safety_and_idle+0x362>
    1b82:	43 c0       	rjmp	.+134    	; 0x1c0a <safety_and_idle+0x3e8>
    1b84:	80 91 6c 01 	lds	r24, 0x016C
    1b88:	90 91 6d 01 	lds	r25, 0x016D
    1b8c:	a0 91 6e 01 	lds	r26, 0x016E
    1b90:	b0 91 6f 01 	lds	r27, 0x016F
    1b94:	68 16       	cp	r6, r24
    1b96:	79 06       	cpc	r7, r25
    1b98:	8a 06       	cpc	r8, r26
    1b9a:	9b 06       	cpc	r9, r27
    1b9c:	b4 f5       	brge	.+108    	; 0x1c0a <safety_and_idle+0x3e8>
    1b9e:	80 91 86 01 	lds	r24, 0x0186
    1ba2:	90 91 87 01 	lds	r25, 0x0187
    1ba6:	a0 91 88 01 	lds	r26, 0x0188
    1baa:	b0 91 89 01 	lds	r27, 0x0189
    1bae:	8a 15       	cp	r24, r10
    1bb0:	9b 05       	cpc	r25, r11
    1bb2:	ac 05       	cpc	r26, r12
    1bb4:	bd 05       	cpc	r27, r13
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <safety_and_idle+0x3e8>
    1bb8:	cb cf       	rjmp	.-106    	; 0x1b50 <safety_and_idle+0x32e>
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1bba:	80 91 06 01 	lds	r24, 0x0106
    1bbe:	90 91 07 01 	lds	r25, 0x0107
    1bc2:	20 91 04 01 	lds	r18, 0x0104
    1bc6:	30 91 05 01 	lds	r19, 0x0105
    1bca:	82 0f       	add	r24, r18
    1bcc:	93 1f       	adc	r25, r19
    1bce:	3c 01       	movw	r6, r24
    1bd0:	88 24       	eor	r8, r8
    1bd2:	77 fc       	sbrc	r7, 7
    1bd4:	80 94       	com	r8
    1bd6:	98 2c       	mov	r9, r8
    1bd8:	80 91 00 01 	lds	r24, 0x0100
    1bdc:	90 91 01 01 	lds	r25, 0x0101
    1be0:	5c 01       	movw	r10, r24
    1be2:	cc 24       	eor	r12, r12
    1be4:	b7 fc       	sbrc	r11, 7
    1be6:	c0 94       	com	r12
    1be8:	dc 2c       	mov	r13, r12
		{
		   
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1bea:	e0 90 46 01 	lds	r14, 0x0146
    1bee:	f0 90 47 01 	lds	r15, 0x0147
    1bf2:	00 91 48 01 	lds	r16, 0x0148
    1bf6:	10 91 49 01 	lds	r17, 0x0149
    1bfa:	20 91 64 01 	lds	r18, 0x0164
    1bfe:	30 91 65 01 	lds	r19, 0x0165
    1c02:	40 91 66 01 	lds	r20, 0x0166
    1c06:	50 91 67 01 	lds	r21, 0x0167
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1c0a:	80 91 6c 01 	lds	r24, 0x016C
    1c0e:	90 91 6d 01 	lds	r25, 0x016D
    1c12:	a0 91 6e 01 	lds	r26, 0x016E
    1c16:	b0 91 6f 01 	lds	r27, 0x016F
    1c1a:	68 16       	cp	r6, r24
    1c1c:	79 06       	cpc	r7, r25
    1c1e:	8a 06       	cpc	r8, r26
    1c20:	9b 06       	cpc	r9, r27
    1c22:	74 f4       	brge	.+28     	; 0x1c40 <safety_and_idle+0x41e>
    1c24:	80 91 86 01 	lds	r24, 0x0186
    1c28:	90 91 87 01 	lds	r25, 0x0187
    1c2c:	a0 91 88 01 	lds	r26, 0x0188
    1c30:	b0 91 89 01 	lds	r27, 0x0189
    1c34:	8a 15       	cp	r24, r10
    1c36:	9b 05       	cpc	r25, r11
    1c38:	ac 05       	cpc	r26, r12
    1c3a:	bd 05       	cpc	r27, r13
    1c3c:	0c f4       	brge	.+2      	; 0x1c40 <safety_and_idle+0x41e>
    1c3e:	62 cf       	rjmp	.-316    	; 0x1b04 <safety_and_idle+0x2e2>
    1c40:	20 93 64 01 	sts	0x0164, r18
    1c44:	30 93 65 01 	sts	0x0165, r19
    1c48:	40 93 66 01 	sts	0x0166, r20
    1c4c:	50 93 67 01 	sts	0x0167, r21
	//also - if we've gone more than 11 rotations without getting fresh throttle data - assume something has gone wrong / shutdown
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)
		

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
    1c50:	20 91 86 01 	lds	r18, 0x0186
    1c54:	30 91 87 01 	lds	r19, 0x0187
    1c58:	40 91 88 01 	lds	r20, 0x0188
    1c5c:	50 91 89 01 	lds	r21, 0x0189
    1c60:	80 91 00 01 	lds	r24, 0x0100
    1c64:	90 91 01 01 	lds	r25, 0x0101
    1c68:	7c 01       	movw	r14, r24
    1c6a:	00 27       	eor	r16, r16
    1c6c:	f7 fc       	sbrc	r15, 7
    1c6e:	00 95       	com	r16
    1c70:	10 2f       	mov	r17, r16
    1c72:	2e 15       	cp	r18, r14
    1c74:	3f 05       	cpc	r19, r15
    1c76:	40 07       	cpc	r20, r16
    1c78:	51 07       	cpc	r21, r17
    1c7a:	0c f4       	brge	.+2      	; 0x1c7e <safety_and_idle+0x45c>
    1c7c:	ee cd       	rjmp	.-1060   	; 0x185a <safety_and_idle+0x38>
    1c7e:	20 91 86 01 	lds	r18, 0x0186
    1c82:	30 91 87 01 	lds	r19, 0x0187
    1c86:	40 91 88 01 	lds	r20, 0x0188
    1c8a:	50 91 89 01 	lds	r21, 0x0189
    1c8e:	80 91 02 01 	lds	r24, 0x0102
    1c92:	90 91 03 01 	lds	r25, 0x0103
    1c96:	8c 59       	subi	r24, 0x9C	; 156
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	aa 27       	eor	r26, r26
    1c9c:	97 fd       	sbrc	r25, 7
    1c9e:	a0 95       	com	r26
    1ca0:	ba 2f       	mov	r27, r26
    1ca2:	82 17       	cp	r24, r18
    1ca4:	93 07       	cpc	r25, r19
    1ca6:	a4 07       	cpc	r26, r20
    1ca8:	b5 07       	cpc	r27, r21
    1caa:	0c f4       	brge	.+2      	; 0x1cae <safety_and_idle+0x48c>
    1cac:	d6 cd       	rjmp	.-1108   	; 0x185a <safety_and_idle+0x38>
    1cae:	80 91 42 01 	lds	r24, 0x0142
    1cb2:	90 91 43 01 	lds	r25, 0x0143
    1cb6:	0c 97       	sbiw	r24, 0x0c	; 12
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <safety_and_idle+0x49a>
    1cba:	cf cd       	rjmp	.-1122   	; 0x185a <safety_and_idle+0x38>
    1cbc:	80 91 44 01 	lds	r24, 0x0144
    1cc0:	90 91 45 01 	lds	r25, 0x0145
    1cc4:	04 97       	sbiw	r24, 0x04	; 4
    1cc6:	0c f4       	brge	.+2      	; 0x1cca <safety_and_idle+0x4a8>
    1cc8:	c8 cd       	rjmp	.-1136   	; 0x185a <safety_and_idle+0x38>
		}


	}

}
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	9f 90       	pop	r9
    1ce0:	8f 90       	pop	r8
    1ce2:	7f 90       	pop	r7
    1ce4:	6f 90       	pop	r6
    1ce6:	5f 90       	pop	r5
    1ce8:	4f 90       	pop	r4
    1cea:	3f 90       	pop	r3
    1cec:	2f 90       	pop	r2
    1cee:	08 95       	ret

00001cf0 <load_config>:

void load_config(void)
{
    1cf0:	af 92       	push	r10
    1cf2:	bf 92       	push	r11
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17

	float tracking_word1;		//first word of tracking_comp
	float tracking_word2;		//second word of tracking_comp

	//only load config data if "saved_data_valid" indicates it was saved previously
	if (eeprom_read_word(&saved_data_valid) == 128)
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d08:	80 38       	cpi	r24, 0x80	; 128
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <load_config+0x20>
    1d0e:	64 c0       	rjmp	.+200    	; 0x1dd8 <load_config+0xe8>
	{

		led_adjust = eeprom_read_word(&led_adjust_save);	//loads led offset
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
    1d24:	60 93 30 01 	sts	0x0130, r22
    1d28:	70 93 31 01 	sts	0x0131, r23
    1d2c:	80 93 32 01 	sts	0x0132, r24
    1d30:	90 93 33 01 	sts	0x0133, r25
		tracking_word1 = (eeprom_read_word(&tracking_comp_save_word1));		//loads tracking comp
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
    1d48:	5b 01       	movw	r10, r22
    1d4a:	6c 01       	movw	r12, r24
		tracking_word2 = (eeprom_read_word(&tracking_comp_save_word2));		//loads tracking comp
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 4a 10 	call	0x2094	; 0x2094 <__floatunsisf>
    1d60:	7b 01       	movw	r14, r22
    1d62:	8c 01       	movw	r16, r24
		heading_center = eeprom_read_word(&heading_center_save);	//loads heading_center
    1d64:	88 e0       	ldi	r24, 0x08	; 8
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d6c:	90 93 0b 01 	sts	0x010B, r25
    1d70:	80 93 0a 01 	sts	0x010A, r24
		base_accel = eeprom_read_word(&base_accel_save);		//loads base accelerometer value
    1d74:	8a e0       	ldi	r24, 0x0A	; 10
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 3d 12 	call	0x247a	; 0x247a <__eerd_word_m168>
    1d7c:	90 93 35 01 	sts	0x0135, r25
    1d80:	80 93 34 01 	sts	0x0134, r24
	
		tracking_word1 = tracking_word1 / 1000;	//converts 1st tracking comp word back to float
		
		tracking_word2 = tracking_word2 / 1000;		//converts 2nd tracking comp word back to float
    1d84:	c8 01       	movw	r24, r16
    1d86:	b7 01       	movw	r22, r14
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1d94:	7b 01       	movw	r14, r22
    1d96:	8c 01       	movw	r16, r24
		tracking_word2 = tracking_word2 / 10000;	//put it in the correct decimal place
		
		tracking_comp = tracking_word1 + tracking_word2;	//puts the two floats together
    1d98:	c6 01       	movw	r24, r12
    1d9a:	b5 01       	movw	r22, r10
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1da8:	5b 01       	movw	r10, r22
    1daa:	6c 01       	movw	r12, r24
    1dac:	c8 01       	movw	r24, r16
    1dae:	b7 01       	movw	r22, r14
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e4       	ldi	r19, 0x40	; 64
    1db4:	4c e1       	ldi	r20, 0x1C	; 28
    1db6:	56 e4       	ldi	r21, 0x46	; 70
    1db8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__divsf3>
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	c6 01       	movw	r24, r12
    1dc2:	b5 01       	movw	r22, r10
    1dc4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__addsf3>
    1dc8:	60 93 2c 01 	sts	0x012C, r22
    1dcc:	70 93 2d 01 	sts	0x012D, r23
    1dd0:	80 93 2e 01 	sts	0x012E, r24
    1dd4:	90 93 2f 01 	sts	0x012F, r25
	}

}
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	df 90       	pop	r13
    1de2:	cf 90       	pop	r12
    1de4:	bf 90       	pop	r11
    1de6:	af 90       	pop	r10
    1de8:	08 95       	ret

00001dea <main>:

int main(void)
{
	
		
	setup();			//do initial setup stuff - set pins / interrupts / etc.
    1dea:	0e 94 ed 01 	call	0x3da	; 0x3da <setup>
			
	load_config();		//try to load configuration data from ROM
    1dee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <load_config>
	{		
		
												//the lines before main_calculations don't have their execution time accounted for in the code 
												//but only take approximately 2us to execute (measured) - (0.006% of a rotation at 2000 rpm)
												
		rotations_since_throttle_was_set ++;	//used as a safety counter - if no good throttle data is received for certain number of rotations - the bot shuts down
    1df2:	80 91 42 01 	lds	r24, 0x0142
    1df6:	90 91 43 01 	lds	r25, 0x0143
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	90 93 43 01 	sts	0x0143, r25
    1e00:	80 93 42 01 	sts	0x0142, r24
		rotation_count ++;
    1e04:	80 91 3a 01 	lds	r24, 0x013A
    1e08:	90 91 3b 01 	lds	r25, 0x013B
    1e0c:	a0 91 3c 01 	lds	r26, 0x013C
    1e10:	b0 91 3d 01 	lds	r27, 0x013D
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	a1 1d       	adc	r26, r1
    1e18:	b1 1d       	adc	r27, r1
    1e1a:	80 93 3a 01 	sts	0x013A, r24
    1e1e:	90 93 3b 01 	sts	0x013B, r25
    1e22:	a0 93 3c 01 	sts	0x013C, r26
    1e26:	b0 93 3d 01 	sts	0x013D, r27
				
		safety_and_idle();						//does safety check / sees if we're just sitting idle - also checks if config mode is requested
    1e2a:	0e 94 11 0c 	call	0x1822	; 0x1822 <safety_and_idle>
		
		alternate_motor_cycle = !alternate_motor_cycle;     //alternates alternate_motor_cycle - used to balance spin / avoid favoring one motor
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	80 91 3e 01 	lds	r24, 0x013E
    1e36:	90 91 3f 01 	lds	r25, 0x013F
    1e3a:	89 2b       	or	r24, r25
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <main+0x58>
    1e3e:	21 e0       	ldi	r18, 0x01	; 1
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	30 93 3f 01 	sts	0x013F, r19
    1e46:	20 93 3e 01 	sts	0x013E, r18

		led_hold_over = 0;						//reset the LED counter
    1e4a:	10 92 68 01 	sts	0x0168, r1
    1e4e:	10 92 69 01 	sts	0x0169, r1
    1e52:	10 92 6a 01 	sts	0x016A, r1
    1e56:	10 92 6b 01 	sts	0x016B, r1
		
		main_calculations();					//reads accel data and does all the math
    1e5a:	0e 94 88 06 	call	0xd10	; 0xd10 <main_calculations>
												//takes about 400us - but is measured real-time / compensated for

		do_spin_180(1);							//1st 180 degrees of spin
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 50 02 	call	0x4a0	; 0x4a0 <do_spin_180>

		led_hold_over = TCNT1;					//carry over led_counter from last spin
    1e66:	80 91 84 00 	lds	r24, 0x0084
    1e6a:	90 91 85 00 	lds	r25, 0x0085
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	80 93 68 01 	sts	0x0168, r24
    1e76:	90 93 69 01 	sts	0x0169, r25
    1e7a:	a0 93 6a 01 	sts	0x016A, r26
    1e7e:	b0 93 6b 01 	sts	0x016B, r27
				
		main_calculations();					//read accel / do the main calculations again
    1e82:	0e 94 88 06 	call	0xd10	; 0xd10 <main_calculations>
												//time doing math is tracked - but since time doing calculations is outside the motor loop - if it all falls in one cycle or the other...
												//..it may still be enough to cause a slight bias when translating
												//should really present a very small amount of time (less than 1% at 2000rpm) 
												//since we're resampling the accel - this may also provide a little better accuracy

		do_spin_180(2);							//2nd 180 degrees of spin
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <do_spin_180>
    1e8e:	b1 cf       	rjmp	.-158    	; 0x1df2 <main+0x8>

00001e90 <__subsf3>:
    1e90:	50 58       	subi	r21, 0x80	; 128

00001e92 <__addsf3>:
    1e92:	bb 27       	eor	r27, r27
    1e94:	aa 27       	eor	r26, r26
    1e96:	0e d0       	rcall	.+28     	; 0x1eb4 <__addsf3x>
    1e98:	75 c1       	rjmp	.+746    	; 0x2184 <__fp_round>
    1e9a:	66 d1       	rcall	.+716    	; 0x2168 <__fp_pscA>
    1e9c:	30 f0       	brcs	.+12     	; 0x1eaa <__addsf3+0x18>
    1e9e:	6b d1       	rcall	.+726    	; 0x2176 <__fp_pscB>
    1ea0:	20 f0       	brcs	.+8      	; 0x1eaa <__addsf3+0x18>
    1ea2:	31 f4       	brne	.+12     	; 0x1eb0 <__addsf3+0x1e>
    1ea4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <__addsf3+0x1a>
    1ea8:	1e f4       	brtc	.+6      	; 0x1eb0 <__addsf3+0x1e>
    1eaa:	5b c1       	rjmp	.+694    	; 0x2162 <__fp_nan>
    1eac:	0e f4       	brtc	.+2      	; 0x1eb0 <__addsf3+0x1e>
    1eae:	e0 95       	com	r30
    1eb0:	e7 fb       	bst	r30, 7
    1eb2:	51 c1       	rjmp	.+674    	; 0x2156 <__fp_inf>

00001eb4 <__addsf3x>:
    1eb4:	e9 2f       	mov	r30, r25
    1eb6:	77 d1       	rcall	.+750    	; 0x21a6 <__fp_split3>
    1eb8:	80 f3       	brcs	.-32     	; 0x1e9a <__addsf3+0x8>
    1eba:	ba 17       	cp	r27, r26
    1ebc:	62 07       	cpc	r22, r18
    1ebe:	73 07       	cpc	r23, r19
    1ec0:	84 07       	cpc	r24, r20
    1ec2:	95 07       	cpc	r25, r21
    1ec4:	18 f0       	brcs	.+6      	; 0x1ecc <__addsf3x+0x18>
    1ec6:	71 f4       	brne	.+28     	; 0x1ee4 <__addsf3x+0x30>
    1ec8:	9e f5       	brtc	.+102    	; 0x1f30 <__addsf3x+0x7c>
    1eca:	8f c1       	rjmp	.+798    	; 0x21ea <__fp_zero>
    1ecc:	0e f4       	brtc	.+2      	; 0x1ed0 <__addsf3x+0x1c>
    1ece:	e0 95       	com	r30
    1ed0:	0b 2e       	mov	r0, r27
    1ed2:	ba 2f       	mov	r27, r26
    1ed4:	a0 2d       	mov	r26, r0
    1ed6:	0b 01       	movw	r0, r22
    1ed8:	b9 01       	movw	r22, r18
    1eda:	90 01       	movw	r18, r0
    1edc:	0c 01       	movw	r0, r24
    1ede:	ca 01       	movw	r24, r20
    1ee0:	a0 01       	movw	r20, r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	ff 27       	eor	r31, r31
    1ee6:	59 1b       	sub	r21, r25
    1ee8:	99 f0       	breq	.+38     	; 0x1f10 <__addsf3x+0x5c>
    1eea:	59 3f       	cpi	r21, 0xF9	; 249
    1eec:	50 f4       	brcc	.+20     	; 0x1f02 <__addsf3x+0x4e>
    1eee:	50 3e       	cpi	r21, 0xE0	; 224
    1ef0:	68 f1       	brcs	.+90     	; 0x1f4c <__addsf3x+0x98>
    1ef2:	1a 16       	cp	r1, r26
    1ef4:	f0 40       	sbci	r31, 0x00	; 0
    1ef6:	a2 2f       	mov	r26, r18
    1ef8:	23 2f       	mov	r18, r19
    1efa:	34 2f       	mov	r19, r20
    1efc:	44 27       	eor	r20, r20
    1efe:	58 5f       	subi	r21, 0xF8	; 248
    1f00:	f3 cf       	rjmp	.-26     	; 0x1ee8 <__addsf3x+0x34>
    1f02:	46 95       	lsr	r20
    1f04:	37 95       	ror	r19
    1f06:	27 95       	ror	r18
    1f08:	a7 95       	ror	r26
    1f0a:	f0 40       	sbci	r31, 0x00	; 0
    1f0c:	53 95       	inc	r21
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__addsf3x+0x4e>
    1f10:	7e f4       	brtc	.+30     	; 0x1f30 <__addsf3x+0x7c>
    1f12:	1f 16       	cp	r1, r31
    1f14:	ba 0b       	sbc	r27, r26
    1f16:	62 0b       	sbc	r22, r18
    1f18:	73 0b       	sbc	r23, r19
    1f1a:	84 0b       	sbc	r24, r20
    1f1c:	ba f0       	brmi	.+46     	; 0x1f4c <__addsf3x+0x98>
    1f1e:	91 50       	subi	r25, 0x01	; 1
    1f20:	a1 f0       	breq	.+40     	; 0x1f4a <__addsf3x+0x96>
    1f22:	ff 0f       	add	r31, r31
    1f24:	bb 1f       	adc	r27, r27
    1f26:	66 1f       	adc	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	c2 f7       	brpl	.-16     	; 0x1f1e <__addsf3x+0x6a>
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <__addsf3x+0x98>
    1f30:	ba 0f       	add	r27, r26
    1f32:	62 1f       	adc	r22, r18
    1f34:	73 1f       	adc	r23, r19
    1f36:	84 1f       	adc	r24, r20
    1f38:	48 f4       	brcc	.+18     	; 0x1f4c <__addsf3x+0x98>
    1f3a:	87 95       	ror	r24
    1f3c:	77 95       	ror	r23
    1f3e:	67 95       	ror	r22
    1f40:	b7 95       	ror	r27
    1f42:	f7 95       	ror	r31
    1f44:	9e 3f       	cpi	r25, 0xFE	; 254
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <__addsf3x+0x96>
    1f48:	b3 cf       	rjmp	.-154    	; 0x1eb0 <__addsf3+0x1e>
    1f4a:	93 95       	inc	r25
    1f4c:	88 0f       	add	r24, r24
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <__addsf3x+0x9e>
    1f50:	99 27       	eor	r25, r25
    1f52:	ee 0f       	add	r30, r30
    1f54:	97 95       	ror	r25
    1f56:	87 95       	ror	r24
    1f58:	08 95       	ret

00001f5a <__cmpsf2>:
    1f5a:	d9 d0       	rcall	.+434    	; 0x210e <__fp_cmp>
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <__cmpsf2+0x6>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	08 95       	ret

00001f62 <__divsf3>:
    1f62:	0c d0       	rcall	.+24     	; 0x1f7c <__divsf3x>
    1f64:	0f c1       	rjmp	.+542    	; 0x2184 <__fp_round>
    1f66:	07 d1       	rcall	.+526    	; 0x2176 <__fp_pscB>
    1f68:	40 f0       	brcs	.+16     	; 0x1f7a <__divsf3+0x18>
    1f6a:	fe d0       	rcall	.+508    	; 0x2168 <__fp_pscA>
    1f6c:	30 f0       	brcs	.+12     	; 0x1f7a <__divsf3+0x18>
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <__divsf3+0x16>
    1f70:	5f 3f       	cpi	r21, 0xFF	; 255
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <__divsf3+0x18>
    1f74:	f0 c0       	rjmp	.+480    	; 0x2156 <__fp_inf>
    1f76:	51 11       	cpse	r21, r1
    1f78:	39 c1       	rjmp	.+626    	; 0x21ec <__fp_szero>
    1f7a:	f3 c0       	rjmp	.+486    	; 0x2162 <__fp_nan>

00001f7c <__divsf3x>:
    1f7c:	14 d1       	rcall	.+552    	; 0x21a6 <__fp_split3>
    1f7e:	98 f3       	brcs	.-26     	; 0x1f66 <__divsf3+0x4>

00001f80 <__divsf3_pse>:
    1f80:	99 23       	and	r25, r25
    1f82:	c9 f3       	breq	.-14     	; 0x1f76 <__divsf3+0x14>
    1f84:	55 23       	and	r21, r21
    1f86:	b1 f3       	breq	.-20     	; 0x1f74 <__divsf3+0x12>
    1f88:	95 1b       	sub	r25, r21
    1f8a:	55 0b       	sbc	r21, r21
    1f8c:	bb 27       	eor	r27, r27
    1f8e:	aa 27       	eor	r26, r26
    1f90:	62 17       	cp	r22, r18
    1f92:	73 07       	cpc	r23, r19
    1f94:	84 07       	cpc	r24, r20
    1f96:	38 f0       	brcs	.+14     	; 0x1fa6 <__divsf3_pse+0x26>
    1f98:	9f 5f       	subi	r25, 0xFF	; 255
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	44 1f       	adc	r20, r20
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	a9 f3       	breq	.-22     	; 0x1f90 <__divsf3_pse+0x10>
    1fa6:	33 d0       	rcall	.+102    	; 0x200e <__divsf3_pse+0x8e>
    1fa8:	0e 2e       	mov	r0, r30
    1faa:	3a f0       	brmi	.+14     	; 0x1fba <__divsf3_pse+0x3a>
    1fac:	e0 e8       	ldi	r30, 0x80	; 128
    1fae:	30 d0       	rcall	.+96     	; 0x2010 <__divsf3_pse+0x90>
    1fb0:	91 50       	subi	r25, 0x01	; 1
    1fb2:	50 40       	sbci	r21, 0x00	; 0
    1fb4:	e6 95       	lsr	r30
    1fb6:	00 1c       	adc	r0, r0
    1fb8:	ca f7       	brpl	.-14     	; 0x1fac <__divsf3_pse+0x2c>
    1fba:	29 d0       	rcall	.+82     	; 0x200e <__divsf3_pse+0x8e>
    1fbc:	fe 2f       	mov	r31, r30
    1fbe:	27 d0       	rcall	.+78     	; 0x200e <__divsf3_pse+0x8e>
    1fc0:	66 0f       	add	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	26 17       	cp	r18, r22
    1fca:	37 07       	cpc	r19, r23
    1fcc:	48 07       	cpc	r20, r24
    1fce:	ab 07       	cpc	r26, r27
    1fd0:	b0 e8       	ldi	r27, 0x80	; 128
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <__divsf3_pse+0x56>
    1fd4:	bb 0b       	sbc	r27, r27
    1fd6:	80 2d       	mov	r24, r0
    1fd8:	bf 01       	movw	r22, r30
    1fda:	ff 27       	eor	r31, r31
    1fdc:	93 58       	subi	r25, 0x83	; 131
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	2a f0       	brmi	.+10     	; 0x1fec <__divsf3_pse+0x6c>
    1fe2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe4:	51 05       	cpc	r21, r1
    1fe6:	68 f0       	brcs	.+26     	; 0x2002 <__divsf3_pse+0x82>
    1fe8:	b6 c0       	rjmp	.+364    	; 0x2156 <__fp_inf>
    1fea:	00 c1       	rjmp	.+512    	; 0x21ec <__fp_szero>
    1fec:	5f 3f       	cpi	r21, 0xFF	; 255
    1fee:	ec f3       	brlt	.-6      	; 0x1fea <__divsf3_pse+0x6a>
    1ff0:	98 3e       	cpi	r25, 0xE8	; 232
    1ff2:	dc f3       	brlt	.-10     	; 0x1fea <__divsf3_pse+0x6a>
    1ff4:	86 95       	lsr	r24
    1ff6:	77 95       	ror	r23
    1ff8:	67 95       	ror	r22
    1ffa:	b7 95       	ror	r27
    1ffc:	f7 95       	ror	r31
    1ffe:	9f 5f       	subi	r25, 0xFF	; 255
    2000:	c9 f7       	brne	.-14     	; 0x1ff4 <__divsf3_pse+0x74>
    2002:	88 0f       	add	r24, r24
    2004:	91 1d       	adc	r25, r1
    2006:	96 95       	lsr	r25
    2008:	87 95       	ror	r24
    200a:	97 f9       	bld	r25, 7
    200c:	08 95       	ret
    200e:	e1 e0       	ldi	r30, 0x01	; 1
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	bb 1f       	adc	r27, r27
    2018:	62 17       	cp	r22, r18
    201a:	73 07       	cpc	r23, r19
    201c:	84 07       	cpc	r24, r20
    201e:	ba 07       	cpc	r27, r26
    2020:	20 f0       	brcs	.+8      	; 0x202a <__divsf3_pse+0xaa>
    2022:	62 1b       	sub	r22, r18
    2024:	73 0b       	sbc	r23, r19
    2026:	84 0b       	sbc	r24, r20
    2028:	ba 0b       	sbc	r27, r26
    202a:	ee 1f       	adc	r30, r30
    202c:	88 f7       	brcc	.-30     	; 0x2010 <__divsf3_pse+0x90>
    202e:	e0 95       	com	r30
    2030:	08 95       	ret

00002032 <__fixsfsi>:
    2032:	04 d0       	rcall	.+8      	; 0x203c <__fixunssfsi>
    2034:	68 94       	set
    2036:	b1 11       	cpse	r27, r1
    2038:	d9 c0       	rjmp	.+434    	; 0x21ec <__fp_szero>
    203a:	08 95       	ret

0000203c <__fixunssfsi>:
    203c:	bc d0       	rcall	.+376    	; 0x21b6 <__fp_splitA>
    203e:	88 f0       	brcs	.+34     	; 0x2062 <__fixunssfsi+0x26>
    2040:	9f 57       	subi	r25, 0x7F	; 127
    2042:	90 f0       	brcs	.+36     	; 0x2068 <__fixunssfsi+0x2c>
    2044:	b9 2f       	mov	r27, r25
    2046:	99 27       	eor	r25, r25
    2048:	b7 51       	subi	r27, 0x17	; 23
    204a:	a0 f0       	brcs	.+40     	; 0x2074 <__fixunssfsi+0x38>
    204c:	d1 f0       	breq	.+52     	; 0x2082 <__fixunssfsi+0x46>
    204e:	66 0f       	add	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 1f       	adc	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	1a f0       	brmi	.+6      	; 0x205e <__fixunssfsi+0x22>
    2058:	ba 95       	dec	r27
    205a:	c9 f7       	brne	.-14     	; 0x204e <__fixunssfsi+0x12>
    205c:	12 c0       	rjmp	.+36     	; 0x2082 <__fixunssfsi+0x46>
    205e:	b1 30       	cpi	r27, 0x01	; 1
    2060:	81 f0       	breq	.+32     	; 0x2082 <__fixunssfsi+0x46>
    2062:	c3 d0       	rcall	.+390    	; 0x21ea <__fp_zero>
    2064:	b1 e0       	ldi	r27, 0x01	; 1
    2066:	08 95       	ret
    2068:	c0 c0       	rjmp	.+384    	; 0x21ea <__fp_zero>
    206a:	67 2f       	mov	r22, r23
    206c:	78 2f       	mov	r23, r24
    206e:	88 27       	eor	r24, r24
    2070:	b8 5f       	subi	r27, 0xF8	; 248
    2072:	39 f0       	breq	.+14     	; 0x2082 <__fixunssfsi+0x46>
    2074:	b9 3f       	cpi	r27, 0xF9	; 249
    2076:	cc f3       	brlt	.-14     	; 0x206a <__fixunssfsi+0x2e>
    2078:	86 95       	lsr	r24
    207a:	77 95       	ror	r23
    207c:	67 95       	ror	r22
    207e:	b3 95       	inc	r27
    2080:	d9 f7       	brne	.-10     	; 0x2078 <__fixunssfsi+0x3c>
    2082:	3e f4       	brtc	.+14     	; 0x2092 <__fixunssfsi+0x56>
    2084:	90 95       	com	r25
    2086:	80 95       	com	r24
    2088:	70 95       	com	r23
    208a:	61 95       	neg	r22
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	8f 4f       	sbci	r24, 0xFF	; 255
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	08 95       	ret

00002094 <__floatunsisf>:
    2094:	e8 94       	clt
    2096:	09 c0       	rjmp	.+18     	; 0x20aa <__floatsisf+0x12>

00002098 <__floatsisf>:
    2098:	97 fb       	bst	r25, 7
    209a:	3e f4       	brtc	.+14     	; 0x20aa <__floatsisf+0x12>
    209c:	90 95       	com	r25
    209e:	80 95       	com	r24
    20a0:	70 95       	com	r23
    20a2:	61 95       	neg	r22
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	99 23       	and	r25, r25
    20ac:	a9 f0       	breq	.+42     	; 0x20d8 <__floatsisf+0x40>
    20ae:	f9 2f       	mov	r31, r25
    20b0:	96 e9       	ldi	r25, 0x96	; 150
    20b2:	bb 27       	eor	r27, r27
    20b4:	93 95       	inc	r25
    20b6:	f6 95       	lsr	r31
    20b8:	87 95       	ror	r24
    20ba:	77 95       	ror	r23
    20bc:	67 95       	ror	r22
    20be:	b7 95       	ror	r27
    20c0:	f1 11       	cpse	r31, r1
    20c2:	f8 cf       	rjmp	.-16     	; 0x20b4 <__floatsisf+0x1c>
    20c4:	fa f4       	brpl	.+62     	; 0x2104 <__floatsisf+0x6c>
    20c6:	bb 0f       	add	r27, r27
    20c8:	11 f4       	brne	.+4      	; 0x20ce <__floatsisf+0x36>
    20ca:	60 ff       	sbrs	r22, 0
    20cc:	1b c0       	rjmp	.+54     	; 0x2104 <__floatsisf+0x6c>
    20ce:	6f 5f       	subi	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	8f 4f       	sbci	r24, 0xFF	; 255
    20d4:	9f 4f       	sbci	r25, 0xFF	; 255
    20d6:	16 c0       	rjmp	.+44     	; 0x2104 <__floatsisf+0x6c>
    20d8:	88 23       	and	r24, r24
    20da:	11 f0       	breq	.+4      	; 0x20e0 <__floatsisf+0x48>
    20dc:	96 e9       	ldi	r25, 0x96	; 150
    20de:	11 c0       	rjmp	.+34     	; 0x2102 <__floatsisf+0x6a>
    20e0:	77 23       	and	r23, r23
    20e2:	21 f0       	breq	.+8      	; 0x20ec <__floatsisf+0x54>
    20e4:	9e e8       	ldi	r25, 0x8E	; 142
    20e6:	87 2f       	mov	r24, r23
    20e8:	76 2f       	mov	r23, r22
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <__floatsisf+0x5e>
    20ec:	66 23       	and	r22, r22
    20ee:	71 f0       	breq	.+28     	; 0x210c <__floatsisf+0x74>
    20f0:	96 e8       	ldi	r25, 0x86	; 134
    20f2:	86 2f       	mov	r24, r22
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	2a f0       	brmi	.+10     	; 0x2104 <__floatsisf+0x6c>
    20fa:	9a 95       	dec	r25
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	da f7       	brpl	.-10     	; 0x20fa <__floatsisf+0x62>
    2104:	88 0f       	add	r24, r24
    2106:	96 95       	lsr	r25
    2108:	87 95       	ror	r24
    210a:	97 f9       	bld	r25, 7
    210c:	08 95       	ret

0000210e <__fp_cmp>:
    210e:	99 0f       	add	r25, r25
    2110:	00 08       	sbc	r0, r0
    2112:	55 0f       	add	r21, r21
    2114:	aa 0b       	sbc	r26, r26
    2116:	e0 e8       	ldi	r30, 0x80	; 128
    2118:	fe ef       	ldi	r31, 0xFE	; 254
    211a:	16 16       	cp	r1, r22
    211c:	17 06       	cpc	r1, r23
    211e:	e8 07       	cpc	r30, r24
    2120:	f9 07       	cpc	r31, r25
    2122:	c0 f0       	brcs	.+48     	; 0x2154 <__fp_cmp+0x46>
    2124:	12 16       	cp	r1, r18
    2126:	13 06       	cpc	r1, r19
    2128:	e4 07       	cpc	r30, r20
    212a:	f5 07       	cpc	r31, r21
    212c:	98 f0       	brcs	.+38     	; 0x2154 <__fp_cmp+0x46>
    212e:	62 1b       	sub	r22, r18
    2130:	73 0b       	sbc	r23, r19
    2132:	84 0b       	sbc	r24, r20
    2134:	95 0b       	sbc	r25, r21
    2136:	39 f4       	brne	.+14     	; 0x2146 <__fp_cmp+0x38>
    2138:	0a 26       	eor	r0, r26
    213a:	61 f0       	breq	.+24     	; 0x2154 <__fp_cmp+0x46>
    213c:	23 2b       	or	r18, r19
    213e:	24 2b       	or	r18, r20
    2140:	25 2b       	or	r18, r21
    2142:	21 f4       	brne	.+8      	; 0x214c <__fp_cmp+0x3e>
    2144:	08 95       	ret
    2146:	0a 26       	eor	r0, r26
    2148:	09 f4       	brne	.+2      	; 0x214c <__fp_cmp+0x3e>
    214a:	a1 40       	sbci	r26, 0x01	; 1
    214c:	a6 95       	lsr	r26
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	81 1d       	adc	r24, r1
    2152:	81 1d       	adc	r24, r1
    2154:	08 95       	ret

00002156 <__fp_inf>:
    2156:	97 f9       	bld	r25, 7
    2158:	9f 67       	ori	r25, 0x7F	; 127
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	08 95       	ret

00002162 <__fp_nan>:
    2162:	9f ef       	ldi	r25, 0xFF	; 255
    2164:	80 ec       	ldi	r24, 0xC0	; 192
    2166:	08 95       	ret

00002168 <__fp_pscA>:
    2168:	00 24       	eor	r0, r0
    216a:	0a 94       	dec	r0
    216c:	16 16       	cp	r1, r22
    216e:	17 06       	cpc	r1, r23
    2170:	18 06       	cpc	r1, r24
    2172:	09 06       	cpc	r0, r25
    2174:	08 95       	ret

00002176 <__fp_pscB>:
    2176:	00 24       	eor	r0, r0
    2178:	0a 94       	dec	r0
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	05 06       	cpc	r0, r21
    2182:	08 95       	ret

00002184 <__fp_round>:
    2184:	09 2e       	mov	r0, r25
    2186:	03 94       	inc	r0
    2188:	00 0c       	add	r0, r0
    218a:	11 f4       	brne	.+4      	; 0x2190 <__fp_round+0xc>
    218c:	88 23       	and	r24, r24
    218e:	52 f0       	brmi	.+20     	; 0x21a4 <__fp_round+0x20>
    2190:	bb 0f       	add	r27, r27
    2192:	40 f4       	brcc	.+16     	; 0x21a4 <__fp_round+0x20>
    2194:	bf 2b       	or	r27, r31
    2196:	11 f4       	brne	.+4      	; 0x219c <__fp_round+0x18>
    2198:	60 ff       	sbrs	r22, 0
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <__fp_round+0x20>
    219c:	6f 5f       	subi	r22, 0xFF	; 255
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	8f 4f       	sbci	r24, 0xFF	; 255
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	08 95       	ret

000021a6 <__fp_split3>:
    21a6:	57 fd       	sbrc	r21, 7
    21a8:	90 58       	subi	r25, 0x80	; 128
    21aa:	44 0f       	add	r20, r20
    21ac:	55 1f       	adc	r21, r21
    21ae:	59 f0       	breq	.+22     	; 0x21c6 <__fp_splitA+0x10>
    21b0:	5f 3f       	cpi	r21, 0xFF	; 255
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <__fp_splitA+0x1a>
    21b4:	47 95       	ror	r20

000021b6 <__fp_splitA>:
    21b6:	88 0f       	add	r24, r24
    21b8:	97 fb       	bst	r25, 7
    21ba:	99 1f       	adc	r25, r25
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <__fp_splitA+0x20>
    21be:	9f 3f       	cpi	r25, 0xFF	; 255
    21c0:	79 f0       	breq	.+30     	; 0x21e0 <__fp_splitA+0x2a>
    21c2:	87 95       	ror	r24
    21c4:	08 95       	ret
    21c6:	12 16       	cp	r1, r18
    21c8:	13 06       	cpc	r1, r19
    21ca:	14 06       	cpc	r1, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	f2 cf       	rjmp	.-28     	; 0x21b4 <__fp_split3+0xe>
    21d0:	46 95       	lsr	r20
    21d2:	f1 df       	rcall	.-30     	; 0x21b6 <__fp_splitA>
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <__fp_splitA+0x30>
    21d6:	16 16       	cp	r1, r22
    21d8:	17 06       	cpc	r1, r23
    21da:	18 06       	cpc	r1, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	f1 cf       	rjmp	.-30     	; 0x21c2 <__fp_splitA+0xc>
    21e0:	86 95       	lsr	r24
    21e2:	71 05       	cpc	r23, r1
    21e4:	61 05       	cpc	r22, r1
    21e6:	08 94       	sec
    21e8:	08 95       	ret

000021ea <__fp_zero>:
    21ea:	e8 94       	clt

000021ec <__fp_szero>:
    21ec:	bb 27       	eor	r27, r27
    21ee:	66 27       	eor	r22, r22
    21f0:	77 27       	eor	r23, r23
    21f2:	cb 01       	movw	r24, r22
    21f4:	97 f9       	bld	r25, 7
    21f6:	08 95       	ret

000021f8 <__gesf2>:
    21f8:	8a df       	rcall	.-236    	; 0x210e <__fp_cmp>
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <__gesf2+0x6>
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	08 95       	ret

00002200 <__mulsf3>:
    2200:	0b d0       	rcall	.+22     	; 0x2218 <__mulsf3x>
    2202:	c0 cf       	rjmp	.-128    	; 0x2184 <__fp_round>
    2204:	b1 df       	rcall	.-158    	; 0x2168 <__fp_pscA>
    2206:	28 f0       	brcs	.+10     	; 0x2212 <__mulsf3+0x12>
    2208:	b6 df       	rcall	.-148    	; 0x2176 <__fp_pscB>
    220a:	18 f0       	brcs	.+6      	; 0x2212 <__mulsf3+0x12>
    220c:	95 23       	and	r25, r21
    220e:	09 f0       	breq	.+2      	; 0x2212 <__mulsf3+0x12>
    2210:	a2 cf       	rjmp	.-188    	; 0x2156 <__fp_inf>
    2212:	a7 cf       	rjmp	.-178    	; 0x2162 <__fp_nan>
    2214:	11 24       	eor	r1, r1
    2216:	ea cf       	rjmp	.-44     	; 0x21ec <__fp_szero>

00002218 <__mulsf3x>:
    2218:	c6 df       	rcall	.-116    	; 0x21a6 <__fp_split3>
    221a:	a0 f3       	brcs	.-24     	; 0x2204 <__mulsf3+0x4>

0000221c <__mulsf3_pse>:
    221c:	95 9f       	mul	r25, r21
    221e:	d1 f3       	breq	.-12     	; 0x2214 <__mulsf3+0x14>
    2220:	95 0f       	add	r25, r21
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	55 1f       	adc	r21, r21
    2226:	62 9f       	mul	r22, r18
    2228:	f0 01       	movw	r30, r0
    222a:	72 9f       	mul	r23, r18
    222c:	bb 27       	eor	r27, r27
    222e:	f0 0d       	add	r31, r0
    2230:	b1 1d       	adc	r27, r1
    2232:	63 9f       	mul	r22, r19
    2234:	aa 27       	eor	r26, r26
    2236:	f0 0d       	add	r31, r0
    2238:	b1 1d       	adc	r27, r1
    223a:	aa 1f       	adc	r26, r26
    223c:	64 9f       	mul	r22, r20
    223e:	66 27       	eor	r22, r22
    2240:	b0 0d       	add	r27, r0
    2242:	a1 1d       	adc	r26, r1
    2244:	66 1f       	adc	r22, r22
    2246:	82 9f       	mul	r24, r18
    2248:	22 27       	eor	r18, r18
    224a:	b0 0d       	add	r27, r0
    224c:	a1 1d       	adc	r26, r1
    224e:	62 1f       	adc	r22, r18
    2250:	73 9f       	mul	r23, r19
    2252:	b0 0d       	add	r27, r0
    2254:	a1 1d       	adc	r26, r1
    2256:	62 1f       	adc	r22, r18
    2258:	83 9f       	mul	r24, r19
    225a:	a0 0d       	add	r26, r0
    225c:	61 1d       	adc	r22, r1
    225e:	22 1f       	adc	r18, r18
    2260:	74 9f       	mul	r23, r20
    2262:	33 27       	eor	r19, r19
    2264:	a0 0d       	add	r26, r0
    2266:	61 1d       	adc	r22, r1
    2268:	23 1f       	adc	r18, r19
    226a:	84 9f       	mul	r24, r20
    226c:	60 0d       	add	r22, r0
    226e:	21 1d       	adc	r18, r1
    2270:	82 2f       	mov	r24, r18
    2272:	76 2f       	mov	r23, r22
    2274:	6a 2f       	mov	r22, r26
    2276:	11 24       	eor	r1, r1
    2278:	9f 57       	subi	r25, 0x7F	; 127
    227a:	50 40       	sbci	r21, 0x00	; 0
    227c:	8a f0       	brmi	.+34     	; 0x22a0 <__mulsf3_pse+0x84>
    227e:	e1 f0       	breq	.+56     	; 0x22b8 <__mulsf3_pse+0x9c>
    2280:	88 23       	and	r24, r24
    2282:	4a f0       	brmi	.+18     	; 0x2296 <__mulsf3_pse+0x7a>
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	bb 1f       	adc	r27, r27
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	91 50       	subi	r25, 0x01	; 1
    2292:	50 40       	sbci	r21, 0x00	; 0
    2294:	a9 f7       	brne	.-22     	; 0x2280 <__mulsf3_pse+0x64>
    2296:	9e 3f       	cpi	r25, 0xFE	; 254
    2298:	51 05       	cpc	r21, r1
    229a:	70 f0       	brcs	.+28     	; 0x22b8 <__mulsf3_pse+0x9c>
    229c:	5c cf       	rjmp	.-328    	; 0x2156 <__fp_inf>
    229e:	a6 cf       	rjmp	.-180    	; 0x21ec <__fp_szero>
    22a0:	5f 3f       	cpi	r21, 0xFF	; 255
    22a2:	ec f3       	brlt	.-6      	; 0x229e <__mulsf3_pse+0x82>
    22a4:	98 3e       	cpi	r25, 0xE8	; 232
    22a6:	dc f3       	brlt	.-10     	; 0x229e <__mulsf3_pse+0x82>
    22a8:	86 95       	lsr	r24
    22aa:	77 95       	ror	r23
    22ac:	67 95       	ror	r22
    22ae:	b7 95       	ror	r27
    22b0:	f7 95       	ror	r31
    22b2:	e7 95       	ror	r30
    22b4:	9f 5f       	subi	r25, 0xFF	; 255
    22b6:	c1 f7       	brne	.-16     	; 0x22a8 <__mulsf3_pse+0x8c>
    22b8:	fe 2b       	or	r31, r30
    22ba:	88 0f       	add	r24, r24
    22bc:	91 1d       	adc	r25, r1
    22be:	96 95       	lsr	r25
    22c0:	87 95       	ror	r24
    22c2:	97 f9       	bld	r25, 7
    22c4:	08 95       	ret
    22c6:	11 f4       	brne	.+4      	; 0x22cc <__mulsf3_pse+0xb0>
    22c8:	0e f4       	brtc	.+2      	; 0x22cc <__mulsf3_pse+0xb0>
    22ca:	4b cf       	rjmp	.-362    	; 0x2162 <__fp_nan>
    22cc:	3e c0       	rjmp	.+124    	; 0x234a <__fp_mpack>

000022ce <sqrt>:
    22ce:	73 df       	rcall	.-282    	; 0x21b6 <__fp_splitA>
    22d0:	d0 f3       	brcs	.-12     	; 0x22c6 <__mulsf3_pse+0xaa>
    22d2:	99 23       	and	r25, r25
    22d4:	d9 f3       	breq	.-10     	; 0x22cc <__mulsf3_pse+0xb0>
    22d6:	ce f3       	brts	.-14     	; 0x22ca <__mulsf3_pse+0xae>
    22d8:	9f 57       	subi	r25, 0x7F	; 127
    22da:	55 0b       	sbc	r21, r21
    22dc:	87 ff       	sbrs	r24, 7
    22de:	43 d0       	rcall	.+134    	; 0x2366 <__fp_norm2>
    22e0:	00 24       	eor	r0, r0
    22e2:	a0 e6       	ldi	r26, 0x60	; 96
    22e4:	40 ea       	ldi	r20, 0xA0	; 160
    22e6:	90 01       	movw	r18, r0
    22e8:	80 58       	subi	r24, 0x80	; 128
    22ea:	56 95       	lsr	r21
    22ec:	97 95       	ror	r25
    22ee:	28 f4       	brcc	.+10     	; 0x22fa <sqrt+0x2c>
    22f0:	80 5c       	subi	r24, 0xC0	; 192
    22f2:	66 0f       	add	r22, r22
    22f4:	77 1f       	adc	r23, r23
    22f6:	88 1f       	adc	r24, r24
    22f8:	20 f0       	brcs	.+8      	; 0x2302 <sqrt+0x34>
    22fa:	26 17       	cp	r18, r22
    22fc:	37 07       	cpc	r19, r23
    22fe:	48 07       	cpc	r20, r24
    2300:	30 f4       	brcc	.+12     	; 0x230e <sqrt+0x40>
    2302:	62 1b       	sub	r22, r18
    2304:	73 0b       	sbc	r23, r19
    2306:	84 0b       	sbc	r24, r20
    2308:	20 29       	or	r18, r0
    230a:	31 29       	or	r19, r1
    230c:	4a 2b       	or	r20, r26
    230e:	a6 95       	lsr	r26
    2310:	17 94       	ror	r1
    2312:	07 94       	ror	r0
    2314:	20 25       	eor	r18, r0
    2316:	31 25       	eor	r19, r1
    2318:	4a 27       	eor	r20, r26
    231a:	58 f7       	brcc	.-42     	; 0x22f2 <sqrt+0x24>
    231c:	66 0f       	add	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	20 f0       	brcs	.+8      	; 0x232c <sqrt+0x5e>
    2324:	26 17       	cp	r18, r22
    2326:	37 07       	cpc	r19, r23
    2328:	48 07       	cpc	r20, r24
    232a:	30 f4       	brcc	.+12     	; 0x2338 <sqrt+0x6a>
    232c:	62 0b       	sbc	r22, r18
    232e:	73 0b       	sbc	r23, r19
    2330:	84 0b       	sbc	r24, r20
    2332:	20 0d       	add	r18, r0
    2334:	31 1d       	adc	r19, r1
    2336:	41 1d       	adc	r20, r1
    2338:	a0 95       	com	r26
    233a:	81 f7       	brne	.-32     	; 0x231c <sqrt+0x4e>
    233c:	b9 01       	movw	r22, r18
    233e:	84 2f       	mov	r24, r20
    2340:	91 58       	subi	r25, 0x81	; 129
    2342:	88 0f       	add	r24, r24
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	08 95       	ret

0000234a <__fp_mpack>:
    234a:	9f 3f       	cpi	r25, 0xFF	; 255
    234c:	31 f0       	breq	.+12     	; 0x235a <__fp_mpack_finite+0xc>

0000234e <__fp_mpack_finite>:
    234e:	91 50       	subi	r25, 0x01	; 1
    2350:	20 f4       	brcc	.+8      	; 0x235a <__fp_mpack_finite+0xc>
    2352:	87 95       	ror	r24
    2354:	77 95       	ror	r23
    2356:	67 95       	ror	r22
    2358:	b7 95       	ror	r27
    235a:	88 0f       	add	r24, r24
    235c:	91 1d       	adc	r25, r1
    235e:	96 95       	lsr	r25
    2360:	87 95       	ror	r24
    2362:	97 f9       	bld	r25, 7
    2364:	08 95       	ret

00002366 <__fp_norm2>:
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	66 0f       	add	r22, r22
    236c:	77 1f       	adc	r23, r23
    236e:	88 1f       	adc	r24, r24
    2370:	d2 f7       	brpl	.-12     	; 0x2366 <__fp_norm2>
    2372:	08 95       	ret

00002374 <__mulsi3>:
    2374:	62 9f       	mul	r22, r18
    2376:	d0 01       	movw	r26, r0
    2378:	73 9f       	mul	r23, r19
    237a:	f0 01       	movw	r30, r0
    237c:	82 9f       	mul	r24, r18
    237e:	e0 0d       	add	r30, r0
    2380:	f1 1d       	adc	r31, r1
    2382:	64 9f       	mul	r22, r20
    2384:	e0 0d       	add	r30, r0
    2386:	f1 1d       	adc	r31, r1
    2388:	92 9f       	mul	r25, r18
    238a:	f0 0d       	add	r31, r0
    238c:	83 9f       	mul	r24, r19
    238e:	f0 0d       	add	r31, r0
    2390:	74 9f       	mul	r23, r20
    2392:	f0 0d       	add	r31, r0
    2394:	65 9f       	mul	r22, r21
    2396:	f0 0d       	add	r31, r0
    2398:	99 27       	eor	r25, r25
    239a:	72 9f       	mul	r23, r18
    239c:	b0 0d       	add	r27, r0
    239e:	e1 1d       	adc	r30, r1
    23a0:	f9 1f       	adc	r31, r25
    23a2:	63 9f       	mul	r22, r19
    23a4:	b0 0d       	add	r27, r0
    23a6:	e1 1d       	adc	r30, r1
    23a8:	f9 1f       	adc	r31, r25
    23aa:	bd 01       	movw	r22, r26
    23ac:	cf 01       	movw	r24, r30
    23ae:	11 24       	eor	r1, r1
    23b0:	08 95       	ret

000023b2 <__udivmodhi4>:
    23b2:	aa 1b       	sub	r26, r26
    23b4:	bb 1b       	sub	r27, r27
    23b6:	51 e1       	ldi	r21, 0x11	; 17
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <__udivmodhi4_ep>

000023ba <__udivmodhi4_loop>:
    23ba:	aa 1f       	adc	r26, r26
    23bc:	bb 1f       	adc	r27, r27
    23be:	a6 17       	cp	r26, r22
    23c0:	b7 07       	cpc	r27, r23
    23c2:	10 f0       	brcs	.+4      	; 0x23c8 <__udivmodhi4_ep>
    23c4:	a6 1b       	sub	r26, r22
    23c6:	b7 0b       	sbc	r27, r23

000023c8 <__udivmodhi4_ep>:
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	5a 95       	dec	r21
    23ce:	a9 f7       	brne	.-22     	; 0x23ba <__udivmodhi4_loop>
    23d0:	80 95       	com	r24
    23d2:	90 95       	com	r25
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	08 95       	ret

000023da <__divmodhi4>:
    23da:	97 fb       	bst	r25, 7
    23dc:	09 2e       	mov	r0, r25
    23de:	07 26       	eor	r0, r23
    23e0:	0a d0       	rcall	.+20     	; 0x23f6 <__divmodhi4_neg1>
    23e2:	77 fd       	sbrc	r23, 7
    23e4:	04 d0       	rcall	.+8      	; 0x23ee <__divmodhi4_neg2>
    23e6:	e5 df       	rcall	.-54     	; 0x23b2 <__udivmodhi4>
    23e8:	06 d0       	rcall	.+12     	; 0x23f6 <__divmodhi4_neg1>
    23ea:	00 20       	and	r0, r0
    23ec:	1a f4       	brpl	.+6      	; 0x23f4 <__divmodhi4_exit>

000023ee <__divmodhi4_neg2>:
    23ee:	70 95       	com	r23
    23f0:	61 95       	neg	r22
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255

000023f4 <__divmodhi4_exit>:
    23f4:	08 95       	ret

000023f6 <__divmodhi4_neg1>:
    23f6:	f6 f7       	brtc	.-4      	; 0x23f4 <__divmodhi4_exit>
    23f8:	90 95       	com	r25
    23fa:	81 95       	neg	r24
    23fc:	9f 4f       	sbci	r25, 0xFF	; 255
    23fe:	08 95       	ret

00002400 <__divmodsi4>:
    2400:	97 fb       	bst	r25, 7
    2402:	09 2e       	mov	r0, r25
    2404:	05 26       	eor	r0, r21
    2406:	0e d0       	rcall	.+28     	; 0x2424 <__divmodsi4_neg1>
    2408:	57 fd       	sbrc	r21, 7
    240a:	04 d0       	rcall	.+8      	; 0x2414 <__divmodsi4_neg2>
    240c:	14 d0       	rcall	.+40     	; 0x2436 <__udivmodsi4>
    240e:	0a d0       	rcall	.+20     	; 0x2424 <__divmodsi4_neg1>
    2410:	00 1c       	adc	r0, r0
    2412:	38 f4       	brcc	.+14     	; 0x2422 <__divmodsi4_exit>

00002414 <__divmodsi4_neg2>:
    2414:	50 95       	com	r21
    2416:	40 95       	com	r20
    2418:	30 95       	com	r19
    241a:	21 95       	neg	r18
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	4f 4f       	sbci	r20, 0xFF	; 255
    2420:	5f 4f       	sbci	r21, 0xFF	; 255

00002422 <__divmodsi4_exit>:
    2422:	08 95       	ret

00002424 <__divmodsi4_neg1>:
    2424:	f6 f7       	brtc	.-4      	; 0x2422 <__divmodsi4_exit>
    2426:	90 95       	com	r25
    2428:	80 95       	com	r24
    242a:	70 95       	com	r23
    242c:	61 95       	neg	r22
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	8f 4f       	sbci	r24, 0xFF	; 255
    2432:	9f 4f       	sbci	r25, 0xFF	; 255
    2434:	08 95       	ret

00002436 <__udivmodsi4>:
    2436:	a1 e2       	ldi	r26, 0x21	; 33
    2438:	1a 2e       	mov	r1, r26
    243a:	aa 1b       	sub	r26, r26
    243c:	bb 1b       	sub	r27, r27
    243e:	fd 01       	movw	r30, r26
    2440:	0d c0       	rjmp	.+26     	; 0x245c <__udivmodsi4_ep>

00002442 <__udivmodsi4_loop>:
    2442:	aa 1f       	adc	r26, r26
    2444:	bb 1f       	adc	r27, r27
    2446:	ee 1f       	adc	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	a2 17       	cp	r26, r18
    244c:	b3 07       	cpc	r27, r19
    244e:	e4 07       	cpc	r30, r20
    2450:	f5 07       	cpc	r31, r21
    2452:	20 f0       	brcs	.+8      	; 0x245c <__udivmodsi4_ep>
    2454:	a2 1b       	sub	r26, r18
    2456:	b3 0b       	sbc	r27, r19
    2458:	e4 0b       	sbc	r30, r20
    245a:	f5 0b       	sbc	r31, r21

0000245c <__udivmodsi4_ep>:
    245c:	66 1f       	adc	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	1a 94       	dec	r1
    2466:	69 f7       	brne	.-38     	; 0x2442 <__udivmodsi4_loop>
    2468:	60 95       	com	r22
    246a:	70 95       	com	r23
    246c:	80 95       	com	r24
    246e:	90 95       	com	r25
    2470:	9b 01       	movw	r18, r22
    2472:	ac 01       	movw	r20, r24
    2474:	bd 01       	movw	r22, r26
    2476:	cf 01       	movw	r24, r30
    2478:	08 95       	ret

0000247a <__eerd_word_m168>:
    247a:	a8 e1       	ldi	r26, 0x18	; 24
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	42 e0       	ldi	r20, 0x02	; 2
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__eerd_blraw_m168>

00002486 <__eewr_word_m168>:
    2486:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__eewr_byte_m168>
    248a:	27 2f       	mov	r18, r23
    248c:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__eewr_r18_m168>

00002490 <__eerd_block_m168>:
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22

00002494 <__eerd_blraw_m168>:
    2494:	fc 01       	movw	r30, r24
    2496:	f9 99       	sbic	0x1f, 1	; 31
    2498:	fe cf       	rjmp	.-4      	; 0x2496 <__eerd_blraw_m168+0x2>
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <__eerd_blraw_m168+0x14>
    249c:	f2 bd       	out	0x22, r31	; 34
    249e:	e1 bd       	out	0x21, r30	; 33
    24a0:	f8 9a       	sbi	0x1f, 0	; 31
    24a2:	31 96       	adiw	r30, 0x01	; 1
    24a4:	00 b4       	in	r0, 0x20	; 32
    24a6:	0d 92       	st	X+, r0
    24a8:	41 50       	subi	r20, 0x01	; 1
    24aa:	50 40       	sbci	r21, 0x00	; 0
    24ac:	b8 f7       	brcc	.-18     	; 0x249c <__eerd_blraw_m168+0x8>
    24ae:	08 95       	ret

000024b0 <__eewr_byte_m168>:
    24b0:	26 2f       	mov	r18, r22

000024b2 <__eewr_r18_m168>:
    24b2:	f9 99       	sbic	0x1f, 1	; 31
    24b4:	fe cf       	rjmp	.-4      	; 0x24b2 <__eewr_r18_m168>
    24b6:	1f ba       	out	0x1f, r1	; 31
    24b8:	92 bd       	out	0x22, r25	; 34
    24ba:	81 bd       	out	0x21, r24	; 33
    24bc:	20 bd       	out	0x20, r18	; 32
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	fa 9a       	sbi	0x1f, 2	; 31
    24c4:	f9 9a       	sbi	0x1f, 1	; 31
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	08 95       	ret

000024cc <_exit>:
    24cc:	f8 94       	cli

000024ce <__stop_program>:
    24ce:	ff cf       	rjmp	.-2      	; 0x24ce <__stop_program>
