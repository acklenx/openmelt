
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000026ec  000027a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  0080014a  0080014a  000027ea  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000027ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000007a8  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0d  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a0  00000000  00000000  000039cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc8  00000000  00000000  00003b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00004734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  000048c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00004f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 34       	cpi	r26, 0x4A	; 74
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e4       	ldi	r26, 0x4A	; 74
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3e       	cpi	r26, 0xE0	; 224
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 10 	call	0x2000	; 0x2000 <main>
      9e:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_mode>:


}

void config_mode(void)
{
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	

	//basic tracking adjustment code (is under 50%)
	if (config_mode_throttle_copy < 50)
      ba:	a0 90 ce 01 	lds	r10, 0x01CE
      be:	b0 90 cf 01 	lds	r11, 0x01CF
      c2:	c0 90 d0 01 	lds	r12, 0x01D0
      c6:	d0 90 d1 01 	lds	r13, 0x01D1
      ca:	c6 01       	movw	r24, r12
      cc:	b5 01       	movw	r22, r10
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	48 e4       	ldi	r20, 0x48	; 72
      d4:	52 e4       	ldi	r21, 0x42	; 66
      d6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
      da:	88 23       	and	r24, r24
      dc:	0c f0       	brlt	.+2      	; 0xe0 <config_mode+0x3a>
      de:	b7 c0       	rjmp	.+366    	; 0x24e <config_mode+0x1a8>
	{
	
		flashy_led = 0;			//flashy LED off unless something is changing
      e0:	10 92 b9 01 	sts	0x01B9, r1
      e4:	10 92 b8 01 	sts	0x01B8, r1
		//flashy LED gets turned off to indicate change
		if ( leftright > (heading_center + heading_leftthresh) ) {tracking_comp = tracking_comp + (tracking_comp * 0.003); flashy_led = 1;}
      e8:	20 91 a2 01 	lds	r18, 0x01A2
      ec:	30 91 a3 01 	lds	r19, 0x01A3
      f0:	40 91 a4 01 	lds	r20, 0x01A4
      f4:	50 91 a5 01 	lds	r21, 0x01A5
      f8:	c0 91 16 01 	lds	r28, 0x0116
      fc:	d0 91 17 01 	lds	r29, 0x0117
     100:	80 91 18 01 	lds	r24, 0x0118
     104:	90 91 19 01 	lds	r25, 0x0119
     108:	8c 0f       	add	r24, r28
     10a:	9d 1f       	adc	r25, r29
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	82 17       	cp	r24, r18
     116:	93 07       	cpc	r25, r19
     118:	a4 07       	cpc	r26, r20
     11a:	b5 07       	cpc	r27, r21
     11c:	24 f5       	brge	.+72     	; 0x166 <config_mode+0xc0>
     11e:	e0 90 3c 01 	lds	r14, 0x013C
     122:	f0 90 3d 01 	lds	r15, 0x013D
     126:	00 91 3e 01 	lds	r16, 0x013E
     12a:	10 91 3f 01 	lds	r17, 0x013F
     12e:	c8 01       	movw	r24, r16
     130:	b7 01       	movw	r22, r14
     132:	26 ea       	ldi	r18, 0xA6	; 166
     134:	3b e9       	ldi	r19, 0x9B	; 155
     136:	44 e4       	ldi	r20, 0x44	; 68
     138:	5b e3       	ldi	r21, 0x3B	; 59
     13a:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c8 01       	movw	r24, r16
     144:	b7 01       	movw	r22, r14
     146:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
     14a:	60 93 3c 01 	sts	0x013C, r22
     14e:	70 93 3d 01 	sts	0x013D, r23
     152:	80 93 3e 01 	sts	0x013E, r24
     156:	90 93 3f 01 	sts	0x013F, r25
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	90 93 b9 01 	sts	0x01B9, r25
     162:	80 93 b8 01 	sts	0x01B8, r24
		if ( leftright < (heading_center + heading_rightthresh) ) {tracking_comp = tracking_comp - (tracking_comp * 0.003); flashy_led = 1;}	
     166:	20 91 a2 01 	lds	r18, 0x01A2
     16a:	30 91 a3 01 	lds	r19, 0x01A3
     16e:	40 91 a4 01 	lds	r20, 0x01A4
     172:	50 91 a5 01 	lds	r21, 0x01A5
     176:	80 91 1a 01 	lds	r24, 0x011A
     17a:	90 91 1b 01 	lds	r25, 0x011B
     17e:	c8 0f       	add	r28, r24
     180:	d9 1f       	adc	r29, r25
     182:	ce 01       	movw	r24, r28
     184:	aa 27       	eor	r26, r26
     186:	97 fd       	sbrc	r25, 7
     188:	a0 95       	com	r26
     18a:	ba 2f       	mov	r27, r26
     18c:	28 17       	cp	r18, r24
     18e:	39 07       	cpc	r19, r25
     190:	4a 07       	cpc	r20, r26
     192:	5b 07       	cpc	r21, r27
     194:	24 f5       	brge	.+72     	; 0x1de <config_mode+0x138>
     196:	e0 90 3c 01 	lds	r14, 0x013C
     19a:	f0 90 3d 01 	lds	r15, 0x013D
     19e:	00 91 3e 01 	lds	r16, 0x013E
     1a2:	10 91 3f 01 	lds	r17, 0x013F
     1a6:	c8 01       	movw	r24, r16
     1a8:	b7 01       	movw	r22, r14
     1aa:	26 ea       	ldi	r18, 0xA6	; 166
     1ac:	3b e9       	ldi	r19, 0x9B	; 155
     1ae:	44 e4       	ldi	r20, 0x44	; 68
     1b0:	5b eb       	ldi	r21, 0xBB	; 187
     1b2:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
     1c2:	60 93 3c 01 	sts	0x013C, r22
     1c6:	70 93 3d 01 	sts	0x013D, r23
     1ca:	80 93 3e 01 	sts	0x013E, r24
     1ce:	90 93 3f 01 	sts	0x013F, r25
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 b9 01 	sts	0x01B9, r25
     1da:	80 93 b8 01 	sts	0x01B8, r24

		if (tracking_comp < 0.1) tracking_comp = 0.1;
     1de:	60 91 3c 01 	lds	r22, 0x013C
     1e2:	70 91 3d 01 	lds	r23, 0x013D
     1e6:	80 91 3e 01 	lds	r24, 0x013E
     1ea:	90 91 3f 01 	lds	r25, 0x013F
     1ee:	2d ec       	ldi	r18, 0xCD	; 205
     1f0:	3c ec       	ldi	r19, 0xCC	; 204
     1f2:	4c ec       	ldi	r20, 0xCC	; 204
     1f4:	5d e3       	ldi	r21, 0x3D	; 61
     1f6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	64 f4       	brge	.+24     	; 0x216 <config_mode+0x170>
     1fe:	8d ec       	ldi	r24, 0xCD	; 205
     200:	9c ec       	ldi	r25, 0xCC	; 204
     202:	ac ec       	ldi	r26, 0xCC	; 204
     204:	bd e3       	ldi	r27, 0x3D	; 61
     206:	80 93 3c 01 	sts	0x013C, r24
     20a:	90 93 3d 01 	sts	0x013D, r25
     20e:	a0 93 3e 01 	sts	0x013E, r26
     212:	b0 93 3f 01 	sts	0x013F, r27
		if (tracking_comp > 10) tracking_comp = 10;
     216:	60 91 3c 01 	lds	r22, 0x013C
     21a:	70 91 3d 01 	lds	r23, 0x013D
     21e:	80 91 3e 01 	lds	r24, 0x013E
     222:	90 91 3f 01 	lds	r25, 0x013F
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e2       	ldi	r20, 0x20	; 32
     22c:	51 e4       	ldi	r21, 0x41	; 65
     22e:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     232:	18 16       	cp	r1, r24
     234:	64 f4       	brge	.+24     	; 0x24e <config_mode+0x1a8>
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e2       	ldi	r26, 0x20	; 32
     23c:	b1 e4       	ldi	r27, 0x41	; 65
     23e:	80 93 3c 01 	sts	0x013C, r24
     242:	90 93 3d 01 	sts	0x013D, r25
     246:	a0 93 3e 01 	sts	0x013E, r26
     24a:	b0 93 3f 01 	sts	0x013F, r27
	}	


	//heading adjustment code (when throttle is between 50% and 90%)
	if (config_mode_throttle_copy >= 50 && config_mode_throttle_copy < 90)
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 e4       	ldi	r20, 0x48	; 72
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     25e:	88 23       	and	r24, r24
     260:	0c f4       	brge	.+2      	; 0x264 <config_mode+0x1be>
     262:	b0 c0       	rjmp	.+352    	; 0x3c4 <config_mode+0x31e>
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	44 eb       	ldi	r20, 0xB4	; 180
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     274:	88 23       	and	r24, r24
     276:	0c f0       	brlt	.+2      	; 0x27a <config_mode+0x1d4>
     278:	a5 c0       	rjmp	.+330    	; 0x3c4 <config_mode+0x31e>
	{
		
		flashy_led = 1;				//pulse the LED to indicate we're in heading adjustment
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 b9 01 	sts	0x01B9, r25
     282:	80 93 b8 01 	sts	0x01B8, r24
		if ( leftright > (heading_center + heading_leftthresh) ) {led_adjust = led_adjust + 1; flashy_led = 0;}   //flashing gets turned back off to indicate change
     286:	20 91 a2 01 	lds	r18, 0x01A2
     28a:	30 91 a3 01 	lds	r19, 0x01A3
     28e:	40 91 a4 01 	lds	r20, 0x01A4
     292:	50 91 a5 01 	lds	r21, 0x01A5
     296:	c0 91 16 01 	lds	r28, 0x0116
     29a:	d0 91 17 01 	lds	r29, 0x0117
     29e:	80 91 18 01 	lds	r24, 0x0118
     2a2:	90 91 19 01 	lds	r25, 0x0119
     2a6:	8c 0f       	add	r24, r28
     2a8:	9d 1f       	adc	r25, r29
     2aa:	aa 27       	eor	r26, r26
     2ac:	97 fd       	sbrc	r25, 7
     2ae:	a0 95       	com	r26
     2b0:	ba 2f       	mov	r27, r26
     2b2:	82 17       	cp	r24, r18
     2b4:	93 07       	cpc	r25, r19
     2b6:	a4 07       	cpc	r26, r20
     2b8:	b5 07       	cpc	r27, r21
     2ba:	d4 f4       	brge	.+52     	; 0x2f0 <config_mode+0x24a>
     2bc:	60 91 40 01 	lds	r22, 0x0140
     2c0:	70 91 41 01 	lds	r23, 0x0141
     2c4:	80 91 42 01 	lds	r24, 0x0142
     2c8:	90 91 43 01 	lds	r25, 0x0143
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
     2d8:	60 93 40 01 	sts	0x0140, r22
     2dc:	70 93 41 01 	sts	0x0141, r23
     2e0:	80 93 42 01 	sts	0x0142, r24
     2e4:	90 93 43 01 	sts	0x0143, r25
     2e8:	10 92 b9 01 	sts	0x01B9, r1
     2ec:	10 92 b8 01 	sts	0x01B8, r1
		if ( leftright < (heading_center + heading_rightthresh) ) {led_adjust = led_adjust - 1; flashy_led = 0;}
     2f0:	20 91 a2 01 	lds	r18, 0x01A2
     2f4:	30 91 a3 01 	lds	r19, 0x01A3
     2f8:	40 91 a4 01 	lds	r20, 0x01A4
     2fc:	50 91 a5 01 	lds	r21, 0x01A5
     300:	80 91 1a 01 	lds	r24, 0x011A
     304:	90 91 1b 01 	lds	r25, 0x011B
     308:	c8 0f       	add	r28, r24
     30a:	d9 1f       	adc	r29, r25
     30c:	ce 01       	movw	r24, r28
     30e:	aa 27       	eor	r26, r26
     310:	97 fd       	sbrc	r25, 7
     312:	a0 95       	com	r26
     314:	ba 2f       	mov	r27, r26
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	4a 07       	cpc	r20, r26
     31c:	5b 07       	cpc	r21, r27
     31e:	d4 f4       	brge	.+52     	; 0x354 <config_mode+0x2ae>
     320:	60 91 40 01 	lds	r22, 0x0140
     324:	70 91 41 01 	lds	r23, 0x0141
     328:	80 91 42 01 	lds	r24, 0x0142
     32c:	90 91 43 01 	lds	r25, 0x0143
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
     33c:	60 93 40 01 	sts	0x0140, r22
     340:	70 93 41 01 	sts	0x0141, r23
     344:	80 93 42 01 	sts	0x0142, r24
     348:	90 93 43 01 	sts	0x0143, r25
     34c:	10 92 b9 01 	sts	0x01B9, r1
     350:	10 92 b8 01 	sts	0x01B8, r1

		if (led_adjust < 0) led_adjust = 100;
     354:	60 91 40 01 	lds	r22, 0x0140
     358:	70 91 41 01 	lds	r23, 0x0141
     35c:	80 91 42 01 	lds	r24, 0x0142
     360:	90 91 43 01 	lds	r25, 0x0143
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     370:	88 23       	and	r24, r24
     372:	64 f4       	brge	.+24     	; 0x38c <config_mode+0x2e6>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a8 ec       	ldi	r26, 0xC8	; 200
     37a:	b2 e4       	ldi	r27, 0x42	; 66
     37c:	80 93 40 01 	sts	0x0140, r24
     380:	90 93 41 01 	sts	0x0141, r25
     384:	a0 93 42 01 	sts	0x0142, r26
     388:	b0 93 43 01 	sts	0x0143, r27
		if (led_adjust > 100) led_adjust = 0;
     38c:	60 91 40 01 	lds	r22, 0x0140
     390:	70 91 41 01 	lds	r23, 0x0141
     394:	80 91 42 01 	lds	r24, 0x0142
     398:	90 91 43 01 	lds	r25, 0x0143
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	48 ec       	ldi	r20, 0xC8	; 200
     3a2:	52 e4       	ldi	r21, 0x42	; 66
     3a4:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	64 f4       	brge	.+24     	; 0x3c4 <config_mode+0x31e>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 40 01 	sts	0x0140, r24
     3b8:	90 93 41 01 	sts	0x0141, r25
     3bc:	a0 93 42 01 	sts	0x0142, r26
     3c0:	b0 93 43 01 	sts	0x0143, r27
	}	
	
	//if we're above 90% throttle - the bot is effectively in normal drive mode - with throttle locked at 50%


}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	08 95       	ret

000003da <motor2_on>:
}


void motor2_on(void)
{
	if (use_pwm_esc == 0)
     3da:	80 91 04 01 	lds	r24, 0x0104
     3de:	90 91 05 01 	lds	r25, 0x0105
     3e2:	89 2b       	or	r24, r25
     3e4:	11 f4       	brne	.+4      	; 0x3ea <motor2_on+0x10>
	{
		set_motor1_pin_off();
     3e6:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_on();
     3e8:	5c 9a       	sbi	0x0b, 4	; 11
     3ea:	08 95       	ret

000003ec <update_motor_pwm>:
{
		


	//only take updates at beginning of cycle
	if (TCNT2 < 40)
     3ec:	80 91 b2 00 	lds	r24, 0x00B2
     3f0:	88 32       	cpi	r24, 0x28	; 40
     3f2:	80 f4       	brcc	.+32     	; 0x414 <update_motor_pwm+0x28>
	{
		actual_motor1_current_pwm = motor1_current_pwm;
     3f4:	80 91 d8 01 	lds	r24, 0x01D8
     3f8:	90 91 d9 01 	lds	r25, 0x01D9
     3fc:	90 93 a1 01 	sts	0x01A1, r25
     400:	80 93 a0 01 	sts	0x01A0, r24
		actual_motor2_current_pwm = motor2_current_pwm;
     404:	80 91 ae 01 	lds	r24, 0x01AE
     408:	90 91 af 01 	lds	r25, 0x01AF
     40c:	90 93 93 01 	sts	0x0193, r25
     410:	80 93 92 01 	sts	0x0192, r24
	}

	if (TCNT2 < (actual_motor1_current_pwm + 40) && TCNT2 > 40)
     414:	20 91 b2 00 	lds	r18, 0x00B2
     418:	80 91 a0 01 	lds	r24, 0x01A0
     41c:	90 91 a1 01 	lds	r25, 0x01A1
     420:	87 96       	adiw	r24, 0x27	; 39
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	82 17       	cp	r24, r18
     426:	93 07       	cpc	r25, r19
     428:	34 f0       	brlt	.+12     	; 0x436 <update_motor_pwm+0x4a>
     42a:	80 91 b2 00 	lds	r24, 0x00B2
     42e:	89 32       	cpi	r24, 0x29	; 41
     430:	10 f0       	brcs	.+4      	; 0x436 <update_motor_pwm+0x4a>
	{
		set_motor1_pin_on();
     432:	5a 9a       	sbi	0x0b, 2	; 11
     434:	01 c0       	rjmp	.+2      	; 0x438 <update_motor_pwm+0x4c>
	}
	else
	{
		set_motor1_pin_off();
     436:	5a 98       	cbi	0x0b, 2	; 11
	}

	
	if (TCNT2 < (actual_motor2_current_pwm + 40) && TCNT2 > 40)
     438:	20 91 b2 00 	lds	r18, 0x00B2
     43c:	80 91 92 01 	lds	r24, 0x0192
     440:	90 91 93 01 	lds	r25, 0x0193
     444:	87 96       	adiw	r24, 0x27	; 39
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	82 17       	cp	r24, r18
     44a:	93 07       	cpc	r25, r19
     44c:	34 f0       	brlt	.+12     	; 0x45a <update_motor_pwm+0x6e>
     44e:	80 91 b2 00 	lds	r24, 0x00B2
     452:	89 32       	cpi	r24, 0x29	; 41
     454:	10 f0       	brcs	.+4      	; 0x45a <update_motor_pwm+0x6e>
	{
		set_motor2_pin_on();
     456:	5c 9a       	sbi	0x0b, 4	; 11
     458:	08 95       	ret
	}
	else
	{
		set_motor2_pin_off();
     45a:	5c 98       	cbi	0x0b, 4	; 11
     45c:	08 95       	ret

0000045e <motor1_on>:


void motor1_on(void)
{
	
	if (use_pwm_esc == 0)
     45e:	80 91 04 01 	lds	r24, 0x0104
     462:	90 91 05 01 	lds	r25, 0x0105
     466:	89 2b       	or	r24, r25
     468:	19 f4       	brne	.+6      	; 0x470 <motor1_on+0x12>
	{
		set_motor1_pin_on();
     46a:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_off();
     46c:	5c 98       	cbi	0x0b, 4	; 11
     46e:	08 95       	ret
	}
	else		//pwm code
	{
		
		motor1_current_pwm = pwm_throttle_high;
     470:	80 91 0a 01 	lds	r24, 0x010A
     474:	90 91 0b 01 	lds	r25, 0x010B
     478:	90 93 d9 01 	sts	0x01D9, r25
     47c:	80 93 d8 01 	sts	0x01D8, r24
		motor2_current_pwm = pwm_throttle_low;
     480:	80 91 08 01 	lds	r24, 0x0108
     484:	90 91 09 01 	lds	r25, 0x0109
     488:	90 93 af 01 	sts	0x01AF, r25
     48c:	80 93 ae 01 	sts	0x01AE, r24
		update_motor_pwm();
     490:	0e 94 f6 01 	call	0x3ec	; 0x3ec <update_motor_pwm>
     494:	08 95       	ret

00000496 <motors_left>:
}


void motors_left(void)
{
	if (use_pwm_esc == 0)
     496:	80 91 04 01 	lds	r24, 0x0104
     49a:	90 91 05 01 	lds	r25, 0x0105
     49e:	89 2b       	or	r24, r25
     4a0:	19 f4       	brne	.+6      	; 0x4a8 <motors_left+0x12>
	{
		set_motor1_pin_on();
     4a2:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_on();
     4a4:	5c 9a       	sbi	0x0b, 4	; 11
     4a6:	08 95       	ret
	}
	else		//pwm code
	{
		motor1_current_pwm = pwm_throttle_high;
     4a8:	80 91 0a 01 	lds	r24, 0x010A
     4ac:	90 91 0b 01 	lds	r25, 0x010B
     4b0:	90 93 d9 01 	sts	0x01D9, r25
     4b4:	80 93 d8 01 	sts	0x01D8, r24
		motor2_current_pwm = pwm_throttle_high;
     4b8:	90 93 af 01 	sts	0x01AF, r25
     4bc:	80 93 ae 01 	sts	0x01AE, r24
		update_motor_pwm();
     4c0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <update_motor_pwm>
     4c4:	08 95       	ret

000004c6 <motors_off>:
}

//this code turns off power to motor but doesn't brake (for when spinning)
void motors_off(void)
{
	if (use_pwm_esc == 0)
     4c6:	80 91 04 01 	lds	r24, 0x0104
     4ca:	90 91 05 01 	lds	r25, 0x0105
     4ce:	89 2b       	or	r24, r25
     4d0:	19 f4       	brne	.+6      	; 0x4d8 <motors_off+0x12>
	{
		set_motor1_pin_off();
     4d2:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     4d4:	5c 98       	cbi	0x0b, 4	; 11
     4d6:	08 95       	ret
	}
	else		//pwm code
	{
		motor1_current_pwm = pwm_throttle_low;
     4d8:	80 91 08 01 	lds	r24, 0x0108
     4dc:	90 91 09 01 	lds	r25, 0x0109
     4e0:	90 93 d9 01 	sts	0x01D9, r25
     4e4:	80 93 d8 01 	sts	0x01D8, r24
		motor2_current_pwm = pwm_throttle_low;
     4e8:	90 93 af 01 	sts	0x01AF, r25
     4ec:	80 93 ae 01 	sts	0x01AE, r24
		update_motor_pwm();
     4f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <update_motor_pwm>
     4f4:	08 95       	ret

000004f6 <do_spin_180>:
}


	
void do_spin_180(int spin_cycle)
{	
     4f6:	4f 92       	push	r4
     4f8:	5f 92       	push	r5
     4fa:	6f 92       	push	r6
     4fc:	7f 92       	push	r7
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24

	led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops
     518:	60 91 84 00 	lds	r22, 0x0084
     51c:	70 91 85 00 	lds	r23, 0x0085
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	20 91 78 01 	lds	r18, 0x0178
     528:	30 91 79 01 	lds	r19, 0x0179
     52c:	40 91 7a 01 	lds	r20, 0x017A
     530:	50 91 7b 01 	lds	r21, 0x017B
     534:	62 0f       	add	r22, r18
     536:	73 1f       	adc	r23, r19
     538:	84 1f       	adc	r24, r20
     53a:	95 1f       	adc	r25, r21
     53c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     540:	60 93 82 01 	sts	0x0182, r22
     544:	70 93 83 01 	sts	0x0183, r23
     548:	80 93 84 01 	sts	0x0184, r24
     54c:	90 93 85 01 	sts	0x0185, r25
		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
		{
			led_is_on_now = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	48 2e       	mov	r4, r24
     554:	51 2c       	mov	r5, r1
     556:	4c c1       	rjmp	.+664    	; 0x7f0 <__stack+0x2f1>
	while (TCNT1 < half_spin_time)
	{
	

		//if throttle is less that 100% - kill power at appropriate time
		if (( TCNT1 < power_kill_part1 ) || ( TCNT1 > power_kill_part2 ))
     558:	60 91 84 00 	lds	r22, 0x0084
     55c:	70 91 85 00 	lds	r23, 0x0085
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     568:	20 91 94 01 	lds	r18, 0x0194
     56c:	30 91 95 01 	lds	r19, 0x0195
     570:	40 91 96 01 	lds	r20, 0x0196
     574:	50 91 97 01 	lds	r21, 0x0197
     578:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     57c:	87 fd       	sbrc	r24, 7
     57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__stack+0xa9>
     580:	60 91 84 00 	lds	r22, 0x0084
     584:	70 91 85 00 	lds	r23, 0x0085
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     590:	20 91 8a 01 	lds	r18, 0x018A
     594:	30 91 8b 01 	lds	r19, 0x018B
     598:	40 91 8c 01 	lds	r20, 0x018C
     59c:	50 91 8d 01 	lds	r21, 0x018D
     5a0:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	1c f4       	brge	.+6      	; 0x5ae <__stack+0xaf>
		{
			motors_off();            
     5a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <motors_off>
     5ac:	9d c0       	rjmp	.+314    	; 0x6e8 <__stack+0x1e9>
		}
		
		else		
		{
			//full power if we haven't entered or are after braking
			if ((TCNT1 < begin_brake) || (TCNT1 > end_brake))
     5ae:	60 91 84 00 	lds	r22, 0x0084
     5b2:	70 91 85 00 	lds	r23, 0x0085
     5b6:	a0 90 dc 01 	lds	r10, 0x01DC
     5ba:	b0 90 dd 01 	lds	r11, 0x01DD
     5be:	c0 90 de 01 	lds	r12, 0x01DE
     5c2:	d0 90 df 01 	lds	r13, 0x01DF
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     5ce:	a6 01       	movw	r20, r12
     5d0:	95 01       	movw	r18, r10
     5d2:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     5d6:	87 fd       	sbrc	r24, 7
     5d8:	16 c0       	rjmp	.+44     	; 0x606 <__stack+0x107>
     5da:	60 91 84 00 	lds	r22, 0x0084
     5de:	70 91 85 00 	lds	r23, 0x0085
     5e2:	e0 90 a6 01 	lds	r14, 0x01A6
     5e6:	f0 90 a7 01 	lds	r15, 0x01A7
     5ea:	00 91 a8 01 	lds	r16, 0x01A8
     5ee:	10 91 a9 01 	lds	r17, 0x01A9
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     5fa:	a8 01       	movw	r20, r16
     5fc:	97 01       	movw	r18, r14
     5fe:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	1c f4       	brge	.+6      	; 0x60c <__stack+0x10d>
			{
				motors_left();
     606:	0e 94 4b 02 	call	0x496	; 0x496 <motors_left>
     60a:	6e c0       	rjmp	.+220    	; 0x6e8 <__stack+0x1e9>
			}
			
			else
			{

				if ( TCNT1 > begin_brake && TCNT1 < end_brake )         //switch to single motor as soon as entering braking cycle
     60c:	60 91 84 00 	lds	r22, 0x0084
     610:	70 91 85 00 	lds	r23, 0x0085
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     61c:	a6 01       	movw	r20, r12
     61e:	95 01       	movw	r18, r10
     620:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     624:	18 16       	cp	r1, r24
     626:	0c f0       	brlt	.+2      	; 0x62a <__stack+0x12b>
     628:	5f c0       	rjmp	.+190    	; 0x6e8 <__stack+0x1e9>
     62a:	60 91 84 00 	lds	r22, 0x0084
     62e:	70 91 85 00 	lds	r23, 0x0085
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     63a:	a8 01       	movw	r20, r16
     63c:	97 01       	movw	r18, r14
     63e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     642:	88 23       	and	r24, r24
     644:	0c f0       	brlt	.+2      	; 0x648 <__stack+0x149>
     646:	50 c0       	rjmp	.+160    	; 0x6e8 <__stack+0x1e9>
				{
					//if sitting still
					if ( forward == 0 && backward == 0 )
     648:	80 91 b6 01 	lds	r24, 0x01B6
     64c:	90 91 b7 01 	lds	r25, 0x01B7
     650:	89 2b       	or	r24, r25
     652:	41 f5       	brne	.+80     	; 0x6a4 <__stack+0x1a5>
     654:	80 91 c6 01 	lds	r24, 0x01C6
     658:	90 91 c7 01 	lds	r25, 0x01C7
     65c:	89 2b       	or	r24, r25
     65e:	11 f5       	brne	.+68     	; 0x6a4 <__stack+0x1a5>
					{
						if ( alternate_motor_cycle == 0 )  //alternates which motor is used each cycle if sitting still
     660:	80 91 4a 01 	lds	r24, 0x014A
     664:	90 91 4b 01 	lds	r25, 0x014B
     668:	89 2b       	or	r24, r25
     66a:	59 f4       	brne	.+22     	; 0x682 <__stack+0x183>
						{	
							if (spin_cycle == 1) motor1_on();
     66c:	c1 30       	cpi	r28, 0x01	; 1
     66e:	d1 05       	cpc	r29, r1
     670:	19 f4       	brne	.+6      	; 0x678 <__stack+0x179>
     672:	0e 94 2f 02 	call	0x45e	; 0x45e <motor1_on>
     676:	05 c0       	rjmp	.+10     	; 0x682 <__stack+0x183>
							if (spin_cycle == 2) motor2_on();
     678:	c2 30       	cpi	r28, 0x02	; 2
     67a:	d1 05       	cpc	r29, r1
     67c:	11 f4       	brne	.+4      	; 0x682 <__stack+0x183>
     67e:	0e 94 ed 01 	call	0x3da	; 0x3da <motor2_on>
						}

						if ( alternate_motor_cycle == 1 )
     682:	80 91 4a 01 	lds	r24, 0x014A
     686:	90 91 4b 01 	lds	r25, 0x014B
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	59 f4       	brne	.+22     	; 0x6a4 <__stack+0x1a5>
						{	
							if (spin_cycle == 1) motor2_on();
     68e:	c1 30       	cpi	r28, 0x01	; 1
     690:	d1 05       	cpc	r29, r1
     692:	19 f4       	brne	.+6      	; 0x69a <__stack+0x19b>
     694:	0e 94 ed 01 	call	0x3da	; 0x3da <motor2_on>
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <__stack+0x1a5>
							if (spin_cycle == 2) motor1_on();
     69a:	c2 30       	cpi	r28, 0x02	; 2
     69c:	d1 05       	cpc	r29, r1
     69e:	11 f4       	brne	.+4      	; 0x6a4 <__stack+0x1a5>
     6a0:	0e 94 2f 02 	call	0x45e	; 0x45e <motor1_on>
						}

					}

					//if ( going forward / back set motors appropriately (this is "where it happens")
					if ( forward == 1)
     6a4:	80 91 b6 01 	lds	r24, 0x01B6
     6a8:	90 91 b7 01 	lds	r25, 0x01B7
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	59 f4       	brne	.+22     	; 0x6c6 <__stack+0x1c7>
					{	
						if (spin_cycle == 1) motor1_on();
     6b0:	c1 30       	cpi	r28, 0x01	; 1
     6b2:	d1 05       	cpc	r29, r1
     6b4:	19 f4       	brne	.+6      	; 0x6bc <__stack+0x1bd>
     6b6:	0e 94 2f 02 	call	0x45e	; 0x45e <motor1_on>
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <__stack+0x1c7>
						if (spin_cycle == 2) motor2_on();
     6bc:	c2 30       	cpi	r28, 0x02	; 2
     6be:	d1 05       	cpc	r29, r1
     6c0:	11 f4       	brne	.+4      	; 0x6c6 <__stack+0x1c7>
     6c2:	0e 94 ed 01 	call	0x3da	; 0x3da <motor2_on>
					}

					if ( backward == 1)
     6c6:	80 91 c6 01 	lds	r24, 0x01C6
     6ca:	90 91 c7 01 	lds	r25, 0x01C7
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	59 f4       	brne	.+22     	; 0x6e8 <__stack+0x1e9>
					{	
						if (spin_cycle == 1) motor2_on();
     6d2:	c1 30       	cpi	r28, 0x01	; 1
     6d4:	d1 05       	cpc	r29, r1
     6d6:	19 f4       	brne	.+6      	; 0x6de <__stack+0x1df>
     6d8:	0e 94 ed 01 	call	0x3da	; 0x3da <motor2_on>
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__stack+0x1e9>
						if (spin_cycle == 2) motor1_on();
     6de:	c2 30       	cpi	r28, 0x02	; 2
     6e0:	d1 05       	cpc	r29, r1
     6e2:	11 f4       	brne	.+4      	; 0x6e8 <__stack+0x1e9>
     6e4:	0e 94 2f 02 	call	0x45e	; 0x45e <motor1_on>
		}

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     6e8:	a0 90 aa 01 	lds	r10, 0x01AA
     6ec:	b0 90 ab 01 	lds	r11, 0x01AB
     6f0:	c0 90 ac 01 	lds	r12, 0x01AC
     6f4:	d0 90 ad 01 	lds	r13, 0x01AD
     6f8:	60 90 ca 01 	lds	r6, 0x01CA
     6fc:	70 90 cb 01 	lds	r7, 0x01CB
     700:	80 90 cc 01 	lds	r8, 0x01CC
     704:	90 90 cd 01 	lds	r9, 0x01CD
     708:	c6 01       	movw	r24, r12
     70a:	b5 01       	movw	r22, r10
     70c:	a4 01       	movw	r20, r8
     70e:	93 01       	movw	r18, r6
     710:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     714:	18 16       	cp	r1, r24
     716:	24 f5       	brge	.+72     	; 0x760 <__stack+0x261>
		{
			led_is_on_now = 1;
     718:	50 92 81 01 	sts	0x0181, r5
     71c:	40 92 80 01 	sts	0x0180, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     720:	e0 90 82 01 	lds	r14, 0x0182
     724:	f0 90 83 01 	lds	r15, 0x0183
     728:	00 91 84 01 	lds	r16, 0x0184
     72c:	10 91 85 01 	lds	r17, 0x0185
     730:	c8 01       	movw	r24, r16
     732:	b7 01       	movw	r22, r14
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     73c:	18 16       	cp	r1, r24
     73e:	24 f4       	brge	.+8      	; 0x748 <__stack+0x249>
     740:	10 92 81 01 	sts	0x0181, r1
     744:	10 92 80 01 	sts	0x0180, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     748:	c8 01       	movw	r24, r16
     74a:	b7 01       	movw	r22, r14
     74c:	a6 01       	movw	r20, r12
     74e:	95 01       	movw	r18, r10
     750:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     754:	18 16       	cp	r1, r24
     756:	24 f4       	brge	.+8      	; 0x760 <__stack+0x261>
     758:	50 92 81 01 	sts	0x0181, r5
     75c:	40 92 80 01 	sts	0x0180, r4
		}


		if (led_off > led_on)
     760:	c4 01       	movw	r24, r8
     762:	b3 01       	movw	r22, r6
     764:	a6 01       	movw	r20, r12
     766:	95 01       	movw	r18, r10
     768:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     76c:	18 16       	cp	r1, r24
     76e:	24 f5       	brge	.+72     	; 0x7b8 <__stack+0x2b9>
		{
		
			led_is_on_now = 0;
     770:	10 92 81 01 	sts	0x0181, r1
     774:	10 92 80 01 	sts	0x0180, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     778:	e0 90 82 01 	lds	r14, 0x0182
     77c:	f0 90 83 01 	lds	r15, 0x0183
     780:	00 91 84 01 	lds	r16, 0x0184
     784:	10 91 85 01 	lds	r17, 0x0185
     788:	c8 01       	movw	r24, r16
     78a:	b7 01       	movw	r22, r14
     78c:	a6 01       	movw	r20, r12
     78e:	95 01       	movw	r18, r10
     790:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	24 f4       	brge	.+8      	; 0x7a0 <__stack+0x2a1>
     798:	50 92 81 01 	sts	0x0181, r5
     79c:	40 92 80 01 	sts	0x0180, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     7a0:	c8 01       	movw	r24, r16
     7a2:	b7 01       	movw	r22, r14
     7a4:	a4 01       	movw	r20, r8
     7a6:	93 01       	movw	r18, r6
     7a8:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
     7ac:	18 16       	cp	r1, r24
     7ae:	24 f4       	brge	.+8      	; 0x7b8 <__stack+0x2b9>
     7b0:	10 92 81 01 	sts	0x0181, r1
     7b4:	10 92 80 01 	sts	0x0180, r1
		
		}
	
	
		if ( led_is_on_now == 1 )
     7b8:	80 91 80 01 	lds	r24, 0x0180
     7bc:	90 91 81 01 	lds	r25, 0x0181
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	91 05       	cpc	r25, r1
     7c4:	91 f4       	brne	.+36     	; 0x7ea <__stack+0x2eb>
		{
			//flash the LED if we're in flashy mode - otherwise it's just on
			if ( flashy_led == 1 )
     7c6:	80 91 b8 01 	lds	r24, 0x01B8
     7ca:	90 91 b9 01 	lds	r25, 0x01B9
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	51 f4       	brne	.+20     	; 0x7e6 <__stack+0x2e7>
			{
				
				if ((TCNT1 / 160) % 2 == 0) set_led_on(); else set_led_off();
     7d2:	80 91 84 00 	lds	r24, 0x0084
     7d6:	90 91 85 00 	lds	r25, 0x0085
     7da:	60 ea       	ldi	r22, 0xA0	; 160
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__udivmodhi4>
     7e2:	60 fd       	sbrc	r22, 0
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__stack+0x2ef>
			}
			else
			{
				set_led_on();
     7e6:	5d 9a       	sbi	0x0b, 5	; 11
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <__stack+0x2f1>
			}
		}

		if ( led_is_on_now == 0 )
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <__stack+0x2f1>
		{
			set_led_off();
     7ee:	5d 98       	cbi	0x0b, 5	; 11
void do_spin_180(int spin_cycle)
{	

	led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops

	while (TCNT1 < half_spin_time)
     7f0:	60 91 84 00 	lds	r22, 0x0084
     7f4:	70 91 85 00 	lds	r23, 0x0085
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     800:	20 91 9c 01 	lds	r18, 0x019C
     804:	30 91 9d 01 	lds	r19, 0x019D
     808:	40 91 9e 01 	lds	r20, 0x019E
     80c:	50 91 9f 01 	lds	r21, 0x019F
     810:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
     814:	87 fd       	sbrc	r24, 7
     816:	a0 ce       	rjmp	.-704    	; 0x558 <__stack+0x59>
		
	//update_motor_pwm();
	
	}
	
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	08 95       	ret

0000083a <motors_full_stop>:


//this code full stops motors - and brakes if using PWM and braking is setup (for stopping bot)
void motors_full_stop(void)
{
	if (use_pwm_esc == 0)
     83a:	80 91 04 01 	lds	r24, 0x0104
     83e:	90 91 05 01 	lds	r25, 0x0105
     842:	89 2b       	or	r24, r25
     844:	19 f4       	brne	.+6      	; 0x84c <motors_full_stop+0x12>
	{
		set_motor1_pin_off();
     846:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     848:	5c 98       	cbi	0x0b, 4	; 11
     84a:	08 95       	ret
	}
	else	//pwm code
	{
		motor1_current_pwm = pwm_throttle_brake;
     84c:	80 91 06 01 	lds	r24, 0x0106
     850:	90 91 07 01 	lds	r25, 0x0107
     854:	90 93 d9 01 	sts	0x01D9, r25
     858:	80 93 d8 01 	sts	0x01D8, r24
		motor2_current_pwm = pwm_throttle_brake;
     85c:	90 93 af 01 	sts	0x01AF, r25
     860:	80 93 ae 01 	sts	0x01AE, r24
		update_motor_pwm();
     864:	0e 94 f6 01 	call	0x3ec	; 0x3ec <update_motor_pwm>
     868:	08 95       	ret

0000086a <delay_ms_with_pwm>:
}

//delay in milliseconds with PWM updates 
//really just used for when bot is idle
void delay_ms_with_pwm(int ms)
{
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	for (int loop = 0; loop < (ms * 25); loop ++)
     876:	29 e1       	ldi	r18, 0x19	; 25
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	82 9f       	mul	r24, r18
     87c:	80 01       	movw	r16, r0
     87e:	83 9f       	mul	r24, r19
     880:	10 0d       	add	r17, r0
     882:	92 9f       	mul	r25, r18
     884:	10 0d       	add	r17, r0
     886:	11 24       	eor	r1, r1
     888:	c0 e0       	ldi	r28, 0x00	; 0
     88a:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     88c:	98 ec       	ldi	r25, 0xC8	; 200
     88e:	e9 2e       	mov	r14, r25
     890:	f1 2c       	mov	r15, r1
     892:	0c c0       	rjmp	.+24     	; 0x8ac <delay_ms_with_pwm+0x42>
	{
		if (use_pwm_esc == 1) update_motor_pwm();
     894:	80 91 04 01 	lds	r24, 0x0104
     898:	90 91 05 01 	lds	r25, 0x0105
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	11 f4       	brne	.+4      	; 0x8a4 <delay_ms_with_pwm+0x3a>
     8a0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <update_motor_pwm>
     8a4:	c7 01       	movw	r24, r14
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <delay_ms_with_pwm+0x3c>

//delay in milliseconds with PWM updates 
//really just used for when bot is idle
void delay_ms_with_pwm(int ms)
{
	for (int loop = 0; loop < (ms * 25); loop ++)
     8aa:	21 96       	adiw	r28, 0x01	; 1
     8ac:	c0 17       	cp	r28, r16
     8ae:	d1 07       	cpc	r29, r17
     8b0:	8c f3       	brlt	.-30     	; 0x894 <delay_ms_with_pwm+0x2a>
	{
		if (use_pwm_esc == 1) update_motor_pwm();
		_delay_us(40);
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <setup>:


//sets up all the pins and interrupts
void setup(void)

{
     8c0:	1f 93       	push	r17
void adc_init(void)

{
 
  	// Free running Mode
	ADCSRB = 0x00;
     8c2:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     8c6:	86 e8       	ldi	r24, 0x86	; 134
     8c8:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	80 93 7c 00 	sts	0x007C, r24

{

	adc_init();		//init the ADC...

	set_throttle_pin_as_input();
     8d2:	20 98       	cbi	0x04, 0	; 4
	set_leftright_pin_as_input();  
     8d4:	21 98       	cbi	0x04, 1	; 4
	set_forwardback_pin_as_input();
     8d6:	22 98       	cbi	0x04, 2	; 4
  
	set_accel_data_pin_as_input();
     8d8:	3c 98       	cbi	0x07, 4	; 7
	
	set_accelpower_pin_as_output();
     8da:	50 9a       	sbi	0x0a, 0	; 10
	set_accelpower_pin_on();								//turn on power for accel (accel is connected to chip for power)
     8dc:	58 9a       	sbi	0x0b, 0	; 11


	
	set_led_pin_as_output();
     8de:	55 9a       	sbi	0x0a, 5	; 10

	set_motor1_pin_as_output();
     8e0:	52 9a       	sbi	0x0a, 2	; 10
	set_motor2_pin_as_output();
     8e2:	54 9a       	sbi	0x0a, 4	; 10
	
	set_led_on();						                    //turn on signal LED before timers so it comes on immediately
     8e4:	5d 9a       	sbi	0x0b, 5	; 11
	

	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	80 93 6b 00 	sts	0x006B, r24
	PCICR = 1<<PCIE0; 
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 68 00 	sts	0x0068, r24


void SetupTimer1(void)
{

	TCCR1A = 0;                               //mode = 0
     8f2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	80 93 81 00 	sts	0x0081, r24
	PCMSK0 = 0xFF;
	PCICR = 1<<PCIE0; 
	  
	SetupTimer1();   //fire up timer1 (2 bytes) - accessed via TCNT1 variable

	motors_full_stop();   //make sure those motors are off...
     8fc:	0e 94 1d 04 	call	0x83a	; 0x83a <motors_full_stop>


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	80 93 74 01 	sts	0x0174, r24
     90c:	90 93 75 01 	sts	0x0175, r25
     910:	a0 93 76 01 	sts	0x0176, r26
     914:	b0 93 77 01 	sts	0x0177, r27
	{
		toggle_led();
     918:	10 e2       	ldi	r17, 0x20	; 32
     91a:	1a c0       	rjmp	.+52     	; 0x950 <setup+0x90>
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	81 27       	eor	r24, r17
     920:	8b b9       	out	0x0b, r24	; 11
		delay_ms_with_pwm(1);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>

	motors_full_stop();   //make sure those motors are off...


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
     92a:	80 91 74 01 	lds	r24, 0x0174
     92e:	90 91 75 01 	lds	r25, 0x0175
     932:	a0 91 76 01 	lds	r26, 0x0176
     936:	b0 91 77 01 	lds	r27, 0x0177
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	a1 1d       	adc	r26, r1
     93e:	b1 1d       	adc	r27, r1
     940:	80 93 74 01 	sts	0x0174, r24
     944:	90 93 75 01 	sts	0x0175, r25
     948:	a0 93 76 01 	sts	0x0176, r26
     94c:	b0 93 77 01 	sts	0x0177, r27
     950:	80 91 74 01 	lds	r24, 0x0174
     954:	90 91 75 01 	lds	r25, 0x0175
     958:	a0 91 76 01 	lds	r26, 0x0176
     95c:	b0 91 77 01 	lds	r27, 0x0177
     960:	8b 3f       	cpi	r24, 0xFB	; 251
     962:	91 05       	cpc	r25, r1
     964:	a1 05       	cpc	r26, r1
     966:	b1 05       	cpc	r27, r1
     968:	cc f2       	brlt	.-78     	; 0x91c <setup+0x5c>
		delay_ms_with_pwm(1);
	}


	//flash LED on boot (slower)
	for (x = 1; x <= 15; x++)
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e0       	ldi	r26, 0x00	; 0
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	80 93 74 01 	sts	0x0174, r24
     976:	90 93 75 01 	sts	0x0175, r25
     97a:	a0 93 76 01 	sts	0x0176, r26
     97e:	b0 93 77 01 	sts	0x0177, r27
	{
		toggle_led();
     982:	10 e2       	ldi	r17, 0x20	; 32
     984:	1a c0       	rjmp	.+52     	; 0x9ba <setup+0xfa>
     986:	8b b1       	in	r24, 0x0b	; 11
     988:	81 27       	eor	r24, r17
     98a:	8b b9       	out	0x0b, r24	; 11
		delay_ms_with_pwm(15);
     98c:	8f e0       	ldi	r24, 0x0F	; 15
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
		delay_ms_with_pwm(1);
	}


	//flash LED on boot (slower)
	for (x = 1; x <= 15; x++)
     994:	80 91 74 01 	lds	r24, 0x0174
     998:	90 91 75 01 	lds	r25, 0x0175
     99c:	a0 91 76 01 	lds	r26, 0x0176
     9a0:	b0 91 77 01 	lds	r27, 0x0177
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 74 01 	sts	0x0174, r24
     9ae:	90 93 75 01 	sts	0x0175, r25
     9b2:	a0 93 76 01 	sts	0x0176, r26
     9b6:	b0 93 77 01 	sts	0x0177, r27
     9ba:	80 91 74 01 	lds	r24, 0x0174
     9be:	90 91 75 01 	lds	r25, 0x0175
     9c2:	a0 91 76 01 	lds	r26, 0x0176
     9c6:	b0 91 77 01 	lds	r27, 0x0177
     9ca:	40 97       	sbiw	r24, 0x10	; 16
     9cc:	a1 05       	cpc	r26, r1
     9ce:	b1 05       	cpc	r27, r1
     9d0:	d4 f2       	brlt	.-76     	; 0x986 <setup+0xc6>
	{
		toggle_led();
		delay_ms_with_pwm(15);
	}

	throttle = 0;   //make sure throttle is off at boot
     9d2:	10 92 98 01 	sts	0x0198, r1
     9d6:	10 92 99 01 	sts	0x0199, r1
     9da:	10 92 9a 01 	sts	0x019A, r1
     9de:	10 92 9b 01 	sts	0x019B, r1


}
     9e2:	1f 91       	pop	r17
     9e4:	08 95       	ret

000009e6 <reset_rc>:


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     9e6:	10 92 5a 01 	sts	0x015A, r1
     9ea:	10 92 5b 01 	sts	0x015B, r1
     9ee:	10 92 5c 01 	sts	0x015C, r1
     9f2:	10 92 5d 01 	sts	0x015D, r1
	leftright_hightime = 0;
     9f6:	10 92 62 01 	sts	0x0162, r1
     9fa:	10 92 63 01 	sts	0x0163, r1
     9fe:	10 92 64 01 	sts	0x0164, r1
     a02:	10 92 65 01 	sts	0x0165, r1
	forwardback_hightime = 0;
     a06:	10 92 5e 01 	sts	0x015E, r1
     a0a:	10 92 5f 01 	sts	0x015F, r1
     a0e:	10 92 60 01 	sts	0x0160, r1
     a12:	10 92 61 01 	sts	0x0161, r1

}
     a16:	08 95       	ret

00000a18 <throttle_change>:

//updates RC channels any time specified pin goes high/low
//following 3 routines are all identical except for channels and some safety code in throttle_change (not easy to consolidate them)
void throttle_change(void)
{
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
	
	//did the pin go HIGH? - then note time
	if ( throttle_pin != 0 ) throttle_hightime = TCNT1;    
     a20:	18 9b       	sbis	0x03, 0	; 3
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <throttle_change+0x28>
     a24:	80 91 84 00 	lds	r24, 0x0084
     a28:	90 91 85 00 	lds	r25, 0x0085
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	80 93 5a 01 	sts	0x015A, r24
     a34:	90 93 5b 01 	sts	0x015B, r25
     a38:	a0 93 5c 01 	sts	0x015C, r26
     a3c:	b0 93 5d 01 	sts	0x015D, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if ( throttle_pin == 0 && throttle_hightime != 0 && TCNT1 > throttle_hightime)
     a40:	18 99       	sbic	0x03, 0	; 3
     a42:	59 c0       	rjmp	.+178    	; 0xaf6 <throttle_change+0xde>
     a44:	e0 90 5a 01 	lds	r14, 0x015A
     a48:	f0 90 5b 01 	lds	r15, 0x015B
     a4c:	00 91 5c 01 	lds	r16, 0x015C
     a50:	10 91 5d 01 	lds	r17, 0x015D
     a54:	e1 14       	cp	r14, r1
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	09 f4       	brne	.+2      	; 0xa60 <throttle_change+0x48>
     a5e:	4b c0       	rjmp	.+150    	; 0xaf6 <throttle_change+0xde>
     a60:	80 91 84 00 	lds	r24, 0x0084
     a64:	90 91 85 00 	lds	r25, 0x0085
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	f9 06       	cpc	r15, r25
     a70:	0a 07       	cpc	r16, r26
     a72:	1b 07       	cpc	r17, r27
     a74:	0c f0       	brlt	.+2      	; 0xa78 <throttle_change+0x60>
     a76:	3f c0       	rjmp	.+126    	; 0xaf6 <throttle_change+0xde>
	{		
		throttle = ((throttle * 85) + ((TCNT1 - throttle_hightime) * 15)) / 100;		//smoothed RC data
     a78:	60 91 98 01 	lds	r22, 0x0198
     a7c:	70 91 99 01 	lds	r23, 0x0199
     a80:	80 91 9a 01 	lds	r24, 0x019A
     a84:	90 91 9b 01 	lds	r25, 0x019B
     a88:	20 91 84 00 	lds	r18, 0x0084
     a8c:	30 91 85 00 	lds	r19, 0x0085
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	2e 19       	sub	r18, r14
     a96:	3f 09       	sbc	r19, r15
     a98:	40 0b       	sbc	r20, r16
     a9a:	51 0b       	sbc	r21, r17
     a9c:	79 01       	movw	r14, r18
     a9e:	8a 01       	movw	r16, r20
     aa0:	e4 e0       	ldi	r30, 0x04	; 4
     aa2:	ee 0c       	add	r14, r14
     aa4:	ff 1c       	adc	r15, r15
     aa6:	00 1f       	adc	r16, r16
     aa8:	11 1f       	adc	r17, r17
     aaa:	ea 95       	dec	r30
     aac:	d1 f7       	brne	.-12     	; 0xaa2 <throttle_change+0x8a>
     aae:	e2 1a       	sub	r14, r18
     ab0:	f3 0a       	sbc	r15, r19
     ab2:	04 0b       	sbc	r16, r20
     ab4:	15 0b       	sbc	r17, r21
     ab6:	25 e5       	ldi	r18, 0x55	; 85
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsi3>
     ac2:	e6 0e       	add	r14, r22
     ac4:	f7 1e       	adc	r15, r23
     ac6:	08 1f       	adc	r16, r24
     ac8:	19 1f       	adc	r17, r25
     aca:	c8 01       	movw	r24, r16
     acc:	b7 01       	movw	r22, r14
     ace:	24 e6       	ldi	r18, 0x64	; 100
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodsi4>
     ada:	c9 01       	movw	r24, r18
     adc:	da 01       	movw	r26, r20
     ade:	80 93 98 01 	sts	0x0198, r24
     ae2:	90 93 99 01 	sts	0x0199, r25
     ae6:	a0 93 9a 01 	sts	0x019A, r26
     aea:	b0 93 9b 01 	sts	0x019B, r27
																						//throttle is highly smoothed to help prevent accidental spin-down
		rotations_since_throttle_was_set = 0;					 //note that throttle was successfully set (for safety)
     aee:	10 92 53 01 	sts	0x0153, r1
     af2:	10 92 52 01 	sts	0x0152, r1
	}


	throttle_hilow = throttle_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     af6:	83 b1       	in	r24, 0x03	; 3
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	90 70       	andi	r25, 0x00	; 0
     afe:	90 93 d5 01 	sts	0x01D5, r25
     b02:	80 93 d4 01 	sts	0x01D4, r24
	
}
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	08 95       	ret

00000b10 <leftright_change>:

void leftright_change(void)
{
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
	//did the pin go HIGH? - then note time
	if (leftright_pin != 0 ) leftright_hightime = TCNT1;    
     b18:	19 9b       	sbis	0x03, 1	; 3
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <leftright_change+0x28>
     b1c:	80 91 84 00 	lds	r24, 0x0084
     b20:	90 91 85 00 	lds	r25, 0x0085
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	80 93 62 01 	sts	0x0162, r24
     b2c:	90 93 63 01 	sts	0x0163, r25
     b30:	a0 93 64 01 	sts	0x0164, r26
     b34:	b0 93 65 01 	sts	0x0165, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (leftright_pin == 0 && leftright_hightime != 0 && TCNT1 > leftright_hightime)
     b38:	19 99       	sbic	0x03, 1	; 3
     b3a:	3e c0       	rjmp	.+124    	; 0xbb8 <leftright_change+0xa8>
     b3c:	e0 90 62 01 	lds	r14, 0x0162
     b40:	f0 90 63 01 	lds	r15, 0x0163
     b44:	00 91 64 01 	lds	r16, 0x0164
     b48:	10 91 65 01 	lds	r17, 0x0165
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	89 f1       	breq	.+98     	; 0xbb8 <leftright_change+0xa8>
     b56:	80 91 84 00 	lds	r24, 0x0084
     b5a:	90 91 85 00 	lds	r25, 0x0085
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 16       	cp	r14, r24
     b64:	f9 06       	cpc	r15, r25
     b66:	0a 07       	cpc	r16, r26
     b68:	1b 07       	cpc	r17, r27
     b6a:	34 f5       	brge	.+76     	; 0xbb8 <leftright_change+0xa8>
	{
		leftright = ((leftright * 50) + ((TCNT1 - leftright_hightime) * 50)) / 100;		//smoothed RC data
     b6c:	20 91 a2 01 	lds	r18, 0x01A2
     b70:	30 91 a3 01 	lds	r19, 0x01A3
     b74:	40 91 a4 01 	lds	r20, 0x01A4
     b78:	50 91 a5 01 	lds	r21, 0x01A5
     b7c:	60 91 84 00 	lds	r22, 0x0084
     b80:	70 91 85 00 	lds	r23, 0x0085
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	6e 19       	sub	r22, r14
     b8a:	7f 09       	sbc	r23, r15
     b8c:	80 0b       	sbc	r24, r16
     b8e:	91 0b       	sbc	r25, r17
     b90:	62 0f       	add	r22, r18
     b92:	73 1f       	adc	r23, r19
     b94:	84 1f       	adc	r24, r20
     b96:	95 1f       	adc	r25, r21
     b98:	22 e0       	ldi	r18, 0x02	; 2
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodsi4>
     ba4:	c9 01       	movw	r24, r18
     ba6:	da 01       	movw	r26, r20
     ba8:	80 93 a2 01 	sts	0x01A2, r24
     bac:	90 93 a3 01 	sts	0x01A3, r25
     bb0:	a0 93 a4 01 	sts	0x01A4, r26
     bb4:	b0 93 a5 01 	sts	0x01A5, r27
	}
  
	leftright_hilow = leftright_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     bb8:	83 b1       	in	r24, 0x03	; 3
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	82 70       	andi	r24, 0x02	; 2
     bbe:	90 70       	andi	r25, 0x00	; 0
     bc0:	90 93 6b 01 	sts	0x016B, r25
     bc4:	80 93 6a 01 	sts	0x016A, r24
		
}
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret

00000bd2 <forwardback_change>:

void forwardback_change(void)
{
	//did the pin go HIGH? - then note time
	if (forwardback_pin != 0 ) forwardback_hightime = TCNT1;    
     bd2:	1a 9b       	sbis	0x03, 2	; 3
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <forwardback_change+0x20>
     bd6:	80 91 84 00 	lds	r24, 0x0084
     bda:	90 91 85 00 	lds	r25, 0x0085
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	80 93 5e 01 	sts	0x015E, r24
     be6:	90 93 5f 01 	sts	0x015F, r25
     bea:	a0 93 60 01 	sts	0x0160, r26
     bee:	b0 93 61 01 	sts	0x0161, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (forwardback_pin == 0 && forwardback_hightime != 0 && TCNT1 > forwardback_hightime) forwardback = TCNT1 - forwardback_hightime;      
     bf2:	1a 99       	sbic	0x03, 2	; 3
     bf4:	2a c0       	rjmp	.+84     	; 0xc4a <forwardback_change+0x78>
     bf6:	20 91 5e 01 	lds	r18, 0x015E
     bfa:	30 91 5f 01 	lds	r19, 0x015F
     bfe:	40 91 60 01 	lds	r20, 0x0160
     c02:	50 91 61 01 	lds	r21, 0x0161
     c06:	21 15       	cp	r18, r1
     c08:	31 05       	cpc	r19, r1
     c0a:	41 05       	cpc	r20, r1
     c0c:	51 05       	cpc	r21, r1
     c0e:	e9 f0       	breq	.+58     	; 0xc4a <forwardback_change+0x78>
     c10:	80 91 84 00 	lds	r24, 0x0084
     c14:	90 91 85 00 	lds	r25, 0x0085
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	28 17       	cp	r18, r24
     c1e:	39 07       	cpc	r19, r25
     c20:	4a 07       	cpc	r20, r26
     c22:	5b 07       	cpc	r21, r27
     c24:	94 f4       	brge	.+36     	; 0xc4a <forwardback_change+0x78>
     c26:	80 91 84 00 	lds	r24, 0x0084
     c2a:	90 91 85 00 	lds	r25, 0x0085
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	82 1b       	sub	r24, r18
     c34:	93 0b       	sbc	r25, r19
     c36:	a4 0b       	sbc	r26, r20
     c38:	b5 0b       	sbc	r27, r21
     c3a:	80 93 7c 01 	sts	0x017C, r24
     c3e:	90 93 7d 01 	sts	0x017D, r25
     c42:	a0 93 7e 01 	sts	0x017E, r26
     c46:	b0 93 7f 01 	sts	0x017F, r27
  
	forwardback_hilow = forwardback_pin;                               //make note of pin state for reference next time interrupt is triggered...
     c4a:	83 b1       	in	r24, 0x03	; 3
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	84 70       	andi	r24, 0x04	; 4
     c50:	90 70       	andi	r25, 0x00	; 0
     c52:	90 93 c9 01 	sts	0x01C9, r25
     c56:	80 93 c8 01 	sts	0x01C8, r24

}
     c5a:	08 95       	ret

00000c5c <__vector_3>:
}

//main interrupt handler - is called any time any ports on PORTB change

ISR (PCINT0_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
	
	//check all RC channels to see if they were updated
	if (throttle_hilow != throttle_pin) throttle_change();
     c7e:	83 b1       	in	r24, 0x03	; 3
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	20 91 d4 01 	lds	r18, 0x01D4
     c8a:	30 91 d5 01 	lds	r19, 0x01D5
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	11 f0       	breq	.+4      	; 0xc98 <__vector_3+0x3c>
     c94:	0e 94 0c 05 	call	0xa18	; 0xa18 <throttle_change>
	if (leftright_hilow != leftright_pin) leftright_change();
     c98:	83 b1       	in	r24, 0x03	; 3
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	82 70       	andi	r24, 0x02	; 2
     c9e:	90 70       	andi	r25, 0x00	; 0
     ca0:	20 91 6a 01 	lds	r18, 0x016A
     ca4:	30 91 6b 01 	lds	r19, 0x016B
     ca8:	28 17       	cp	r18, r24
     caa:	39 07       	cpc	r19, r25
     cac:	11 f0       	breq	.+4      	; 0xcb2 <__vector_3+0x56>
     cae:	0e 94 88 05 	call	0xb10	; 0xb10 <leftright_change>
	if (forwardback_hilow != forwardback_pin) forwardback_change();
     cb2:	83 b1       	in	r24, 0x03	; 3
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	84 70       	andi	r24, 0x04	; 4
     cb8:	90 70       	andi	r25, 0x00	; 0
     cba:	20 91 c8 01 	lds	r18, 0x01C8
     cbe:	30 91 c9 01 	lds	r19, 0x01C9
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	11 f0       	breq	.+4      	; 0xccc <__vector_3+0x70>
     cc8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <forwardback_change>

}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <SetupTimer1>:


void SetupTimer1(void)
{

	TCCR1A = 0;                               //mode = 0
     cee:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	80 93 81 00 	sts	0x0081, r24

}
     cf8:	08 95       	ret

00000cfa <adc_init>:
void adc_init(void)

{
 
  	// Free running Mode
	ADCSRB = 0x00;
     cfa:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     cfe:	86 e8       	ldi	r24, 0x86	; 134
     d00:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	80 93 7c 00 	sts	0x007C, r24

   
}
     d0a:	08 95       	ret

00000d0c <read_adc>:
{

    unsigned int adc_data;
	
	// Start conversion by setting ADSC on ADCSRA Register
	  ADCSRA |= (1<<ADSC);
     d0c:	80 91 7a 00 	lds	r24, 0x007A
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	80 93 7a 00 	sts	0x007A, r24

	// wait until convertion complete ADSC=0 -> Complete
    while (ADCSRA & (1<<ADSC));
     d16:	80 91 7a 00 	lds	r24, 0x007A
     d1a:	86 fd       	sbrc	r24, 6
     d1c:	fc cf       	rjmp	.-8      	; 0xd16 <read_adc+0xa>
	    
	adc_data = ADCL;   
     d1e:	90 91 78 00 	lds	r25, 0x0078

	//shift from low level to high level ADC, from 8bit to 10bit

	adc_data += (ADCH<<8);	  
     d22:	80 91 79 00 	lds	r24, 0x0079
     d26:	38 2f       	mov	r19, r24
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	29 0f       	add	r18, r25
     d2c:	31 1d       	adc	r19, r1

	return (adc_data);

}
     d2e:	c9 01       	movw	r24, r18
     d30:	08 95       	ret

00000d32 <get_config_constants>:


}

void get_config_constants(void)
{
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
     d36:	10 92 45 01 	sts	0x0145, r1
     d3a:	10 92 44 01 	sts	0x0144, r1
	for (x = 0; x < 20; x++)
     d3e:	10 92 74 01 	sts	0x0174, r1
     d42:	10 92 75 01 	sts	0x0175, r1
     d46:	10 92 76 01 	sts	0x0176, r1
     d4a:	10 92 77 01 	sts	0x0177, r1
     d4e:	1f c0       	rjmp	.+62     	; 0xd8e <get_config_constants+0x5c>
	{
		base_accel = base_accel + read_adc();               				//get accel data
     d50:	0e 94 86 06 	call	0xd0c	; 0xd0c <read_adc>
     d54:	c8 0f       	add	r28, r24
     d56:	d9 1f       	adc	r29, r25
     d58:	d0 93 45 01 	sts	0x0145, r29
     d5c:	c0 93 44 01 	sts	0x0144, r28
		delay_ms_with_pwm(10);
     d60:	8a e0       	ldi	r24, 0x0A	; 10
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
{

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
	for (x = 0; x < 20; x++)
     d68:	80 91 74 01 	lds	r24, 0x0174
     d6c:	90 91 75 01 	lds	r25, 0x0175
     d70:	a0 91 76 01 	lds	r26, 0x0176
     d74:	b0 91 77 01 	lds	r27, 0x0177
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
     d7e:	80 93 74 01 	sts	0x0174, r24
     d82:	90 93 75 01 	sts	0x0175, r25
     d86:	a0 93 76 01 	sts	0x0176, r26
     d8a:	b0 93 77 01 	sts	0x0177, r27
     d8e:	80 91 74 01 	lds	r24, 0x0174
     d92:	90 91 75 01 	lds	r25, 0x0175
     d96:	a0 91 76 01 	lds	r26, 0x0176
     d9a:	b0 91 77 01 	lds	r27, 0x0177
     d9e:	c0 91 44 01 	lds	r28, 0x0144
     da2:	d0 91 45 01 	lds	r29, 0x0145
     da6:	44 97       	sbiw	r24, 0x14	; 20
     da8:	a1 05       	cpc	r26, r1
     daa:	b1 05       	cpc	r27, r1
     dac:	8c f2       	brlt	.-94     	; 0xd50 <get_config_constants+0x1e>
	{
		base_accel = base_accel + read_adc();               				//get accel data
		delay_ms_with_pwm(10);
	}
	base_accel = base_accel / 20;
     dae:	ce 01       	movw	r24, r28
     db0:	64 e1       	ldi	r22, 0x14	; 20
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodhi4>
     db8:	70 93 45 01 	sts	0x0145, r23
     dbc:	60 93 44 01 	sts	0x0144, r22


	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
     dc0:	10 92 17 01 	sts	0x0117, r1
     dc4:	10 92 16 01 	sts	0x0116, r1
	for (x = 0; x < 20; x++)
     dc8:	10 92 74 01 	sts	0x0174, r1
     dcc:	10 92 75 01 	sts	0x0175, r1
     dd0:	10 92 76 01 	sts	0x0176, r1
     dd4:	10 92 77 01 	sts	0x0177, r1
     dd8:	25 c0       	rjmp	.+74     	; 0xe24 <get_config_constants+0xf2>
	{
		heading_center = heading_center + leftright;               		
     dda:	80 91 a2 01 	lds	r24, 0x01A2
     dde:	90 91 a3 01 	lds	r25, 0x01A3
     de2:	a0 91 a4 01 	lds	r26, 0x01A4
     de6:	b0 91 a5 01 	lds	r27, 0x01A5
     dea:	28 0f       	add	r18, r24
     dec:	39 1f       	adc	r19, r25
     dee:	30 93 17 01 	sts	0x0117, r19
     df2:	20 93 16 01 	sts	0x0116, r18
		delay_ms_with_pwm(20);
     df6:	84 e1       	ldi	r24, 0x14	; 20
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>


	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
     dfe:	80 91 74 01 	lds	r24, 0x0174
     e02:	90 91 75 01 	lds	r25, 0x0175
     e06:	a0 91 76 01 	lds	r26, 0x0176
     e0a:	b0 91 77 01 	lds	r27, 0x0177
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	80 93 74 01 	sts	0x0174, r24
     e18:	90 93 75 01 	sts	0x0175, r25
     e1c:	a0 93 76 01 	sts	0x0176, r26
     e20:	b0 93 77 01 	sts	0x0177, r27
     e24:	80 91 74 01 	lds	r24, 0x0174
     e28:	90 91 75 01 	lds	r25, 0x0175
     e2c:	a0 91 76 01 	lds	r26, 0x0176
     e30:	b0 91 77 01 	lds	r27, 0x0177
     e34:	20 91 16 01 	lds	r18, 0x0116
     e38:	30 91 17 01 	lds	r19, 0x0117
     e3c:	44 97       	sbiw	r24, 0x14	; 20
     e3e:	a1 05       	cpc	r26, r1
     e40:	b1 05       	cpc	r27, r1
     e42:	5c f2       	brlt	.-106    	; 0xdda <get_config_constants+0xa8>
	{
		heading_center = heading_center + leftright;               		
		delay_ms_with_pwm(20);

	}
	heading_center = heading_center / 20;
     e44:	c9 01       	movw	r24, r18
     e46:	64 e1       	ldi	r22, 0x14	; 20
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodhi4>
     e4e:	70 93 17 01 	sts	0x0117, r23
     e52:	60 93 16 01 	sts	0x0116, r22


}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <main_calculations>:



void main_calculations(void)

{
     e5c:	2f 92       	push	r2
     e5e:	3f 92       	push	r3
     e60:	4f 92       	push	r4
     e62:	5f 92       	push	r5
     e64:	6f 92       	push	r6
     e66:	7f 92       	push	r7
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <main_calculations+0x26>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <main_calculations+0x28>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <main_calculations+0x2a>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     e8a:	10 92 5a 01 	sts	0x015A, r1
     e8e:	10 92 5b 01 	sts	0x015B, r1
     e92:	10 92 5c 01 	sts	0x015C, r1
     e96:	10 92 5d 01 	sts	0x015D, r1
	leftright_hightime = 0;
     e9a:	10 92 62 01 	sts	0x0162, r1
     e9e:	10 92 63 01 	sts	0x0163, r1
     ea2:	10 92 64 01 	sts	0x0164, r1
     ea6:	10 92 65 01 	sts	0x0165, r1
	forwardback_hightime = 0;
     eaa:	10 92 5e 01 	sts	0x015E, r1
     eae:	10 92 5f 01 	sts	0x015F, r1
     eb2:	10 92 60 01 	sts	0x0160, r1
     eb6:	10 92 61 01 	sts	0x0161, r1

{

	reset_rc();				//resets existing RC data - must get called before timer1 is reset to prevent errors
	
	TCNT1 = 0;				//resets timer (used to track for time spent outside motor drive loop)
     eba:	10 92 85 00 	sts	0x0085, r1
     ebe:	10 92 84 00 	sts	0x0084, r1
							//by resetting timer at beginning over each call to main_calculations - the calc time effectively gets included in the do_spin loop


	cli();                	//disable interrupts - bad things seem to happen if the RC interrupts get triggered while doing math...
     ec2:	f8 94       	cli
							//RC data is not updated while in this code

	//Are we going forward or backwards?
	if ( forwardback > (forwardback_center + forwardback_forwardthresh)) forward = 1; else forward = 0;
     ec4:	20 91 7c 01 	lds	r18, 0x017C
     ec8:	30 91 7d 01 	lds	r19, 0x017D
     ecc:	40 91 7e 01 	lds	r20, 0x017E
     ed0:	50 91 7f 01 	lds	r21, 0x017F
     ed4:	60 91 10 01 	lds	r22, 0x0110
     ed8:	70 91 11 01 	lds	r23, 0x0111
     edc:	80 91 12 01 	lds	r24, 0x0112
     ee0:	90 91 13 01 	lds	r25, 0x0113
     ee4:	86 0f       	add	r24, r22
     ee6:	97 1f       	adc	r25, r23
     ee8:	aa 27       	eor	r26, r26
     eea:	97 fd       	sbrc	r25, 7
     eec:	a0 95       	com	r26
     eee:	ba 2f       	mov	r27, r26
     ef0:	82 17       	cp	r24, r18
     ef2:	93 07       	cpc	r25, r19
     ef4:	a4 07       	cpc	r26, r20
     ef6:	b5 07       	cpc	r27, r21
     ef8:	3c f4       	brge	.+14     	; 0xf08 <main_calculations+0xac>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	90 93 b7 01 	sts	0x01B7, r25
     f02:	80 93 b6 01 	sts	0x01B6, r24
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <main_calculations+0xb4>
     f08:	10 92 b7 01 	sts	0x01B7, r1
     f0c:	10 92 b6 01 	sts	0x01B6, r1
	if ( forwardback < (forwardback_center + forwardback_backthresh)) backward = 1; else backward = 0;
     f10:	20 91 7c 01 	lds	r18, 0x017C
     f14:	30 91 7d 01 	lds	r19, 0x017D
     f18:	40 91 7e 01 	lds	r20, 0x017E
     f1c:	50 91 7f 01 	lds	r21, 0x017F
     f20:	80 91 14 01 	lds	r24, 0x0114
     f24:	90 91 15 01 	lds	r25, 0x0115
     f28:	68 0f       	add	r22, r24
     f2a:	79 1f       	adc	r23, r25
     f2c:	cb 01       	movw	r24, r22
     f2e:	aa 27       	eor	r26, r26
     f30:	97 fd       	sbrc	r25, 7
     f32:	a0 95       	com	r26
     f34:	ba 2f       	mov	r27, r26
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	4a 07       	cpc	r20, r26
     f3c:	5b 07       	cpc	r21, r27
     f3e:	3c f4       	brge	.+14     	; 0xf4e <main_calculations+0xf2>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	90 93 c7 01 	sts	0x01C7, r25
     f48:	80 93 c6 01 	sts	0x01C6, r24
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <main_calculations+0xfa>
     f4e:	10 92 c7 01 	sts	0x01C7, r1
     f52:	10 92 c6 01 	sts	0x01C6, r1

	flashy_led = 0;											//by default LED isn't flashy
     f56:	10 92 b9 01 	sts	0x01B9, r1
     f5a:	10 92 b8 01 	sts	0x01B8, r1

	accel_raw_data = read_adc();               				//get accel data
     f5e:	0e 94 86 06 	call	0xd0c	; 0xd0c <read_adc>
     f62:	9c 01       	movw	r18, r24
     f64:	90 93 b5 01 	sts	0x01B5, r25
     f68:	80 93 b4 01 	sts	0x01B4, r24
	
	accel_read = accel_raw_data;                              //move it over to single in case we want to do floating point
	accel_read = accel_read - base_accel;                     //compensate for base (2.5v) level
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	ca 01       	movw	r24, r20
     f72:	b9 01       	movw	r22, r18
     f74:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     f78:	7b 01       	movw	r14, r22
     f7a:	8c 01       	movw	r16, r24
     f7c:	60 91 44 01 	lds	r22, 0x0144
     f80:	70 91 45 01 	lds	r23, 0x0145
     f84:	88 27       	eor	r24, r24
     f86:	77 fd       	sbrc	r23, 7
     f88:	80 95       	com	r24
     f8a:	98 2f       	mov	r25, r24
     f8c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	c8 01       	movw	r24, r16
     f96:	b7 01       	movw	r22, r14
     f98:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
     f9c:	60 93 b0 01 	sts	0x01B0, r22
     fa0:	70 93 b1 01 	sts	0x01B1, r23
     fa4:	80 93 b2 01 	sts	0x01B2, r24
     fa8:	90 93 b3 01 	sts	0x01B3, r25
	g = accel_read * g_per_adc_increment;                    //convert to g's
     fac:	20 91 30 01 	lds	r18, 0x0130
     fb0:	30 91 31 01 	lds	r19, 0x0131
     fb4:	40 91 32 01 	lds	r20, 0x0132
     fb8:	50 91 33 01 	lds	r21, 0x0133
     fbc:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
     fc0:	3b 01       	movw	r6, r22
     fc2:	4c 01       	movw	r8, r24
     fc4:	60 93 86 01 	sts	0x0186, r22
     fc8:	70 93 87 01 	sts	0x0187, r23
     fcc:	80 93 88 01 	sts	0x0188, r24
     fd0:	90 93 89 01 	sts	0x0189, r25

	rpm = g * 89445;                                //calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	rpm = rpm / radius;
	rpm = pow(rpm, .5);								
     fd4:	20 e8       	ldi	r18, 0x80	; 128
     fd6:	32 eb       	ldi	r19, 0xB2	; 178
     fd8:	4e ea       	ldi	r20, 0xAE	; 174
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
     fe0:	20 91 2c 01 	lds	r18, 0x012C
     fe4:	30 91 2d 01 	lds	r19, 0x012D
     fe8:	40 91 2e 01 	lds	r20, 0x012E
     fec:	50 91 2f 01 	lds	r21, 0x012F
     ff0:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
     ff4:	0e 94 75 12 	call	0x24ea	; 0x24ea <sqrt>
     ff8:	7b 01       	movw	r14, r22
     ffa:	8c 01       	movw	r16, r24
     ffc:	17 01       	movw	r2, r14
     ffe:	28 01       	movw	r4, r16
    1000:	e0 92 ba 01 	sts	0x01BA, r14
    1004:	f0 92 bb 01 	sts	0x01BB, r15
    1008:	00 93 bc 01 	sts	0x01BC, r16
    100c:	10 93 bd 01 	sts	0x01BD, r17
	
	if (rpm > max_observed_rpm) max_observed_rpm = rpm;		//update max_observed_rpm if current rpm is higher
    1010:	60 91 56 01 	lds	r22, 0x0156
    1014:	70 91 57 01 	lds	r23, 0x0157
    1018:	80 91 58 01 	lds	r24, 0x0158
    101c:	90 91 59 01 	lds	r25, 0x0159
    1020:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	c8 01       	movw	r24, r16
    102a:	b7 01       	movw	r22, r14
    102c:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	64 f4       	brge	.+24     	; 0x104c <main_calculations+0x1f0>
    1034:	c8 01       	movw	r24, r16
    1036:	b7 01       	movw	r22, r14
    1038:	0e 94 27 11 	call	0x224e	; 0x224e <__fixsfsi>
    103c:	60 93 56 01 	sts	0x0156, r22
    1040:	70 93 57 01 	sts	0x0157, r23
    1044:	80 93 58 01 	sts	0x0158, r24
    1048:	90 93 59 01 	sts	0x0159, r25
	
	full_spin_time_ms = rpm / 60;                                      //convert RPM to duration of each spin in milliseconds
    104c:	c2 01       	movw	r24, r4
    104e:	b1 01       	movw	r22, r2
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e7       	ldi	r20, 0x70	; 112
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    105c:	60 93 6c 01 	sts	0x016C, r22
    1060:	70 93 6d 01 	sts	0x016D, r23
    1064:	80 93 6e 01 	sts	0x016E, r24
    1068:	90 93 6f 01 	sts	0x016F, r25
		
	if (full_spin_time_ms == 0) full_spin_time_ms = 1;                          //must prevent any possible division by zero!!!
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    1078:	88 23       	and	r24, r24
    107a:	61 f4       	brne	.+24     	; 0x1094 <main_calculations+0x238>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e8       	ldi	r26, 0x80	; 128
    1082:	bf e3       	ldi	r27, 0x3F	; 63
    1084:	80 93 6c 01 	sts	0x016C, r24
    1088:	90 93 6d 01 	sts	0x016D, r25
    108c:	a0 93 6e 01 	sts	0x016E, r26
    1090:	b0 93 6f 01 	sts	0x016F, r27
	full_spin_time_ms = 1 / full_spin_time_ms;
	full_spin_time_ms = full_spin_time_ms * 1000;									//seconds to milliseconds

	full_spin_time_ms = full_spin_time_ms * tracking_comp;                      //compensate with user-set tracking adjustment
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	9f e3       	ldi	r25, 0x3F	; 63
    109c:	20 91 6c 01 	lds	r18, 0x016C
    10a0:	30 91 6d 01 	lds	r19, 0x016D
    10a4:	40 91 6e 01 	lds	r20, 0x016E
    10a8:	50 91 6f 01 	lds	r21, 0x016F
    10ac:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a e7       	ldi	r20, 0x7A	; 122
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    10bc:	20 91 3c 01 	lds	r18, 0x013C
    10c0:	30 91 3d 01 	lds	r19, 0x013D
    10c4:	40 91 3e 01 	lds	r20, 0x013E
    10c8:	50 91 3f 01 	lds	r21, 0x013F
    10cc:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    10d0:	9b 01       	movw	r18, r22
    10d2:	ac 01       	movw	r20, r24
    10d4:	60 93 6c 01 	sts	0x016C, r22
    10d8:	70 93 6d 01 	sts	0x016D, r23
    10dc:	80 93 6e 01 	sts	0x016E, r24
    10e0:	90 93 6f 01 	sts	0x016F, r25

  
	if ( forward == 1 ) full_spin_time_ms = full_spin_time_ms * forward_comp;   //extra compensation if going forward
    10e4:	80 91 b6 01 	lds	r24, 0x01B6
    10e8:	90 91 b7 01 	lds	r25, 0x01B7
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 f4       	brne	.+40     	; 0x1118 <main_calculations+0x2bc>
    10f0:	ca 01       	movw	r24, r20
    10f2:	b9 01       	movw	r22, r18
    10f4:	20 91 34 01 	lds	r18, 0x0134
    10f8:	30 91 35 01 	lds	r19, 0x0135
    10fc:	40 91 36 01 	lds	r20, 0x0136
    1100:	50 91 37 01 	lds	r21, 0x0137
    1104:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1108:	60 93 6c 01 	sts	0x016C, r22
    110c:	70 93 6d 01 	sts	0x016D, r23
    1110:	80 93 6e 01 	sts	0x016E, r24
    1114:	90 93 6f 01 	sts	0x016F, r25
	if ( backward == 1 ) full_spin_time_ms = full_spin_time_ms * backward_comp; //extra compensation if going backward
    1118:	80 91 c6 01 	lds	r24, 0x01C6
    111c:	90 91 c7 01 	lds	r25, 0x01C7
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	d1 f4       	brne	.+52     	; 0x1158 <main_calculations+0x2fc>
    1124:	60 91 6c 01 	lds	r22, 0x016C
    1128:	70 91 6d 01 	lds	r23, 0x016D
    112c:	80 91 6e 01 	lds	r24, 0x016E
    1130:	90 91 6f 01 	lds	r25, 0x016F
    1134:	20 91 38 01 	lds	r18, 0x0138
    1138:	30 91 39 01 	lds	r19, 0x0139
    113c:	40 91 3a 01 	lds	r20, 0x013A
    1140:	50 91 3b 01 	lds	r21, 0x013B
    1144:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1148:	60 93 6c 01 	sts	0x016C, r22
    114c:	70 93 6d 01 	sts	0x016D, r23
    1150:	80 93 6e 01 	sts	0x016E, r24
    1154:	90 93 6f 01 	sts	0x016F, r25



	//converts throttle reading from remote into percentage
	throttle_percent = ((throttle - throttle_low) * 100) / (throttle_high - throttle_low);
    1158:	60 91 98 01 	lds	r22, 0x0198
    115c:	70 91 99 01 	lds	r23, 0x0199
    1160:	80 91 9a 01 	lds	r24, 0x019A
    1164:	90 91 9b 01 	lds	r25, 0x019B
    1168:	00 91 0c 01 	lds	r16, 0x010C
    116c:	10 91 0d 01 	lds	r17, 0x010D
    1170:	98 01       	movw	r18, r16
    1172:	44 27       	eor	r20, r20
    1174:	37 fd       	sbrc	r19, 7
    1176:	40 95       	com	r20
    1178:	54 2f       	mov	r21, r20
    117a:	62 1b       	sub	r22, r18
    117c:	73 0b       	sbc	r23, r19
    117e:	84 0b       	sbc	r24, r20
    1180:	95 0b       	sbc	r25, r21
    1182:	24 e6       	ldi	r18, 0x64	; 100
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsi3>
    118e:	20 91 0e 01 	lds	r18, 0x010E
    1192:	30 91 0f 01 	lds	r19, 0x010F
    1196:	20 1b       	sub	r18, r16
    1198:	31 0b       	sbc	r19, r17
    119a:	44 27       	eor	r20, r20
    119c:	37 fd       	sbrc	r19, 7
    119e:	40 95       	com	r20
    11a0:	54 2f       	mov	r21, r20
    11a2:	0e 94 0e 13 	call	0x261c	; 0x261c <__divmodsi4>
    11a6:	ca 01       	movw	r24, r20
    11a8:	b9 01       	movw	r22, r18
    11aa:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    11ae:	60 93 c2 01 	sts	0x01C2, r22
    11b2:	70 93 c3 01 	sts	0x01C3, r23
    11b6:	80 93 c4 01 	sts	0x01C4, r24
    11ba:	90 93 c5 01 	sts	0x01C5, r25
	if ( throttle_percent < 12 ) throttle_percent = 12;    //don't got under X%	 (throttle percent is only set if we exit safety - so lack of "0" throttle isn't a problem)
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e4       	ldi	r20, 0x40	; 64
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	64 f4       	brge	.+24     	; 0x11e6 <main_calculations+0x38a>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e4       	ldi	r26, 0x40	; 64
    11d4:	b1 e4       	ldi	r27, 0x41	; 65
    11d6:	80 93 c2 01 	sts	0x01C2, r24
    11da:	90 93 c3 01 	sts	0x01C3, r25
    11de:	a0 93 c4 01 	sts	0x01C4, r26
    11e2:	b0 93 c5 01 	sts	0x01C5, r27
	if ( throttle_percent > 100 ) throttle_percent = 100;    //don't got over 100%
    11e6:	60 91 c2 01 	lds	r22, 0x01C2
    11ea:	70 91 c3 01 	lds	r23, 0x01C3
    11ee:	80 91 c4 01 	lds	r24, 0x01C4
    11f2:	90 91 c5 01 	lds	r25, 0x01C5
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	48 ec       	ldi	r20, 0xC8	; 200
    11fc:	52 e4       	ldi	r21, 0x42	; 66
    11fe:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    1202:	18 16       	cp	r1, r24
    1204:	64 f4       	brge	.+24     	; 0x121e <main_calculations+0x3c2>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a8 ec       	ldi	r26, 0xC8	; 200
    120c:	b2 e4       	ldi	r27, 0x42	; 66
    120e:	80 93 c2 01 	sts	0x01C2, r24
    1212:	90 93 c3 01 	sts	0x01C3, r25
    1216:	a0 93 c4 01 	sts	0x01C4, r26
    121a:	b0 93 c5 01 	sts	0x01C5, r27
	

	config_mode_throttle_copy = throttle_percent;				//second copy of variable used in config mode (since we're otherwise locking it at 50%)
    121e:	20 91 c2 01 	lds	r18, 0x01C2
    1222:	30 91 c3 01 	lds	r19, 0x01C3
    1226:	40 91 c4 01 	lds	r20, 0x01C4
    122a:	50 91 c5 01 	lds	r21, 0x01C5
    122e:	20 93 ce 01 	sts	0x01CE, r18
    1232:	30 93 cf 01 	sts	0x01CF, r19
    1236:	40 93 d0 01 	sts	0x01D0, r20
    123a:	50 93 d1 01 	sts	0x01D1, r21
	if (in_config_mode == 1) throttle_percent = config_mode_throttle_percent;			//throttle is locked at 50 percent (config_mode_throttle_percent) in config mode
    123e:	80 91 d6 01 	lds	r24, 0x01D6
    1242:	90 91 d7 01 	lds	r25, 0x01D7
    1246:	9e 83       	std	Y+6, r25	; 0x06
    1248:	8d 83       	std	Y+5, r24	; 0x05
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	89 f4       	brne	.+34     	; 0x1270 <main_calculations+0x414>
    124e:	80 91 28 01 	lds	r24, 0x0128
    1252:	90 91 29 01 	lds	r25, 0x0129
    1256:	a0 91 2a 01 	lds	r26, 0x012A
    125a:	b0 91 2b 01 	lds	r27, 0x012B
    125e:	80 93 c2 01 	sts	0x01C2, r24
    1262:	90 93 c3 01 	sts	0x01C3, r25
    1266:	a0 93 c4 01 	sts	0x01C4, r26
    126a:	b0 93 c5 01 	sts	0x01C5, r27
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <main_calculations+0x41c>


	//calculates + modifies changes to heading based on input from transmitter - not done if in config mode (and not in the 90+% normal drive mode)
	
	if (in_config_mode == 0 || config_mode_throttle_copy > 90)
    1270:	ad 81       	ldd	r26, Y+5	; 0x05
    1272:	be 81       	ldd	r27, Y+6	; 0x06
    1274:	ab 2b       	or	r26, r27
    1276:	59 f0       	breq	.+22     	; 0x128e <main_calculations+0x432>
    1278:	ca 01       	movw	r24, r20
    127a:	b9 01       	movw	r22, r18
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	44 eb       	ldi	r20, 0xB4	; 180
    1282:	52 e4       	ldi	r21, 0x42	; 66
    1284:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	0c f0       	brlt	.+2      	; 0x128e <main_calculations+0x432>
    128c:	44 c0       	rjmp	.+136    	; 0x1316 <main_calculations+0x4ba>
	{
		steering_multiplier = heading_center - leftright;
    128e:	20 91 a2 01 	lds	r18, 0x01A2
    1292:	30 91 a3 01 	lds	r19, 0x01A3
    1296:	40 91 a4 01 	lds	r20, 0x01A4
    129a:	50 91 a5 01 	lds	r21, 0x01A5
		steering_multiplier = steering_multiplier * turn_speed;
    129e:	60 91 16 01 	lds	r22, 0x0116
    12a2:	70 91 17 01 	lds	r23, 0x0117
    12a6:	88 27       	eor	r24, r24
    12a8:	77 fd       	sbrc	r23, 7
    12aa:	80 95       	com	r24
    12ac:	98 2f       	mov	r25, r24
    12ae:	62 1b       	sub	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	95 0b       	sbc	r25, r21
    12b6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    12ba:	20 91 46 01 	lds	r18, 0x0146
    12be:	30 91 47 01 	lds	r19, 0x0147
    12c2:	40 91 48 01 	lds	r20, 0x0148
    12c6:	50 91 49 01 	lds	r21, 0x0149
    12ca:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
		steering_multiplier = 1 - steering_multiplier;		//starts with 1 as a base value (ie - if it was 0.0 it becomes 1.0 - so there's no change in heading)
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	80 e8       	ldi	r24, 0x80	; 128
    12d8:	9f e3       	ldi	r25, 0x3F	; 63
    12da:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	60 93 66 01 	sts	0x0166, r22
    12e6:	70 93 67 01 	sts	0x0167, r23
    12ea:	80 93 68 01 	sts	0x0168, r24
    12ee:	90 93 69 01 	sts	0x0169, r25
		full_spin_time_ms = full_spin_time_ms * steering_multiplier;
    12f2:	60 91 6c 01 	lds	r22, 0x016C
    12f6:	70 91 6d 01 	lds	r23, 0x016D
    12fa:	80 91 6e 01 	lds	r24, 0x016E
    12fe:	90 91 6f 01 	lds	r25, 0x016F
    1302:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1306:	60 93 6c 01 	sts	0x016C, r22
    130a:	70 93 6d 01 	sts	0x016D, r23
    130e:	80 93 6e 01 	sts	0x016E, r24
    1312:	90 93 6f 01 	sts	0x016F, r25
	}
	

	half_spin_time = full_spin_time_ms / 2;                          //sets period in MS for each half of spin
    1316:	a0 90 6c 01 	lds	r10, 0x016C
    131a:	b0 90 6d 01 	lds	r11, 0x016D
    131e:	c0 90 6e 01 	lds	r12, 0x016E
    1322:	d0 90 6f 01 	lds	r13, 0x016F
    1326:	c6 01       	movw	r24, r12
    1328:	b5 01       	movw	r22, r10
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1336:	60 93 9c 01 	sts	0x019C, r22
    133a:	70 93 9d 01 	sts	0x019D, r23
    133e:	80 93 9e 01 	sts	0x019E, r24
    1342:	90 93 9f 01 	sts	0x019F, r25

	//caps on timing if going too slow or fast
	if ( half_spin_time > 200) half_spin_time = 200;			//slowest allowed - 200ms per half-cycle = 150rpm
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	48 e4       	ldi	r20, 0x48	; 72
    134c:	53 e4       	ldi	r21, 0x43	; 67
    134e:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    1352:	18 16       	cp	r1, r24
    1354:	64 f4       	brge	.+24     	; 0x136e <main_calculations+0x512>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a8 e4       	ldi	r26, 0x48	; 72
    135c:	b3 e4       	ldi	r27, 0x43	; 67
    135e:	80 93 9c 01 	sts	0x019C, r24
    1362:	90 93 9d 01 	sts	0x019D, r25
    1366:	a0 93 9e 01 	sts	0x019E, r26
    136a:	b0 93 9f 01 	sts	0x019F, r27
	if ( half_spin_time < 5) half_spin_time = 5;				//fastest - 5ms per half-cycle = 6000rpm
    136e:	60 91 9c 01 	lds	r22, 0x019C
    1372:	70 91 9d 01 	lds	r23, 0x019D
    1376:	80 91 9e 01 	lds	r24, 0x019E
    137a:	90 91 9f 01 	lds	r25, 0x019F
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 ea       	ldi	r20, 0xA0	; 160
    1384:	50 e4       	ldi	r21, 0x40	; 64
    1386:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    138a:	88 23       	and	r24, r24
    138c:	64 f4       	brge	.+24     	; 0x13a6 <main_calculations+0x54a>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 ea       	ldi	r26, 0xA0	; 160
    1394:	b0 e4       	ldi	r27, 0x40	; 64
    1396:	80 93 9c 01 	sts	0x019C, r24
    139a:	90 93 9d 01 	sts	0x019D, r25
    139e:	a0 93 9e 01 	sts	0x019E, r26
    13a2:	b0 93 9f 01 	sts	0x019F, r27


	//set heading beacon size and location

	led_on = full_spin_time_ms * led_adjust;
	led_on = led_on / 100;
    13a6:	c6 01       	movw	r24, r12
    13a8:	b5 01       	movw	r22, r10
    13aa:	20 91 40 01 	lds	r18, 0x0140
    13ae:	30 91 41 01 	lds	r19, 0x0141
    13b2:	40 91 42 01 	lds	r20, 0x0142
    13b6:	50 91 43 01 	lds	r21, 0x0143
    13ba:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	48 ec       	ldi	r20, 0xC8	; 200
    13c4:	52 e4       	ldi	r21, 0x42	; 66
    13c6:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    13ca:	7b 01       	movw	r14, r22
    13cc:	8c 01       	movw	r16, r24
    13ce:	60 93 aa 01 	sts	0x01AA, r22
    13d2:	70 93 ab 01 	sts	0x01AB, r23
    13d6:	80 93 ac 01 	sts	0x01AC, r24
    13da:	90 93 ad 01 	sts	0x01AD, r25
	led_off = full_spin_time_ms / 3;                                  //led signal is 33% of circle
	led_off = led_off + led_on;
    13de:	c6 01       	movw	r24, r12
    13e0:	b5 01       	movw	r22, r10
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e4       	ldi	r20, 0x40	; 64
    13e8:	50 e4       	ldi	r21, 0x40	; 64
    13ea:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    13ee:	a8 01       	movw	r20, r16
    13f0:	97 01       	movw	r18, r14
    13f2:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    13f6:	7b 01       	movw	r14, r22
    13f8:	8c 01       	movw	r16, r24
    13fa:	60 93 ca 01 	sts	0x01CA, r22
    13fe:	70 93 cb 01 	sts	0x01CB, r23
    1402:	80 93 cc 01 	sts	0x01CC, r24
    1406:	90 93 cd 01 	sts	0x01CD, r25


	if (led_off >= full_spin_time_ms ) //if led_off is "later" or at end of cycle - shift led_off behind by one cycle
    140a:	a6 01       	movw	r20, r12
    140c:	95 01       	movw	r18, r10
    140e:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    1412:	88 23       	and	r24, r24
    1414:	74 f0       	brlt	.+28     	; 0x1432 <main_calculations+0x5d6>
	{                        
		led_off = led_off - full_spin_time_ms;
    1416:	c8 01       	movw	r24, r16
    1418:	b7 01       	movw	r22, r14
    141a:	a6 01       	movw	r20, r12
    141c:	95 01       	movw	r18, r10
    141e:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    1422:	60 93 ca 01 	sts	0x01CA, r22
    1426:	70 93 cb 01 	sts	0x01CB, r23
    142a:	80 93 cc 01 	sts	0x01CC, r24
    142e:	90 93 cd 01 	sts	0x01CD, r25
	}

	if ( led_off < 1 ) led_off = led_off + full_spin_time_ms;
    1432:	e0 90 ca 01 	lds	r14, 0x01CA
    1436:	f0 90 cb 01 	lds	r15, 0x01CB
    143a:	00 91 cc 01 	lds	r16, 0x01CC
    143e:	10 91 cd 01 	lds	r17, 0x01CD
    1442:	c8 01       	movw	r24, r16
    1444:	b7 01       	movw	r22, r14
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    1452:	88 23       	and	r24, r24
    1454:	74 f4       	brge	.+28     	; 0x1472 <main_calculations+0x616>
    1456:	c8 01       	movw	r24, r16
    1458:	b7 01       	movw	r22, r14
    145a:	a6 01       	movw	r20, r12
    145c:	95 01       	movw	r18, r10
    145e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    1462:	60 93 ca 01 	sts	0x01CA, r22
    1466:	70 93 cb 01 	sts	0x01CB, r23
    146a:	80 93 cc 01 	sts	0x01CC, r24
    146e:	90 93 cd 01 	sts	0x01CD, r25

	//throttling

	full_power_spin = 0;
    1472:	10 92 d3 01 	sts	0x01D3, r1
    1476:	10 92 d2 01 	sts	0x01D2, r1
	if ( rpm < min_rpm ) full_power_spin = 1;                //if we're under the minimum RPM for translation - do the full power spin!
    147a:	c2 01       	movw	r24, r4
    147c:	b1 01       	movw	r22, r2
    147e:	20 91 1c 01 	lds	r18, 0x011C
    1482:	30 91 1d 01 	lds	r19, 0x011D
    1486:	40 91 1e 01 	lds	r20, 0x011E
    148a:	50 91 1f 01 	lds	r21, 0x011F
    148e:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    1492:	88 23       	and	r24, r24
    1494:	34 f4       	brge	.+12     	; 0x14a2 <main_calculations+0x646>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	90 93 d3 01 	sts	0x01D3, r25
    149e:	80 93 d2 01 	sts	0x01D2, r24
	if ( g > max_g || rpm > max_allowed_rpm ) throttle_percent = 10;  				     //if we're over max alowed G's or RPM - reduce throttle
    14a2:	c4 01       	movw	r24, r8
    14a4:	b3 01       	movw	r22, r6
    14a6:	20 91 24 01 	lds	r18, 0x0124
    14aa:	30 91 25 01 	lds	r19, 0x0125
    14ae:	40 91 26 01 	lds	r20, 0x0126
    14b2:	50 91 27 01 	lds	r21, 0x0127
    14b6:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	74 f0       	brlt	.+28     	; 0x14da <main_calculations+0x67e>
    14be:	c2 01       	movw	r24, r4
    14c0:	b1 01       	movw	r22, r2
    14c2:	20 91 20 01 	lds	r18, 0x0120
    14c6:	30 91 21 01 	lds	r19, 0x0121
    14ca:	40 91 22 01 	lds	r20, 0x0122
    14ce:	50 91 23 01 	lds	r21, 0x0123
    14d2:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	64 f4       	brge	.+24     	; 0x14f2 <main_calculations+0x696>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e2       	ldi	r26, 0x20	; 32
    14e0:	b1 e4       	ldi	r27, 0x41	; 65
    14e2:	80 93 c2 01 	sts	0x01C2, r24
    14e6:	90 93 c3 01 	sts	0x01C3, r25
    14ea:	a0 93 c4 01 	sts	0x01C4, r26
    14ee:	b0 93 c5 01 	sts	0x01C5, r27
	
	
	//if throttle is at or over 50% throttle - adjust time spent in braking
	if ( throttle_percent > 50 )
    14f2:	80 91 c2 01 	lds	r24, 0x01C2
    14f6:	90 91 c3 01 	lds	r25, 0x01C3
    14fa:	a0 91 c4 01 	lds	r26, 0x01C4
    14fe:	b0 91 c5 01 	lds	r27, 0x01C5
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	ab 83       	std	Y+3, r26	; 0x03
    1508:	bc 83       	std	Y+4, r27	; 0x04
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	48 e4       	ldi	r20, 0x48	; 72
    1514:	52 e4       	ldi	r21, 0x42	; 66
    1516:	0e 94 0a 12 	call	0x2414	; 0x2414 <__gesf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f0       	brlt	.+2      	; 0x1520 <main_calculations+0x6c4>
    151e:	76 c0       	rjmp	.+236    	; 0x160c <main_calculations+0x7b0>
	{                          

		flashy_led = 1;                                        //flash the LED to indicate we're in fast mode
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 b9 01 	sts	0x01B9, r25
    1528:	80 93 b8 01 	sts	0x01B8, r24

		braking_length = half_spin_time * 25;                  
    152c:	20 90 9c 01 	lds	r2, 0x019C
    1530:	30 90 9d 01 	lds	r3, 0x019D
    1534:	40 90 9e 01 	lds	r4, 0x019E
    1538:	50 90 9f 01 	lds	r5, 0x019F
    153c:	c2 01       	movw	r24, r4
    153e:	b1 01       	movw	r22, r2
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	48 ec       	ldi	r20, 0xC8	; 200
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
		braking_length = braking_length / throttle_percent;    
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	3a 81       	ldd	r19, Y+2	; 0x02
    1550:	4b 81       	ldd	r20, Y+3	; 0x03
    1552:	5c 81       	ldd	r21, Y+4	; 0x04
    1554:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    1558:	7b 01       	movw	r14, r22
    155a:	8c 01       	movw	r16, r24
    155c:	60 93 70 01 	sts	0x0170, r22
    1560:	70 93 71 01 	sts	0x0171, r23
    1564:	80 93 72 01 	sts	0x0172, r24
    1568:	90 93 73 01 	sts	0x0173, r25

		begin_brake = half_spin_time / 2;
    156c:	c2 01       	movw	r24, r4
    156e:	b1 01       	movw	r22, r2
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    157c:	5b 01       	movw	r10, r22
    157e:	6c 01       	movw	r12, r24
		begin_brake = begin_brake - braking_length;
    1580:	a8 01       	movw	r20, r16
    1582:	97 01       	movw	r18, r14
    1584:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    1588:	3b 01       	movw	r6, r22
    158a:	4c 01       	movw	r8, r24
    158c:	60 93 dc 01 	sts	0x01DC, r22
    1590:	70 93 dd 01 	sts	0x01DD, r23
    1594:	80 93 de 01 	sts	0x01DE, r24
    1598:	90 93 df 01 	sts	0x01DF, r25

		end_brake = half_spin_time / 2;
		end_brake = end_brake + braking_length;
    159c:	c6 01       	movw	r24, r12
    159e:	b5 01       	movw	r22, r10
    15a0:	a8 01       	movw	r20, r16
    15a2:	97 01       	movw	r18, r14
    15a4:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    15a8:	60 93 a6 01 	sts	0x01A6, r22
    15ac:	70 93 a7 01 	sts	0x01A7, r23
    15b0:	80 93 a8 01 	sts	0x01A8, r24
    15b4:	90 93 a9 01 	sts	0x01A9, r25
	
		if ( begin_brake < 1 )	begin_brake = 1;               //make sure begin_brake isn't getting set to 0
    15b8:	c4 01       	movw	r24, r8
    15ba:	b3 01       	movw	r22, r6
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	64 f4       	brge	.+24     	; 0x15e4 <main_calculations+0x788>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e8       	ldi	r26, 0x80	; 128
    15d2:	bf e3       	ldi	r27, 0x3F	; 63
    15d4:	80 93 dc 01 	sts	0x01DC, r24
    15d8:	90 93 dd 01 	sts	0x01DD, r25
    15dc:	a0 93 de 01 	sts	0x01DE, r26
    15e0:	b0 93 df 01 	sts	0x01DF, r27
			
		power_kill_part1 = 0;                                  //power_kill not used if throttle over 50%
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	80 93 94 01 	sts	0x0194, r24
    15f0:	90 93 95 01 	sts	0x0195, r25
    15f4:	a0 93 96 01 	sts	0x0196, r26
    15f8:	b0 93 97 01 	sts	0x0197, r27
		power_kill_part2 = half_spin_time;
    15fc:	20 92 8a 01 	sts	0x018A, r2
    1600:	30 92 8b 01 	sts	0x018B, r3
    1604:	40 92 8c 01 	sts	0x018C, r4
    1608:	50 92 8d 01 	sts	0x018D, r5

	}


	if ( throttle_percent <= 50 )                           //if throttle under 50% - kill the motors for a portion of each spin
    160c:	69 81       	ldd	r22, Y+1	; 0x01
    160e:	7a 81       	ldd	r23, Y+2	; 0x02
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	48 e4       	ldi	r20, 0x48	; 72
    161a:	52 e4       	ldi	r21, 0x42	; 66
    161c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__cmpsf2>
    1620:	18 16       	cp	r1, r24
    1622:	0c f4       	brge	.+2      	; 0x1626 <main_calculations+0x7ca>
    1624:	4e c0       	rjmp	.+156    	; 0x16c2 <main_calculations+0x866>
	{
		begin_brake = 1;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e8       	ldi	r26, 0x80	; 128
    162c:	bf e3       	ldi	r27, 0x3F	; 63
    162e:	80 93 dc 01 	sts	0x01DC, r24
    1632:	90 93 dd 01 	sts	0x01DD, r25
    1636:	a0 93 de 01 	sts	0x01DE, r26
    163a:	b0 93 df 01 	sts	0x01DF, r27
		end_brake = half_spin_time;
    163e:	e0 90 9c 01 	lds	r14, 0x019C
    1642:	f0 90 9d 01 	lds	r15, 0x019D
    1646:	00 91 9e 01 	lds	r16, 0x019E
    164a:	10 91 9f 01 	lds	r17, 0x019F
    164e:	e0 92 a6 01 	sts	0x01A6, r14
    1652:	f0 92 a7 01 	sts	0x01A7, r15
    1656:	00 93 a8 01 	sts	0x01A8, r16
    165a:	10 93 a9 01 	sts	0x01A9, r17

		power_kill_length = 50 - throttle_percent;           //set time in each cycle to cut power (throttling)
		power_kill_length = power_kill_length * half_spin_time;
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	88 e4       	ldi	r24, 0x48	; 72
    1664:	92 e4       	ldi	r25, 0x42	; 66
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	4b 81       	ldd	r20, Y+3	; 0x03
    166c:	5c 81       	ldd	r21, Y+4	; 0x04
    166e:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    1672:	a8 01       	movw	r20, r16
    1674:	97 01       	movw	r18, r14
    1676:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
		power_kill_length = power_kill_length / 150;
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	46 e1       	ldi	r20, 0x16	; 22
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	60 93 be 01 	sts	0x01BE, r22
    168e:	70 93 bf 01 	sts	0x01BF, r23
    1692:	80 93 c0 01 	sts	0x01C0, r24
    1696:	90 93 c1 01 	sts	0x01C1, r25

		power_kill_part1 = power_kill_length;
    169a:	60 93 94 01 	sts	0x0194, r22
    169e:	70 93 95 01 	sts	0x0195, r23
    16a2:	80 93 96 01 	sts	0x0196, r24
    16a6:	90 93 97 01 	sts	0x0197, r25
		power_kill_part2 = half_spin_time - power_kill_length;
    16aa:	c8 01       	movw	r24, r16
    16ac:	b7 01       	movw	r22, r14
    16ae:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    16b2:	60 93 8a 01 	sts	0x018A, r22
    16b6:	70 93 8b 01 	sts	0x018B, r23
    16ba:	80 93 8c 01 	sts	0x018C, r24
    16be:	90 93 8d 01 	sts	0x018D, r25

	}

	if ( full_power_spin == 1 )      //if we're actually doing full power this spin (no translation) - ignore any calculations / reset variables
    16c2:	80 91 d2 01 	lds	r24, 0x01D2
    16c6:	90 91 d3 01 	lds	r25, 0x01D3
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	81 f5       	brne	.+96     	; 0x172e <main_calculations+0x8d2>
	{
		end_brake = 1;
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e8       	ldi	r26, 0x80	; 128
    16d4:	bf e3       	ldi	r27, 0x3F	; 63
    16d6:	80 93 a6 01 	sts	0x01A6, r24
    16da:	90 93 a7 01 	sts	0x01A7, r25
    16de:	a0 93 a8 01 	sts	0x01A8, r26
    16e2:	b0 93 a9 01 	sts	0x01A9, r27
		begin_brake = 0;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e0       	ldi	r26, 0x00	; 0
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	80 93 dc 01 	sts	0x01DC, r24
    16f2:	90 93 dd 01 	sts	0x01DD, r25
    16f6:	a0 93 de 01 	sts	0x01DE, r26
    16fa:	b0 93 df 01 	sts	0x01DF, r27

		power_kill_part1 = 0;
    16fe:	80 93 94 01 	sts	0x0194, r24
    1702:	90 93 95 01 	sts	0x0195, r25
    1706:	a0 93 96 01 	sts	0x0196, r26
    170a:	b0 93 97 01 	sts	0x0197, r27
		power_kill_part2 = half_spin_time;
    170e:	80 91 9c 01 	lds	r24, 0x019C
    1712:	90 91 9d 01 	lds	r25, 0x019D
    1716:	a0 91 9e 01 	lds	r26, 0x019E
    171a:	b0 91 9f 01 	lds	r27, 0x019F
    171e:	80 93 8a 01 	sts	0x018A, r24
    1722:	90 93 8b 01 	sts	0x018B, r25
    1726:	a0 93 8c 01 	sts	0x018C, r26
    172a:	b0 93 8d 01 	sts	0x018D, r27
	}
	
	if (in_config_mode == 1) config_mode();	//do config_mode stuff if we're in configuration mode
    172e:	ad 81       	ldd	r26, Y+5	; 0x05
    1730:	be 81       	ldd	r27, Y+6	; 0x06
    1732:	11 97       	sbiw	r26, 0x01	; 1
    1734:	11 f4       	brne	.+4      	; 0x173a <main_calculations+0x8de>
    1736:	0e 94 53 00 	call	0xa6	; 0xa6 <config_mode>
		
	//adjustments - convert times from milliseconds to timer ticks
	led_on = led_on * timer_ticks_per_ms;
    173a:	e0 90 00 01 	lds	r14, 0x0100
    173e:	f0 90 01 01 	lds	r15, 0x0101
    1742:	00 91 02 01 	lds	r16, 0x0102
    1746:	10 91 03 01 	lds	r17, 0x0103
    174a:	60 91 aa 01 	lds	r22, 0x01AA
    174e:	70 91 ab 01 	lds	r23, 0x01AB
    1752:	80 91 ac 01 	lds	r24, 0x01AC
    1756:	90 91 ad 01 	lds	r25, 0x01AD
    175a:	a8 01       	movw	r20, r16
    175c:	97 01       	movw	r18, r14
    175e:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1762:	60 93 aa 01 	sts	0x01AA, r22
    1766:	70 93 ab 01 	sts	0x01AB, r23
    176a:	80 93 ac 01 	sts	0x01AC, r24
    176e:	90 93 ad 01 	sts	0x01AD, r25
	led_off = led_off * timer_ticks_per_ms;
    1772:	60 91 ca 01 	lds	r22, 0x01CA
    1776:	70 91 cb 01 	lds	r23, 0x01CB
    177a:	80 91 cc 01 	lds	r24, 0x01CC
    177e:	90 91 cd 01 	lds	r25, 0x01CD
    1782:	a8 01       	movw	r20, r16
    1784:	97 01       	movw	r18, r14
    1786:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    178a:	60 93 ca 01 	sts	0x01CA, r22
    178e:	70 93 cb 01 	sts	0x01CB, r23
    1792:	80 93 cc 01 	sts	0x01CC, r24
    1796:	90 93 cd 01 	sts	0x01CD, r25
	half_spin_time = half_spin_time * timer_ticks_per_ms;
    179a:	60 91 9c 01 	lds	r22, 0x019C
    179e:	70 91 9d 01 	lds	r23, 0x019D
    17a2:	80 91 9e 01 	lds	r24, 0x019E
    17a6:	90 91 9f 01 	lds	r25, 0x019F
    17aa:	a8 01       	movw	r20, r16
    17ac:	97 01       	movw	r18, r14
    17ae:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    17b2:	60 93 9c 01 	sts	0x019C, r22
    17b6:	70 93 9d 01 	sts	0x019D, r23
    17ba:	80 93 9e 01 	sts	0x019E, r24
    17be:	90 93 9f 01 	sts	0x019F, r25
	power_kill_part1 = power_kill_part1 * timer_ticks_per_ms;
    17c2:	60 91 94 01 	lds	r22, 0x0194
    17c6:	70 91 95 01 	lds	r23, 0x0195
    17ca:	80 91 96 01 	lds	r24, 0x0196
    17ce:	90 91 97 01 	lds	r25, 0x0197
    17d2:	a8 01       	movw	r20, r16
    17d4:	97 01       	movw	r18, r14
    17d6:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    17da:	60 93 94 01 	sts	0x0194, r22
    17de:	70 93 95 01 	sts	0x0195, r23
    17e2:	80 93 96 01 	sts	0x0196, r24
    17e6:	90 93 97 01 	sts	0x0197, r25
	power_kill_part2 = power_kill_part2 * timer_ticks_per_ms;
    17ea:	60 91 8a 01 	lds	r22, 0x018A
    17ee:	70 91 8b 01 	lds	r23, 0x018B
    17f2:	80 91 8c 01 	lds	r24, 0x018C
    17f6:	90 91 8d 01 	lds	r25, 0x018D
    17fa:	a8 01       	movw	r20, r16
    17fc:	97 01       	movw	r18, r14
    17fe:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1802:	60 93 8a 01 	sts	0x018A, r22
    1806:	70 93 8b 01 	sts	0x018B, r23
    180a:	80 93 8c 01 	sts	0x018C, r24
    180e:	90 93 8d 01 	sts	0x018D, r25
	begin_brake = begin_brake * timer_ticks_per_ms;
    1812:	60 91 dc 01 	lds	r22, 0x01DC
    1816:	70 91 dd 01 	lds	r23, 0x01DD
    181a:	80 91 de 01 	lds	r24, 0x01DE
    181e:	90 91 df 01 	lds	r25, 0x01DF
    1822:	a8 01       	movw	r20, r16
    1824:	97 01       	movw	r18, r14
    1826:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    182a:	60 93 dc 01 	sts	0x01DC, r22
    182e:	70 93 dd 01 	sts	0x01DD, r23
    1832:	80 93 de 01 	sts	0x01DE, r24
    1836:	90 93 df 01 	sts	0x01DF, r25
	end_brake = end_brake * timer_ticks_per_ms;
    183a:	60 91 a6 01 	lds	r22, 0x01A6
    183e:	70 91 a7 01 	lds	r23, 0x01A7
    1842:	80 91 a8 01 	lds	r24, 0x01A8
    1846:	90 91 a9 01 	lds	r25, 0x01A9
    184a:	a8 01       	movw	r20, r16
    184c:	97 01       	movw	r18, r14
    184e:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    1852:	60 93 a6 01 	sts	0x01A6, r22
    1856:	70 93 a7 01 	sts	0x01A7, r23
    185a:	80 93 a8 01 	sts	0x01A8, r24
    185e:	90 93 a9 01 	sts	0x01A9, r25

	sei();  //enable interrupts to allow updating of transmitter data - out of all the critical stuff
    1862:	78 94       	sei
	

}
    1864:	26 96       	adiw	r28, 0x06	; 6
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	bf 90       	pop	r11
    1882:	af 90       	pop	r10
    1884:	9f 90       	pop	r9
    1886:	8f 90       	pop	r8
    1888:	7f 90       	pop	r7
    188a:	6f 90       	pop	r6
    188c:	5f 90       	pop	r5
    188e:	4f 90       	pop	r4
    1890:	3f 90       	pop	r3
    1892:	2f 90       	pop	r2
    1894:	08 95       	ret

00001896 <save_config>:
	}

}

void save_config(void)
{
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
	long tracking_word1;	//first word of tracking_comp
	float tracking_word2;	//second word of tracking_comp
	
	//this code busts up tracking_comp (float) into two words for storage to ROM (there are probably cleaner ways to do this)
	
	tracking_word1 = tracking_comp * 1000;							//mulitply tracking_comp by 1000 to get 1st word
    18a6:	60 91 3c 01 	lds	r22, 0x013C
    18aa:	70 91 3d 01 	lds	r23, 0x013D
    18ae:	80 91 3e 01 	lds	r24, 0x013E
    18b2:	90 91 3f 01 	lds	r25, 0x013F
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a e7       	ldi	r20, 0x7A	; 122
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    18c2:	7b 01       	movw	r14, r22
    18c4:	8c 01       	movw	r16, r24
    18c6:	0e 94 27 11 	call	0x224e	; 0x224e <__fixsfsi>
    18ca:	5b 01       	movw	r10, r22
    18cc:	6c 01       	movw	r12, r24
	tracking_word2 = ((tracking_comp * 1000) - tracking_word1);	//amount that didn't make it into word1 goes into word2
    18ce:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
    18d6:	c8 01       	movw	r24, r16
    18d8:	b7 01       	movw	r22, r14
    18da:	0e 94 56 10 	call	0x20ac	; 0x20ac <__subsf3>
    18de:	7b 01       	movw	r14, r22
    18e0:	8c 01       	movw	r16, r24
	tracking_word2 = tracking_word2 * 10000;						//multiply that by 10,000
		
	//EPROM variables - for saved configuration data
	eeprom_write_word(&saved_data_valid, 128);	//used as an indicator that saved data is good
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	60 e8       	ldi	r22, 0x80	; 128
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>
	eeprom_write_word(&led_adjust_save, led_adjust);	//saves out led offset
    18ee:	60 91 40 01 	lds	r22, 0x0140
    18f2:	70 91 41 01 	lds	r23, 0x0141
    18f6:	80 91 42 01 	lds	r24, 0x0142
    18fa:	90 91 43 01 	lds	r25, 0x0143
    18fe:	0e 94 2c 11 	call	0x2258	; 0x2258 <__fixunssfsi>
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	b9 01       	movw	r22, r18
    190c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word1, tracking_word1);	//saves out tracking calibration word1 (converted to integer)
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	b5 01       	movw	r22, r10
    1916:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word2, tracking_word2);	//saves out tracking calibration word2 (converted to integer)
    191a:	c8 01       	movw	r24, r16
    191c:	b7 01       	movw	r22, r14
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e4       	ldi	r19, 0x40	; 64
    1922:	4c e1       	ldi	r20, 0x1C	; 28
    1924:	56 e4       	ldi	r21, 0x46	; 70
    1926:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsf3>
    192a:	0e 94 2c 11 	call	0x2258	; 0x2258 <__fixunssfsi>
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
    1932:	86 e0       	ldi	r24, 0x06	; 6
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>
	eeprom_write_word(&heading_center_save, heading_center);	//saves out RC center value for left/right 
    193c:	60 91 16 01 	lds	r22, 0x0116
    1940:	70 91 17 01 	lds	r23, 0x0117
    1944:	88 e0       	ldi	r24, 0x08	; 8
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>
	eeprom_write_word(&base_accel_save, base_accel);	//saves out accelerometer 0G value
    194c:	60 91 44 01 	lds	r22, 0x0144
    1950:	70 91 45 01 	lds	r23, 0x0145
    1954:	8a e0       	ldi	r24, 0x0A	; 10
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__eewr_word_m168>


}
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	bf 90       	pop	r11
    196a:	af 90       	pop	r10
    196c:	08 95       	ret

0000196e <safety_and_idle>:

}


void safety_and_idle(void)
{
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
	
	sei();  //enable interrupts (needed to get transmitter data)
    1984:	78 94       	sei
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
	{
		bot_is_idle = 1;			//used by PWm control to check if bot is idle
    1986:	c1 e0       	ldi	r28, 0x01	; 1
    1988:	d0 e0       	ldi	r29, 0x00	; 0
		if ( leftright > (heading_center + heading_leftthresh) ) {set_led_on(); delay_ms_with_pwm(200);}
		if ( leftright < (heading_center + heading_rightthresh) ) {set_led_on(); delay_ms_with_pwm(200);}

		//sit there and flash LED
		
		toggle_led();
    198a:	a0 e2       	ldi	r26, 0x20	; 32
    198c:	9a 2e       	mov	r9, r26
				}
			}
			
			delay_ms_with_pwm (800);
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
    198e:	f1 e3       	ldi	r31, 0x31	; 49
    1990:	af 2e       	mov	r10, r31
    1992:	b1 2c       	mov	r11, r1
    1994:	c1 2c       	mov	r12, r1
    1996:	d1 2c       	mov	r13, r1
    1998:	6a c2       	rjmp	.+1236   	; 0x1e6e <safety_and_idle+0x500>
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
	{
		bot_is_idle = 1;			//used by PWm control to check if bot is idle
    199a:	d0 93 db 01 	sts	0x01DB, r29
    199e:	c0 93 da 01 	sts	0x01DA, r28

		motors_full_stop();			//motors are off while sitting idle
    19a2:	0e 94 1d 04 	call	0x83a	; 0x83a <motors_full_stop>

		if (throttle < throttle_low || throttle > (throttle_high + 100)) throttle_up_count = 0;		//single low / bad throttle resets the counter to 0
    19a6:	20 91 98 01 	lds	r18, 0x0198
    19aa:	30 91 99 01 	lds	r19, 0x0199
    19ae:	40 91 9a 01 	lds	r20, 0x019A
    19b2:	50 91 9b 01 	lds	r21, 0x019B
    19b6:	80 91 0c 01 	lds	r24, 0x010C
    19ba:	90 91 0d 01 	lds	r25, 0x010D
    19be:	7c 01       	movw	r14, r24
    19c0:	00 27       	eor	r16, r16
    19c2:	f7 fc       	sbrc	r15, 7
    19c4:	00 95       	com	r16
    19c6:	10 2f       	mov	r17, r16
    19c8:	2e 15       	cp	r18, r14
    19ca:	3f 05       	cpc	r19, r15
    19cc:	40 07       	cpc	r20, r16
    19ce:	51 07       	cpc	r21, r17
    19d0:	bc f0       	brlt	.+46     	; 0x1a00 <safety_and_idle+0x92>
    19d2:	20 91 98 01 	lds	r18, 0x0198
    19d6:	30 91 99 01 	lds	r19, 0x0199
    19da:	40 91 9a 01 	lds	r20, 0x019A
    19de:	50 91 9b 01 	lds	r21, 0x019B
    19e2:	80 91 0e 01 	lds	r24, 0x010E
    19e6:	90 91 0f 01 	lds	r25, 0x010F
    19ea:	8c 59       	subi	r24, 0x9C	; 156
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	aa 27       	eor	r26, r26
    19f0:	97 fd       	sbrc	r25, 7
    19f2:	a0 95       	com	r26
    19f4:	ba 2f       	mov	r27, r26
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	a4 07       	cpc	r26, r20
    19fc:	b5 07       	cpc	r27, r21
    19fe:	24 f4       	brge	.+8      	; 0x1a08 <safety_and_idle+0x9a>
    1a00:	10 92 55 01 	sts	0x0155, r1
    1a04:	10 92 54 01 	sts	0x0154, r1
		if (throttle > throttle_low && throttle < (throttle_high + 100)) throttle_up_count ++;		//if the throttle has been moved high - increment the counter
    1a08:	80 91 98 01 	lds	r24, 0x0198
    1a0c:	90 91 99 01 	lds	r25, 0x0199
    1a10:	a0 91 9a 01 	lds	r26, 0x019A
    1a14:	b0 91 9b 01 	lds	r27, 0x019B
    1a18:	e8 16       	cp	r14, r24
    1a1a:	f9 06       	cpc	r15, r25
    1a1c:	0a 07       	cpc	r16, r26
    1a1e:	1b 07       	cpc	r17, r27
    1a20:	04 f5       	brge	.+64     	; 0x1a62 <safety_and_idle+0xf4>
    1a22:	20 91 98 01 	lds	r18, 0x0198
    1a26:	30 91 99 01 	lds	r19, 0x0199
    1a2a:	40 91 9a 01 	lds	r20, 0x019A
    1a2e:	50 91 9b 01 	lds	r21, 0x019B
    1a32:	80 91 0e 01 	lds	r24, 0x010E
    1a36:	90 91 0f 01 	lds	r25, 0x010F
    1a3a:	8c 59       	subi	r24, 0x9C	; 156
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	aa 27       	eor	r26, r26
    1a40:	97 fd       	sbrc	r25, 7
    1a42:	a0 95       	com	r26
    1a44:	ba 2f       	mov	r27, r26
    1a46:	28 17       	cp	r18, r24
    1a48:	39 07       	cpc	r19, r25
    1a4a:	4a 07       	cpc	r20, r26
    1a4c:	5b 07       	cpc	r21, r27
    1a4e:	4c f4       	brge	.+18     	; 0x1a62 <safety_and_idle+0xf4>
    1a50:	80 91 54 01 	lds	r24, 0x0154
    1a54:	90 91 55 01 	lds	r25, 0x0155
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	90 93 55 01 	sts	0x0155, r25
    1a5e:	80 93 54 01 	sts	0x0154, r24

		//interrupt blinking if stick isn't centered (helps to verify TX is working)
		if ( leftright > (heading_center + heading_leftthresh) ) {set_led_on(); delay_ms_with_pwm(200);}
    1a62:	80 91 a2 01 	lds	r24, 0x01A2
    1a66:	90 91 a3 01 	lds	r25, 0x01A3
    1a6a:	a0 91 a4 01 	lds	r26, 0x01A4
    1a6e:	b0 91 a5 01 	lds	r27, 0x01A5
    1a72:	20 91 18 01 	lds	r18, 0x0118
    1a76:	30 91 19 01 	lds	r19, 0x0119
    1a7a:	60 91 16 01 	lds	r22, 0x0116
    1a7e:	70 91 17 01 	lds	r23, 0x0117
    1a82:	26 0f       	add	r18, r22
    1a84:	37 1f       	adc	r19, r23
    1a86:	44 27       	eor	r20, r20
    1a88:	37 fd       	sbrc	r19, 7
    1a8a:	40 95       	com	r20
    1a8c:	54 2f       	mov	r21, r20
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	4a 07       	cpc	r20, r26
    1a94:	5b 07       	cpc	r21, r27
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <safety_and_idle+0x134>
    1a98:	5d 9a       	sbi	0x0b, 5	; 11
    1a9a:	88 ec       	ldi	r24, 0xC8	; 200
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
		if ( leftright < (heading_center + heading_rightthresh) ) {set_led_on(); delay_ms_with_pwm(200);}
    1aa2:	80 91 a2 01 	lds	r24, 0x01A2
    1aa6:	90 91 a3 01 	lds	r25, 0x01A3
    1aaa:	a0 91 a4 01 	lds	r26, 0x01A4
    1aae:	b0 91 a5 01 	lds	r27, 0x01A5
    1ab2:	20 91 1a 01 	lds	r18, 0x011A
    1ab6:	30 91 1b 01 	lds	r19, 0x011B
    1aba:	60 91 16 01 	lds	r22, 0x0116
    1abe:	70 91 17 01 	lds	r23, 0x0117
    1ac2:	26 0f       	add	r18, r22
    1ac4:	37 1f       	adc	r19, r23
    1ac6:	44 27       	eor	r20, r20
    1ac8:	37 fd       	sbrc	r19, 7
    1aca:	40 95       	com	r20
    1acc:	54 2f       	mov	r21, r20
    1ace:	82 17       	cp	r24, r18
    1ad0:	93 07       	cpc	r25, r19
    1ad2:	a4 07       	cpc	r26, r20
    1ad4:	b5 07       	cpc	r27, r21
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <safety_and_idle+0x174>
    1ad8:	5d 9a       	sbi	0x0b, 5	; 11
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>

		//sit there and flash LED
		
		toggle_led();
    1ae2:	8b b1       	in	r24, 0x0b	; 11
    1ae4:	89 25       	eor	r24, r9
    1ae6:	8b b9       	out	0x0b, r24	; 11
		delay_ms_with_pwm(30);		
    1ae8:	8e e1       	ldi	r24, 0x1E	; 30
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
		

		//slower LED flash if in config mode
		if (in_config_mode == 1) {set_led_off(); delay_ms_with_pwm(200);}		
    1af0:	80 91 d6 01 	lds	r24, 0x01D6
    1af4:	90 91 d7 01 	lds	r25, 0x01D7
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	29 f4       	brne	.+10     	; 0x1b06 <safety_and_idle+0x198>
    1afc:	5d 98       	cbi	0x0b, 5	; 11
    1afe:	88 ec       	ldi	r24, 0xC8	; 200
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
		
		
		//verifies we got a centered forwardback stick at least once before allowing config mode (prevents boot directly into config mode if fail-safe is below center)
		if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))
    1b06:	20 91 7c 01 	lds	r18, 0x017C
    1b0a:	30 91 7d 01 	lds	r19, 0x017D
    1b0e:	40 91 7e 01 	lds	r20, 0x017E
    1b12:	50 91 7f 01 	lds	r21, 0x017F
    1b16:	60 91 10 01 	lds	r22, 0x0110
    1b1a:	70 91 11 01 	lds	r23, 0x0111
    1b1e:	80 91 14 01 	lds	r24, 0x0114
    1b22:	90 91 15 01 	lds	r25, 0x0115
    1b26:	86 0f       	add	r24, r22
    1b28:	97 1f       	adc	r25, r23
    1b2a:	aa 27       	eor	r26, r26
    1b2c:	97 fd       	sbrc	r25, 7
    1b2e:	a0 95       	com	r26
    1b30:	ba 2f       	mov	r27, r26
    1b32:	82 17       	cp	r24, r18
    1b34:	93 07       	cpc	r25, r19
    1b36:	a4 07       	cpc	r26, r20
    1b38:	b5 07       	cpc	r27, r21
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <safety_and_idle+0x1d0>
    1b3c:	53 c0       	rjmp	.+166    	; 0x1be4 <safety_and_idle+0x276>
    1b3e:	20 91 7c 01 	lds	r18, 0x017C
    1b42:	30 91 7d 01 	lds	r19, 0x017D
    1b46:	40 91 7e 01 	lds	r20, 0x017E
    1b4a:	50 91 7f 01 	lds	r21, 0x017F
    1b4e:	80 91 12 01 	lds	r24, 0x0112
    1b52:	90 91 13 01 	lds	r25, 0x0113
    1b56:	68 0f       	add	r22, r24
    1b58:	79 1f       	adc	r23, r25
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	aa 27       	eor	r26, r26
    1b5e:	97 fd       	sbrc	r25, 7
    1b60:	a0 95       	com	r26
    1b62:	ba 2f       	mov	r27, r26
    1b64:	28 17       	cp	r18, r24
    1b66:	39 07       	cpc	r19, r25
    1b68:	4a 07       	cpc	r20, r26
    1b6a:	5b 07       	cpc	r21, r27
    1b6c:	dc f5       	brge	.+118    	; 0x1be4 <safety_and_idle+0x276>
		{

			delay_ms_with_pwm(10);
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
    1b76:	20 91 7c 01 	lds	r18, 0x017C
    1b7a:	30 91 7d 01 	lds	r19, 0x017D
    1b7e:	40 91 7e 01 	lds	r20, 0x017E
    1b82:	50 91 7f 01 	lds	r21, 0x017F
    1b86:	60 91 10 01 	lds	r22, 0x0110
    1b8a:	70 91 11 01 	lds	r23, 0x0111
    1b8e:	80 91 14 01 	lds	r24, 0x0114
    1b92:	90 91 15 01 	lds	r25, 0x0115
    1b96:	86 0f       	add	r24, r22
    1b98:	97 1f       	adc	r25, r23
    1b9a:	aa 27       	eor	r26, r26
    1b9c:	97 fd       	sbrc	r25, 7
    1b9e:	a0 95       	com	r26
    1ba0:	ba 2f       	mov	r27, r26
    1ba2:	82 17       	cp	r24, r18
    1ba4:	93 07       	cpc	r25, r19
    1ba6:	a4 07       	cpc	r26, r20
    1ba8:	b5 07       	cpc	r27, r21
    1baa:	e4 f4       	brge	.+56     	; 0x1be4 <safety_and_idle+0x276>
    1bac:	20 91 7c 01 	lds	r18, 0x017C
    1bb0:	30 91 7d 01 	lds	r19, 0x017D
    1bb4:	40 91 7e 01 	lds	r20, 0x017E
    1bb8:	50 91 7f 01 	lds	r21, 0x017F
    1bbc:	80 91 12 01 	lds	r24, 0x0112
    1bc0:	90 91 13 01 	lds	r25, 0x0113
    1bc4:	68 0f       	add	r22, r24
    1bc6:	79 1f       	adc	r23, r25
    1bc8:	cb 01       	movw	r24, r22
    1bca:	aa 27       	eor	r26, r26
    1bcc:	97 fd       	sbrc	r25, 7
    1bce:	a0 95       	com	r26
    1bd0:	ba 2f       	mov	r27, r26
    1bd2:	28 17       	cp	r18, r24
    1bd4:	39 07       	cpc	r19, r25
    1bd6:	4a 07       	cpc	r20, r26
    1bd8:	5b 07       	cpc	r21, r27
    1bda:	24 f4       	brge	.+8      	; 0x1be4 <safety_and_idle+0x276>
			{
				got_centered_forwardback = 1;
    1bdc:	d0 93 51 01 	sts	0x0151, r29
    1be0:	c0 93 50 01 	sts	0x0150, r28
			}
		}
 

		//check for enter / leave config mode
		if (forwardback < (forwardback_center + forwardback_backthresh) && got_centered_forwardback == 1)		//is the stick being held back?
    1be4:	80 91 7c 01 	lds	r24, 0x017C
    1be8:	90 91 7d 01 	lds	r25, 0x017D
    1bec:	a0 91 7e 01 	lds	r26, 0x017E
    1bf0:	b0 91 7f 01 	lds	r27, 0x017F
    1bf4:	20 91 14 01 	lds	r18, 0x0114
    1bf8:	30 91 15 01 	lds	r19, 0x0115
    1bfc:	60 91 10 01 	lds	r22, 0x0110
    1c00:	70 91 11 01 	lds	r23, 0x0111
    1c04:	26 0f       	add	r18, r22
    1c06:	37 1f       	adc	r19, r23
    1c08:	44 27       	eor	r20, r20
    1c0a:	37 fd       	sbrc	r19, 7
    1c0c:	40 95       	com	r20
    1c0e:	54 2f       	mov	r21, r20
    1c10:	82 17       	cp	r24, r18
    1c12:	93 07       	cpc	r25, r19
    1c14:	a4 07       	cpc	r26, r20
    1c16:	b5 07       	cpc	r27, r21
    1c18:	0c f0       	brlt	.+2      	; 0x1c1c <safety_and_idle+0x2ae>
    1c1a:	f8 c0       	rjmp	.+496    	; 0x1e0c <safety_and_idle+0x49e>
    1c1c:	80 91 50 01 	lds	r24, 0x0150
    1c20:	90 91 51 01 	lds	r25, 0x0151
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <safety_and_idle+0x2bc>
    1c28:	f1 c0       	rjmp	.+482    	; 0x1e0c <safety_and_idle+0x49e>
		{

			//wait a bit to make sure stick is being held...
			delay_ms_with_pwm(1000);
    1c2a:	88 ee       	ldi	r24, 0xE8	; 232
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
			//still being held back - then enter / leave config mode
			if (forwardback < (forwardback_center + forwardback_backthresh))
    1c32:	80 91 7c 01 	lds	r24, 0x017C
    1c36:	90 91 7d 01 	lds	r25, 0x017D
    1c3a:	a0 91 7e 01 	lds	r26, 0x017E
    1c3e:	b0 91 7f 01 	lds	r27, 0x017F
    1c42:	20 91 14 01 	lds	r18, 0x0114
    1c46:	30 91 15 01 	lds	r19, 0x0115
    1c4a:	60 91 10 01 	lds	r22, 0x0110
    1c4e:	70 91 11 01 	lds	r23, 0x0111
    1c52:	26 0f       	add	r18, r22
    1c54:	37 1f       	adc	r19, r23
    1c56:	44 27       	eor	r20, r20
    1c58:	37 fd       	sbrc	r19, 7
    1c5a:	40 95       	com	r20
    1c5c:	54 2f       	mov	r21, r20
    1c5e:	82 17       	cp	r24, r18
    1c60:	93 07       	cpc	r25, r19
    1c62:	a4 07       	cpc	r26, r20
    1c64:	b5 07       	cpc	r27, r21
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <safety_and_idle+0x2fc>
    1c68:	d1 c0       	rjmp	.+418    	; 0x1e0c <safety_and_idle+0x49e>
			{
				in_config_mode = !in_config_mode;
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	80 91 d6 01 	lds	r24, 0x01D6
    1c72:	90 91 d7 01 	lds	r25, 0x01D7
    1c76:	89 2b       	or	r24, r25
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <safety_and_idle+0x310>
    1c7a:	21 e0       	ldi	r18, 0x01	; 1
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	30 93 d7 01 	sts	0x01D7, r19
    1c82:	20 93 d6 01 	sts	0x01D6, r18
				delay_ms_with_pwm(1500);				//delay a bit longer to help assure config_mode isn't toggled again
    1c86:	8c ed       	ldi	r24, 0xDC	; 220
    1c88:	95 e0       	ldi	r25, 0x05	; 5
    1c8a:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>

				cli();                	//disable interrupts - seems like a good idea before saving stuff to ROM
    1c8e:	f8 94       	cli
				if (in_config_mode == 1) get_config_constants();		//read + set a few constants prior to actually going into config mode
    1c90:	80 91 d6 01 	lds	r24, 0x01D6
    1c94:	90 91 d7 01 	lds	r25, 0x01D7
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <safety_and_idle+0x332>
    1c9c:	0e 94 99 06 	call	0xd32	; 0xd32 <get_config_constants>
				if (in_config_mode == 0) save_config();				//if we're exiting config mode - save the configuration
    1ca0:	80 91 d6 01 	lds	r24, 0x01D6
    1ca4:	90 91 d7 01 	lds	r25, 0x01D7
    1ca8:	89 2b       	or	r24, r25
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <safety_and_idle+0x342>
    1cac:	0e 94 4b 0c 	call	0x1896	; 0x1896 <save_config>
				sei();  //re-enable interrupts
    1cb0:	78 94       	sei
    1cb2:	ac c0       	rjmp	.+344    	; 0x1e0c <safety_and_idle+0x49e>
	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
		{
		   
			set_led_off();
    1cb4:	5d 98       	cbi	0x0b, 5	; 11
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1cb6:	80 91 56 01 	lds	r24, 0x0156
    1cba:	90 91 57 01 	lds	r25, 0x0157
    1cbe:	a0 91 58 01 	lds	r26, 0x0158
    1cc2:	b0 91 59 01 	lds	r27, 0x0159
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	a1 05       	cpc	r26, r1
    1cca:	b1 05       	cpc	r27, r1
    1ccc:	91 f5       	brne	.+100    	; 0x1d32 <safety_and_idle+0x3c4>
			{
				for (x = 0; x < 15; x++)
    1cce:	10 92 74 01 	sts	0x0174, r1
    1cd2:	10 92 75 01 	sts	0x0175, r1
    1cd6:	10 92 76 01 	sts	0x0176, r1
    1cda:	10 92 77 01 	sts	0x0177, r1
    1cde:	1d c0       	rjmp	.+58     	; 0x1d1a <safety_and_idle+0x3ac>
				{
					set_led_on();
    1ce0:	5d 9a       	sbi	0x0b, 5	; 11
					delay_ms_with_pwm (5);
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
					set_led_off();
    1cea:	5d 98       	cbi	0x0b, 5	; 11
					delay_ms_with_pwm (30);				
    1cec:	8e e1       	ldi	r24, 0x1E	; 30
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
			{
				for (x = 0; x < 15; x++)
    1cf4:	80 91 74 01 	lds	r24, 0x0174
    1cf8:	90 91 75 01 	lds	r25, 0x0175
    1cfc:	a0 91 76 01 	lds	r26, 0x0176
    1d00:	b0 91 77 01 	lds	r27, 0x0177
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	a1 1d       	adc	r26, r1
    1d08:	b1 1d       	adc	r27, r1
    1d0a:	80 93 74 01 	sts	0x0174, r24
    1d0e:	90 93 75 01 	sts	0x0175, r25
    1d12:	a0 93 76 01 	sts	0x0176, r26
    1d16:	b0 93 77 01 	sts	0x0177, r27
    1d1a:	80 91 74 01 	lds	r24, 0x0174
    1d1e:	90 91 75 01 	lds	r25, 0x0175
    1d22:	a0 91 76 01 	lds	r26, 0x0176
    1d26:	b0 91 77 01 	lds	r27, 0x0177
    1d2a:	0f 97       	sbiw	r24, 0x0f	; 15
    1d2c:	a1 05       	cpc	r26, r1
    1d2e:	b1 05       	cpc	r27, r1
    1d30:	bc f2       	brlt	.-82     	; 0x1ce0 <safety_and_idle+0x372>
					set_led_off();
					delay_ms_with_pwm (30);				
				}
			}
			
			delay_ms_with_pwm (800);
    1d32:	80 e2       	ldi	r24, 0x20	; 32
    1d34:	93 e0       	ldi	r25, 0x03	; 3
    1d36:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
    1d3a:	a0 92 74 01 	sts	0x0174, r10
    1d3e:	b0 92 75 01 	sts	0x0175, r11
    1d42:	c0 92 76 01 	sts	0x0176, r12
    1d46:	d0 92 77 01 	sts	0x0177, r13
    1d4a:	1a c0       	rjmp	.+52     	; 0x1d80 <safety_and_idle+0x412>
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
			{
				x = x + 100;		
    1d4c:	84 e6       	ldi	r24, 0x64	; 100
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	a0 e0       	ldi	r26, 0x00	; 0
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e8 0e       	add	r14, r24
    1d56:	f9 1e       	adc	r15, r25
    1d58:	0a 1f       	adc	r16, r26
    1d5a:	1b 1f       	adc	r17, r27
    1d5c:	e0 92 74 01 	sts	0x0174, r14
    1d60:	f0 92 75 01 	sts	0x0175, r15
    1d64:	00 93 76 01 	sts	0x0176, r16
    1d68:	10 93 77 01 	sts	0x0177, r17
				set_led_on();
    1d6c:	5d 9a       	sbi	0x0b, 5	; 11
				delay_ms_with_pwm (50);
    1d6e:	82 e3       	ldi	r24, 0x32	; 50
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
				set_led_off();
    1d76:	5d 98       	cbi	0x0b, 5	; 11
				delay_ms_with_pwm (400);
    1d78:	80 e9       	ldi	r24, 0x90	; 144
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	0e 94 35 04 	call	0x86a	; 0x86a <delay_ms_with_pwm>
			}
			
			delay_ms_with_pwm (800);
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
    1d80:	e0 90 74 01 	lds	r14, 0x0174
    1d84:	f0 90 75 01 	lds	r15, 0x0175
    1d88:	00 91 76 01 	lds	r16, 0x0176
    1d8c:	10 91 77 01 	lds	r17, 0x0177
    1d90:	80 91 56 01 	lds	r24, 0x0156
    1d94:	90 91 57 01 	lds	r25, 0x0157
    1d98:	a0 91 58 01 	lds	r26, 0x0158
    1d9c:	b0 91 59 01 	lds	r27, 0x0159
    1da0:	e8 16       	cp	r14, r24
    1da2:	f9 06       	cpc	r15, r25
    1da4:	0a 07       	cpc	r16, r26
    1da6:	1b 07       	cpc	r17, r27
    1da8:	8c f5       	brge	.+98     	; 0x1e0c <safety_and_idle+0x49e>
    1daa:	80 91 7c 01 	lds	r24, 0x017C
    1dae:	90 91 7d 01 	lds	r25, 0x017D
    1db2:	a0 91 7e 01 	lds	r26, 0x017E
    1db6:	b0 91 7f 01 	lds	r27, 0x017F
    1dba:	20 91 12 01 	lds	r18, 0x0112
    1dbe:	30 91 13 01 	lds	r19, 0x0113
    1dc2:	60 91 10 01 	lds	r22, 0x0110
    1dc6:	70 91 11 01 	lds	r23, 0x0111
    1dca:	26 0f       	add	r18, r22
    1dcc:	37 1f       	adc	r19, r23
    1dce:	44 27       	eor	r20, r20
    1dd0:	37 fd       	sbrc	r19, 7
    1dd2:	40 95       	com	r20
    1dd4:	54 2f       	mov	r21, r20
    1dd6:	28 17       	cp	r18, r24
    1dd8:	39 07       	cpc	r19, r25
    1dda:	4a 07       	cpc	r20, r26
    1ddc:	5b 07       	cpc	r21, r27
    1dde:	b4 f4       	brge	.+44     	; 0x1e0c <safety_and_idle+0x49e>
    1de0:	20 91 98 01 	lds	r18, 0x0198
    1de4:	30 91 99 01 	lds	r19, 0x0199
    1de8:	40 91 9a 01 	lds	r20, 0x019A
    1dec:	50 91 9b 01 	lds	r21, 0x019B
    1df0:	80 91 0c 01 	lds	r24, 0x010C
    1df4:	90 91 0d 01 	lds	r25, 0x010D
    1df8:	aa 27       	eor	r26, r26
    1dfa:	97 fd       	sbrc	r25, 7
    1dfc:	a0 95       	com	r26
    1dfe:	ba 2f       	mov	r27, r26
    1e00:	28 17       	cp	r18, r24
    1e02:	39 07       	cpc	r19, r25
    1e04:	4a 07       	cpc	r20, r26
    1e06:	5b 07       	cpc	r21, r27
    1e08:	0c f4       	brge	.+2      	; 0x1e0c <safety_and_idle+0x49e>
    1e0a:	a0 cf       	rjmp	.-192    	; 0x1d4c <safety_and_idle+0x3de>
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1e0c:	80 91 7c 01 	lds	r24, 0x017C
    1e10:	90 91 7d 01 	lds	r25, 0x017D
    1e14:	a0 91 7e 01 	lds	r26, 0x017E
    1e18:	b0 91 7f 01 	lds	r27, 0x017F
    1e1c:	20 91 12 01 	lds	r18, 0x0112
    1e20:	30 91 13 01 	lds	r19, 0x0113
    1e24:	60 91 10 01 	lds	r22, 0x0110
    1e28:	70 91 11 01 	lds	r23, 0x0111
    1e2c:	26 0f       	add	r18, r22
    1e2e:	37 1f       	adc	r19, r23
    1e30:	44 27       	eor	r20, r20
    1e32:	37 fd       	sbrc	r19, 7
    1e34:	40 95       	com	r20
    1e36:	54 2f       	mov	r21, r20
    1e38:	28 17       	cp	r18, r24
    1e3a:	39 07       	cpc	r19, r25
    1e3c:	4a 07       	cpc	r20, r26
    1e3e:	5b 07       	cpc	r21, r27
    1e40:	b4 f4       	brge	.+44     	; 0x1e6e <safety_and_idle+0x500>
    1e42:	20 91 98 01 	lds	r18, 0x0198
    1e46:	30 91 99 01 	lds	r19, 0x0199
    1e4a:	40 91 9a 01 	lds	r20, 0x019A
    1e4e:	50 91 9b 01 	lds	r21, 0x019B
    1e52:	80 91 0c 01 	lds	r24, 0x010C
    1e56:	90 91 0d 01 	lds	r25, 0x010D
    1e5a:	aa 27       	eor	r26, r26
    1e5c:	97 fd       	sbrc	r25, 7
    1e5e:	a0 95       	com	r26
    1e60:	ba 2f       	mov	r27, r26
    1e62:	28 17       	cp	r18, r24
    1e64:	39 07       	cpc	r19, r25
    1e66:	4a 07       	cpc	r20, r26
    1e68:	5b 07       	cpc	r21, r27
    1e6a:	0c f4       	brge	.+2      	; 0x1e6e <safety_and_idle+0x500>
    1e6c:	23 cf       	rjmp	.-442    	; 0x1cb4 <safety_and_idle+0x346>
	//if throttle is lower than throttle_low - or is over 100 beyond throttle_high - bot stays powered down
	//also - if we've gone more than 11 rotations without getting fresh throttle data - assume something has gone wrong / shutdown
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
    1e6e:	20 91 98 01 	lds	r18, 0x0198
    1e72:	30 91 99 01 	lds	r19, 0x0199
    1e76:	40 91 9a 01 	lds	r20, 0x019A
    1e7a:	50 91 9b 01 	lds	r21, 0x019B
    1e7e:	80 91 0c 01 	lds	r24, 0x010C
    1e82:	90 91 0d 01 	lds	r25, 0x010D
    1e86:	aa 27       	eor	r26, r26
    1e88:	97 fd       	sbrc	r25, 7
    1e8a:	a0 95       	com	r26
    1e8c:	ba 2f       	mov	r27, r26
    1e8e:	28 17       	cp	r18, r24
    1e90:	39 07       	cpc	r19, r25
    1e92:	4a 07       	cpc	r20, r26
    1e94:	5b 07       	cpc	r21, r27
    1e96:	0c f4       	brge	.+2      	; 0x1e9a <safety_and_idle+0x52c>
    1e98:	80 cd       	rjmp	.-1280   	; 0x199a <safety_and_idle+0x2c>
    1e9a:	20 91 98 01 	lds	r18, 0x0198
    1e9e:	30 91 99 01 	lds	r19, 0x0199
    1ea2:	40 91 9a 01 	lds	r20, 0x019A
    1ea6:	50 91 9b 01 	lds	r21, 0x019B
    1eaa:	80 91 0e 01 	lds	r24, 0x010E
    1eae:	90 91 0f 01 	lds	r25, 0x010F
    1eb2:	8c 59       	subi	r24, 0x9C	; 156
    1eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb6:	aa 27       	eor	r26, r26
    1eb8:	97 fd       	sbrc	r25, 7
    1eba:	a0 95       	com	r26
    1ebc:	ba 2f       	mov	r27, r26
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	a4 07       	cpc	r26, r20
    1ec4:	b5 07       	cpc	r27, r21
    1ec6:	0c f4       	brge	.+2      	; 0x1eca <safety_and_idle+0x55c>
    1ec8:	68 cd       	rjmp	.-1328   	; 0x199a <safety_and_idle+0x2c>
    1eca:	80 91 52 01 	lds	r24, 0x0152
    1ece:	90 91 53 01 	lds	r25, 0x0153
    1ed2:	0c 97       	sbiw	r24, 0x0c	; 12
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <safety_and_idle+0x56a>
    1ed6:	61 cd       	rjmp	.-1342   	; 0x199a <safety_and_idle+0x2c>
    1ed8:	80 91 54 01 	lds	r24, 0x0154
    1edc:	90 91 55 01 	lds	r25, 0x0155
    1ee0:	04 97       	sbiw	r24, 0x04	; 4
    1ee2:	0c f4       	brge	.+2      	; 0x1ee6 <safety_and_idle+0x578>
    1ee4:	5a cd       	rjmp	.-1356   	; 0x199a <safety_and_idle+0x2c>
		}


	}
	
	bot_is_idle = 0;		
    1ee6:	10 92 db 01 	sts	0x01DB, r1
    1eea:	10 92 da 01 	sts	0x01DA, r1

}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	af 90       	pop	r10
    1f02:	9f 90       	pop	r9
    1f04:	08 95       	ret

00001f06 <load_config>:
	}
}


void load_config(void)
{
    1f06:	af 92       	push	r10
    1f08:	bf 92       	push	r11
    1f0a:	cf 92       	push	r12
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17

	float tracking_word1;		//first word of tracking_comp
	float tracking_word2;		//second word of tracking_comp

	//only load config data if "saved_data_valid" indicates it was saved previously
	if (eeprom_read_word(&saved_data_valid) == 128)
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f1e:	80 38       	cpi	r24, 0x80	; 128
    1f20:	91 05       	cpc	r25, r1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <load_config+0x20>
    1f24:	64 c0       	rjmp	.+200    	; 0x1fee <load_config+0xe8>
	{

		led_adjust = eeprom_read_word(&led_adjust_save);	//loads led offset
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1f3a:	60 93 40 01 	sts	0x0140, r22
    1f3e:	70 93 41 01 	sts	0x0141, r23
    1f42:	80 93 42 01 	sts	0x0142, r24
    1f46:	90 93 43 01 	sts	0x0143, r25
		tracking_word1 = (eeprom_read_word(&tracking_comp_save_word1));		//loads tracking comp
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1f5e:	5b 01       	movw	r10, r22
    1f60:	6c 01       	movw	r12, r24
		tracking_word2 = (eeprom_read_word(&tracking_comp_save_word2));		//loads tracking comp
    1f62:	86 e0       	ldi	r24, 0x06	; 6
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1f76:	7b 01       	movw	r14, r22
    1f78:	8c 01       	movw	r16, r24
		heading_center = eeprom_read_word(&heading_center_save);	//loads heading_center
    1f7a:	88 e0       	ldi	r24, 0x08	; 8
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f82:	90 93 17 01 	sts	0x0117, r25
    1f86:	80 93 16 01 	sts	0x0116, r24
		base_accel = eeprom_read_word(&base_accel_save);		//loads base accelerometer value
    1f8a:	8a e0       	ldi	r24, 0x0A	; 10
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_word_m168>
    1f92:	90 93 45 01 	sts	0x0145, r25
    1f96:	80 93 44 01 	sts	0x0144, r24
	
		tracking_word1 = tracking_word1 / 1000;	//converts 1st tracking comp word back to float
		
		tracking_word2 = tracking_word2 / 1000;		//converts 2nd tracking comp word back to float
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	b7 01       	movw	r22, r14
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a e7       	ldi	r20, 0x7A	; 122
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    1faa:	7b 01       	movw	r14, r22
    1fac:	8c 01       	movw	r16, r24
		tracking_word2 = tracking_word2 / 10000;	//put it in the correct decimal place
		
		tracking_comp = tracking_word1 + tracking_word2;	//puts the two floats together
    1fae:	c6 01       	movw	r24, r12
    1fb0:	b5 01       	movw	r22, r10
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a e7       	ldi	r20, 0x7A	; 122
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    1fbe:	5b 01       	movw	r10, r22
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e4       	ldi	r19, 0x40	; 64
    1fca:	4c e1       	ldi	r20, 0x1C	; 28
    1fcc:	56 e4       	ldi	r21, 0x46	; 70
    1fce:	0e 94 bf 10 	call	0x217e	; 0x217e <__divsf3>
    1fd2:	9b 01       	movw	r18, r22
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	c6 01       	movw	r24, r12
    1fd8:	b5 01       	movw	r22, r10
    1fda:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    1fde:	60 93 3c 01 	sts	0x013C, r22
    1fe2:	70 93 3d 01 	sts	0x013D, r23
    1fe6:	80 93 3e 01 	sts	0x013E, r24
    1fea:	90 93 3f 01 	sts	0x013F, r25
	}

}
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	08 95       	ret

00002000 <main>:

int main(void)
{
	
		
	setup();			//do initial setup stuff - set pins / interrupts / etc.
    2000:	0e 94 60 04 	call	0x8c0	; 0x8c0 <setup>
			
	load_config();		//try to load configuration data from ROM
    2004:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <load_config>
				
	//execute the main loop indefinitely...
	
//timer 2 setup	
TCCR2B = 1<<CS22 | 1<<CS21 | 0<<CS20;  
    2008:	86 e0       	ldi	r24, 0x06	; 6
    200a:	80 93 b1 00 	sts	0x00B1, r24
	{		
		
												//the lines before main_calculations don't have their execution time accounted for in the code 
												//but only take approximately 2us to execute (measured) - (0.006% of a rotation at 2000 rpm)
												
		rotations_since_throttle_was_set ++;	//used as a safety counter - if no good throttle data is received for certain number of rotations - the bot shuts down
    200e:	80 91 52 01 	lds	r24, 0x0152
    2012:	90 91 53 01 	lds	r25, 0x0153
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	90 93 53 01 	sts	0x0153, r25
    201c:	80 93 52 01 	sts	0x0152, r24
		rotation_count ++;
    2020:	80 91 4c 01 	lds	r24, 0x014C
    2024:	90 91 4d 01 	lds	r25, 0x014D
    2028:	a0 91 4e 01 	lds	r26, 0x014E
    202c:	b0 91 4f 01 	lds	r27, 0x014F
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	a1 1d       	adc	r26, r1
    2034:	b1 1d       	adc	r27, r1
    2036:	80 93 4c 01 	sts	0x014C, r24
    203a:	90 93 4d 01 	sts	0x014D, r25
    203e:	a0 93 4e 01 	sts	0x014E, r26
    2042:	b0 93 4f 01 	sts	0x014F, r27
				
		safety_and_idle();						//does safety check / sees if we're just sitting idle - also checks if config mode is requested
    2046:	0e 94 b7 0c 	call	0x196e	; 0x196e <safety_and_idle>
		
		alternate_motor_cycle = !alternate_motor_cycle;     //alternates alternate_motor_cycle - used to balance spin / avoid favoring one motor
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	80 91 4a 01 	lds	r24, 0x014A
    2052:	90 91 4b 01 	lds	r25, 0x014B
    2056:	89 2b       	or	r24, r25
    2058:	11 f4       	brne	.+4      	; 0x205e <main+0x5e>
    205a:	21 e0       	ldi	r18, 0x01	; 1
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	30 93 4b 01 	sts	0x014B, r19
    2062:	20 93 4a 01 	sts	0x014A, r18

		led_hold_over = 0;						//reset the LED counter
    2066:	10 92 78 01 	sts	0x0178, r1
    206a:	10 92 79 01 	sts	0x0179, r1
    206e:	10 92 7a 01 	sts	0x017A, r1
    2072:	10 92 7b 01 	sts	0x017B, r1
		
		main_calculations();					//reads accel data and does all the math
    2076:	0e 94 2e 07 	call	0xe5c	; 0xe5c <main_calculations>
												//takes about 400us - but is measured real-time / compensated for

		do_spin_180(1);							//1st 180 degrees of spin
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <do_spin_180>

		led_hold_over = TCNT1;					//carry over led_counter from last spin
    2082:	80 91 84 00 	lds	r24, 0x0084
    2086:	90 91 85 00 	lds	r25, 0x0085
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	80 93 78 01 	sts	0x0178, r24
    2092:	90 93 79 01 	sts	0x0179, r25
    2096:	a0 93 7a 01 	sts	0x017A, r26
    209a:	b0 93 7b 01 	sts	0x017B, r27
				
		main_calculations();					//read accel / do the main calculations again
    209e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <main_calculations>
												//time doing math is tracked - but since time doing calculations is outside the motor loop - if it all falls in one cycle or the other...
												//..it may still be enough to cause a slight bias when translating
												//should really present a very small amount of time (less than 1% at 2000rpm) 
												//since we're resampling the accel - this may also provide a little better accuracy

		do_spin_180(2);							//2nd 180 degrees of spin
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <do_spin_180>
    20aa:	b1 cf       	rjmp	.-158    	; 0x200e <main+0xe>

000020ac <__subsf3>:
    20ac:	50 58       	subi	r21, 0x80	; 128

000020ae <__addsf3>:
    20ae:	bb 27       	eor	r27, r27
    20b0:	aa 27       	eor	r26, r26
    20b2:	0e d0       	rcall	.+28     	; 0x20d0 <__addsf3x>
    20b4:	75 c1       	rjmp	.+746    	; 0x23a0 <__fp_round>
    20b6:	66 d1       	rcall	.+716    	; 0x2384 <__fp_pscA>
    20b8:	30 f0       	brcs	.+12     	; 0x20c6 <__addsf3+0x18>
    20ba:	6b d1       	rcall	.+726    	; 0x2392 <__fp_pscB>
    20bc:	20 f0       	brcs	.+8      	; 0x20c6 <__addsf3+0x18>
    20be:	31 f4       	brne	.+12     	; 0x20cc <__addsf3+0x1e>
    20c0:	9f 3f       	cpi	r25, 0xFF	; 255
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__addsf3+0x1a>
    20c4:	1e f4       	brtc	.+6      	; 0x20cc <__addsf3+0x1e>
    20c6:	5b c1       	rjmp	.+694    	; 0x237e <__fp_nan>
    20c8:	0e f4       	brtc	.+2      	; 0x20cc <__addsf3+0x1e>
    20ca:	e0 95       	com	r30
    20cc:	e7 fb       	bst	r30, 7
    20ce:	51 c1       	rjmp	.+674    	; 0x2372 <__fp_inf>

000020d0 <__addsf3x>:
    20d0:	e9 2f       	mov	r30, r25
    20d2:	77 d1       	rcall	.+750    	; 0x23c2 <__fp_split3>
    20d4:	80 f3       	brcs	.-32     	; 0x20b6 <__addsf3+0x8>
    20d6:	ba 17       	cp	r27, r26
    20d8:	62 07       	cpc	r22, r18
    20da:	73 07       	cpc	r23, r19
    20dc:	84 07       	cpc	r24, r20
    20de:	95 07       	cpc	r25, r21
    20e0:	18 f0       	brcs	.+6      	; 0x20e8 <__addsf3x+0x18>
    20e2:	71 f4       	brne	.+28     	; 0x2100 <__addsf3x+0x30>
    20e4:	9e f5       	brtc	.+102    	; 0x214c <__addsf3x+0x7c>
    20e6:	8f c1       	rjmp	.+798    	; 0x2406 <__fp_zero>
    20e8:	0e f4       	brtc	.+2      	; 0x20ec <__addsf3x+0x1c>
    20ea:	e0 95       	com	r30
    20ec:	0b 2e       	mov	r0, r27
    20ee:	ba 2f       	mov	r27, r26
    20f0:	a0 2d       	mov	r26, r0
    20f2:	0b 01       	movw	r0, r22
    20f4:	b9 01       	movw	r22, r18
    20f6:	90 01       	movw	r18, r0
    20f8:	0c 01       	movw	r0, r24
    20fa:	ca 01       	movw	r24, r20
    20fc:	a0 01       	movw	r20, r0
    20fe:	11 24       	eor	r1, r1
    2100:	ff 27       	eor	r31, r31
    2102:	59 1b       	sub	r21, r25
    2104:	99 f0       	breq	.+38     	; 0x212c <__addsf3x+0x5c>
    2106:	59 3f       	cpi	r21, 0xF9	; 249
    2108:	50 f4       	brcc	.+20     	; 0x211e <__addsf3x+0x4e>
    210a:	50 3e       	cpi	r21, 0xE0	; 224
    210c:	68 f1       	brcs	.+90     	; 0x2168 <__addsf3x+0x98>
    210e:	1a 16       	cp	r1, r26
    2110:	f0 40       	sbci	r31, 0x00	; 0
    2112:	a2 2f       	mov	r26, r18
    2114:	23 2f       	mov	r18, r19
    2116:	34 2f       	mov	r19, r20
    2118:	44 27       	eor	r20, r20
    211a:	58 5f       	subi	r21, 0xF8	; 248
    211c:	f3 cf       	rjmp	.-26     	; 0x2104 <__addsf3x+0x34>
    211e:	46 95       	lsr	r20
    2120:	37 95       	ror	r19
    2122:	27 95       	ror	r18
    2124:	a7 95       	ror	r26
    2126:	f0 40       	sbci	r31, 0x00	; 0
    2128:	53 95       	inc	r21
    212a:	c9 f7       	brne	.-14     	; 0x211e <__addsf3x+0x4e>
    212c:	7e f4       	brtc	.+30     	; 0x214c <__addsf3x+0x7c>
    212e:	1f 16       	cp	r1, r31
    2130:	ba 0b       	sbc	r27, r26
    2132:	62 0b       	sbc	r22, r18
    2134:	73 0b       	sbc	r23, r19
    2136:	84 0b       	sbc	r24, r20
    2138:	ba f0       	brmi	.+46     	; 0x2168 <__addsf3x+0x98>
    213a:	91 50       	subi	r25, 0x01	; 1
    213c:	a1 f0       	breq	.+40     	; 0x2166 <__addsf3x+0x96>
    213e:	ff 0f       	add	r31, r31
    2140:	bb 1f       	adc	r27, r27
    2142:	66 1f       	adc	r22, r22
    2144:	77 1f       	adc	r23, r23
    2146:	88 1f       	adc	r24, r24
    2148:	c2 f7       	brpl	.-16     	; 0x213a <__addsf3x+0x6a>
    214a:	0e c0       	rjmp	.+28     	; 0x2168 <__addsf3x+0x98>
    214c:	ba 0f       	add	r27, r26
    214e:	62 1f       	adc	r22, r18
    2150:	73 1f       	adc	r23, r19
    2152:	84 1f       	adc	r24, r20
    2154:	48 f4       	brcc	.+18     	; 0x2168 <__addsf3x+0x98>
    2156:	87 95       	ror	r24
    2158:	77 95       	ror	r23
    215a:	67 95       	ror	r22
    215c:	b7 95       	ror	r27
    215e:	f7 95       	ror	r31
    2160:	9e 3f       	cpi	r25, 0xFE	; 254
    2162:	08 f0       	brcs	.+2      	; 0x2166 <__addsf3x+0x96>
    2164:	b3 cf       	rjmp	.-154    	; 0x20cc <__addsf3+0x1e>
    2166:	93 95       	inc	r25
    2168:	88 0f       	add	r24, r24
    216a:	08 f0       	brcs	.+2      	; 0x216e <__addsf3x+0x9e>
    216c:	99 27       	eor	r25, r25
    216e:	ee 0f       	add	r30, r30
    2170:	97 95       	ror	r25
    2172:	87 95       	ror	r24
    2174:	08 95       	ret

00002176 <__cmpsf2>:
    2176:	d9 d0       	rcall	.+434    	; 0x232a <__fp_cmp>
    2178:	08 f4       	brcc	.+2      	; 0x217c <__cmpsf2+0x6>
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	08 95       	ret

0000217e <__divsf3>:
    217e:	0c d0       	rcall	.+24     	; 0x2198 <__divsf3x>
    2180:	0f c1       	rjmp	.+542    	; 0x23a0 <__fp_round>
    2182:	07 d1       	rcall	.+526    	; 0x2392 <__fp_pscB>
    2184:	40 f0       	brcs	.+16     	; 0x2196 <__divsf3+0x18>
    2186:	fe d0       	rcall	.+508    	; 0x2384 <__fp_pscA>
    2188:	30 f0       	brcs	.+12     	; 0x2196 <__divsf3+0x18>
    218a:	21 f4       	brne	.+8      	; 0x2194 <__divsf3+0x16>
    218c:	5f 3f       	cpi	r21, 0xFF	; 255
    218e:	19 f0       	breq	.+6      	; 0x2196 <__divsf3+0x18>
    2190:	f0 c0       	rjmp	.+480    	; 0x2372 <__fp_inf>
    2192:	51 11       	cpse	r21, r1
    2194:	39 c1       	rjmp	.+626    	; 0x2408 <__fp_szero>
    2196:	f3 c0       	rjmp	.+486    	; 0x237e <__fp_nan>

00002198 <__divsf3x>:
    2198:	14 d1       	rcall	.+552    	; 0x23c2 <__fp_split3>
    219a:	98 f3       	brcs	.-26     	; 0x2182 <__divsf3+0x4>

0000219c <__divsf3_pse>:
    219c:	99 23       	and	r25, r25
    219e:	c9 f3       	breq	.-14     	; 0x2192 <__divsf3+0x14>
    21a0:	55 23       	and	r21, r21
    21a2:	b1 f3       	breq	.-20     	; 0x2190 <__divsf3+0x12>
    21a4:	95 1b       	sub	r25, r21
    21a6:	55 0b       	sbc	r21, r21
    21a8:	bb 27       	eor	r27, r27
    21aa:	aa 27       	eor	r26, r26
    21ac:	62 17       	cp	r22, r18
    21ae:	73 07       	cpc	r23, r19
    21b0:	84 07       	cpc	r24, r20
    21b2:	38 f0       	brcs	.+14     	; 0x21c2 <__divsf3_pse+0x26>
    21b4:	9f 5f       	subi	r25, 0xFF	; 255
    21b6:	5f 4f       	sbci	r21, 0xFF	; 255
    21b8:	22 0f       	add	r18, r18
    21ba:	33 1f       	adc	r19, r19
    21bc:	44 1f       	adc	r20, r20
    21be:	aa 1f       	adc	r26, r26
    21c0:	a9 f3       	breq	.-22     	; 0x21ac <__divsf3_pse+0x10>
    21c2:	33 d0       	rcall	.+102    	; 0x222a <__divsf3_pse+0x8e>
    21c4:	0e 2e       	mov	r0, r30
    21c6:	3a f0       	brmi	.+14     	; 0x21d6 <__divsf3_pse+0x3a>
    21c8:	e0 e8       	ldi	r30, 0x80	; 128
    21ca:	30 d0       	rcall	.+96     	; 0x222c <__divsf3_pse+0x90>
    21cc:	91 50       	subi	r25, 0x01	; 1
    21ce:	50 40       	sbci	r21, 0x00	; 0
    21d0:	e6 95       	lsr	r30
    21d2:	00 1c       	adc	r0, r0
    21d4:	ca f7       	brpl	.-14     	; 0x21c8 <__divsf3_pse+0x2c>
    21d6:	29 d0       	rcall	.+82     	; 0x222a <__divsf3_pse+0x8e>
    21d8:	fe 2f       	mov	r31, r30
    21da:	27 d0       	rcall	.+78     	; 0x222a <__divsf3_pse+0x8e>
    21dc:	66 0f       	add	r22, r22
    21de:	77 1f       	adc	r23, r23
    21e0:	88 1f       	adc	r24, r24
    21e2:	bb 1f       	adc	r27, r27
    21e4:	26 17       	cp	r18, r22
    21e6:	37 07       	cpc	r19, r23
    21e8:	48 07       	cpc	r20, r24
    21ea:	ab 07       	cpc	r26, r27
    21ec:	b0 e8       	ldi	r27, 0x80	; 128
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <__divsf3_pse+0x56>
    21f0:	bb 0b       	sbc	r27, r27
    21f2:	80 2d       	mov	r24, r0
    21f4:	bf 01       	movw	r22, r30
    21f6:	ff 27       	eor	r31, r31
    21f8:	93 58       	subi	r25, 0x83	; 131
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	2a f0       	brmi	.+10     	; 0x2208 <__divsf3_pse+0x6c>
    21fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2200:	51 05       	cpc	r21, r1
    2202:	68 f0       	brcs	.+26     	; 0x221e <__divsf3_pse+0x82>
    2204:	b6 c0       	rjmp	.+364    	; 0x2372 <__fp_inf>
    2206:	00 c1       	rjmp	.+512    	; 0x2408 <__fp_szero>
    2208:	5f 3f       	cpi	r21, 0xFF	; 255
    220a:	ec f3       	brlt	.-6      	; 0x2206 <__divsf3_pse+0x6a>
    220c:	98 3e       	cpi	r25, 0xE8	; 232
    220e:	dc f3       	brlt	.-10     	; 0x2206 <__divsf3_pse+0x6a>
    2210:	86 95       	lsr	r24
    2212:	77 95       	ror	r23
    2214:	67 95       	ror	r22
    2216:	b7 95       	ror	r27
    2218:	f7 95       	ror	r31
    221a:	9f 5f       	subi	r25, 0xFF	; 255
    221c:	c9 f7       	brne	.-14     	; 0x2210 <__divsf3_pse+0x74>
    221e:	88 0f       	add	r24, r24
    2220:	91 1d       	adc	r25, r1
    2222:	96 95       	lsr	r25
    2224:	87 95       	ror	r24
    2226:	97 f9       	bld	r25, 7
    2228:	08 95       	ret
    222a:	e1 e0       	ldi	r30, 0x01	; 1
    222c:	66 0f       	add	r22, r22
    222e:	77 1f       	adc	r23, r23
    2230:	88 1f       	adc	r24, r24
    2232:	bb 1f       	adc	r27, r27
    2234:	62 17       	cp	r22, r18
    2236:	73 07       	cpc	r23, r19
    2238:	84 07       	cpc	r24, r20
    223a:	ba 07       	cpc	r27, r26
    223c:	20 f0       	brcs	.+8      	; 0x2246 <__divsf3_pse+0xaa>
    223e:	62 1b       	sub	r22, r18
    2240:	73 0b       	sbc	r23, r19
    2242:	84 0b       	sbc	r24, r20
    2244:	ba 0b       	sbc	r27, r26
    2246:	ee 1f       	adc	r30, r30
    2248:	88 f7       	brcc	.-30     	; 0x222c <__divsf3_pse+0x90>
    224a:	e0 95       	com	r30
    224c:	08 95       	ret

0000224e <__fixsfsi>:
    224e:	04 d0       	rcall	.+8      	; 0x2258 <__fixunssfsi>
    2250:	68 94       	set
    2252:	b1 11       	cpse	r27, r1
    2254:	d9 c0       	rjmp	.+434    	; 0x2408 <__fp_szero>
    2256:	08 95       	ret

00002258 <__fixunssfsi>:
    2258:	bc d0       	rcall	.+376    	; 0x23d2 <__fp_splitA>
    225a:	88 f0       	brcs	.+34     	; 0x227e <__fixunssfsi+0x26>
    225c:	9f 57       	subi	r25, 0x7F	; 127
    225e:	90 f0       	brcs	.+36     	; 0x2284 <__fixunssfsi+0x2c>
    2260:	b9 2f       	mov	r27, r25
    2262:	99 27       	eor	r25, r25
    2264:	b7 51       	subi	r27, 0x17	; 23
    2266:	a0 f0       	brcs	.+40     	; 0x2290 <__fixunssfsi+0x38>
    2268:	d1 f0       	breq	.+52     	; 0x229e <__fixunssfsi+0x46>
    226a:	66 0f       	add	r22, r22
    226c:	77 1f       	adc	r23, r23
    226e:	88 1f       	adc	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	1a f0       	brmi	.+6      	; 0x227a <__fixunssfsi+0x22>
    2274:	ba 95       	dec	r27
    2276:	c9 f7       	brne	.-14     	; 0x226a <__fixunssfsi+0x12>
    2278:	12 c0       	rjmp	.+36     	; 0x229e <__fixunssfsi+0x46>
    227a:	b1 30       	cpi	r27, 0x01	; 1
    227c:	81 f0       	breq	.+32     	; 0x229e <__fixunssfsi+0x46>
    227e:	c3 d0       	rcall	.+390    	; 0x2406 <__fp_zero>
    2280:	b1 e0       	ldi	r27, 0x01	; 1
    2282:	08 95       	ret
    2284:	c0 c0       	rjmp	.+384    	; 0x2406 <__fp_zero>
    2286:	67 2f       	mov	r22, r23
    2288:	78 2f       	mov	r23, r24
    228a:	88 27       	eor	r24, r24
    228c:	b8 5f       	subi	r27, 0xF8	; 248
    228e:	39 f0       	breq	.+14     	; 0x229e <__fixunssfsi+0x46>
    2290:	b9 3f       	cpi	r27, 0xF9	; 249
    2292:	cc f3       	brlt	.-14     	; 0x2286 <__fixunssfsi+0x2e>
    2294:	86 95       	lsr	r24
    2296:	77 95       	ror	r23
    2298:	67 95       	ror	r22
    229a:	b3 95       	inc	r27
    229c:	d9 f7       	brne	.-10     	; 0x2294 <__fixunssfsi+0x3c>
    229e:	3e f4       	brtc	.+14     	; 0x22ae <__fixunssfsi+0x56>
    22a0:	90 95       	com	r25
    22a2:	80 95       	com	r24
    22a4:	70 95       	com	r23
    22a6:	61 95       	neg	r22
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	08 95       	ret

000022b0 <__floatunsisf>:
    22b0:	e8 94       	clt
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <__floatsisf+0x12>

000022b4 <__floatsisf>:
    22b4:	97 fb       	bst	r25, 7
    22b6:	3e f4       	brtc	.+14     	; 0x22c6 <__floatsisf+0x12>
    22b8:	90 95       	com	r25
    22ba:	80 95       	com	r24
    22bc:	70 95       	com	r23
    22be:	61 95       	neg	r22
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	8f 4f       	sbci	r24, 0xFF	; 255
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	99 23       	and	r25, r25
    22c8:	a9 f0       	breq	.+42     	; 0x22f4 <__floatsisf+0x40>
    22ca:	f9 2f       	mov	r31, r25
    22cc:	96 e9       	ldi	r25, 0x96	; 150
    22ce:	bb 27       	eor	r27, r27
    22d0:	93 95       	inc	r25
    22d2:	f6 95       	lsr	r31
    22d4:	87 95       	ror	r24
    22d6:	77 95       	ror	r23
    22d8:	67 95       	ror	r22
    22da:	b7 95       	ror	r27
    22dc:	f1 11       	cpse	r31, r1
    22de:	f8 cf       	rjmp	.-16     	; 0x22d0 <__floatsisf+0x1c>
    22e0:	fa f4       	brpl	.+62     	; 0x2320 <__floatsisf+0x6c>
    22e2:	bb 0f       	add	r27, r27
    22e4:	11 f4       	brne	.+4      	; 0x22ea <__floatsisf+0x36>
    22e6:	60 ff       	sbrs	r22, 0
    22e8:	1b c0       	rjmp	.+54     	; 0x2320 <__floatsisf+0x6c>
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	8f 4f       	sbci	r24, 0xFF	; 255
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	16 c0       	rjmp	.+44     	; 0x2320 <__floatsisf+0x6c>
    22f4:	88 23       	and	r24, r24
    22f6:	11 f0       	breq	.+4      	; 0x22fc <__floatsisf+0x48>
    22f8:	96 e9       	ldi	r25, 0x96	; 150
    22fa:	11 c0       	rjmp	.+34     	; 0x231e <__floatsisf+0x6a>
    22fc:	77 23       	and	r23, r23
    22fe:	21 f0       	breq	.+8      	; 0x2308 <__floatsisf+0x54>
    2300:	9e e8       	ldi	r25, 0x8E	; 142
    2302:	87 2f       	mov	r24, r23
    2304:	76 2f       	mov	r23, r22
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <__floatsisf+0x5e>
    2308:	66 23       	and	r22, r22
    230a:	71 f0       	breq	.+28     	; 0x2328 <__floatsisf+0x74>
    230c:	96 e8       	ldi	r25, 0x86	; 134
    230e:	86 2f       	mov	r24, r22
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	2a f0       	brmi	.+10     	; 0x2320 <__floatsisf+0x6c>
    2316:	9a 95       	dec	r25
    2318:	66 0f       	add	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	88 1f       	adc	r24, r24
    231e:	da f7       	brpl	.-10     	; 0x2316 <__floatsisf+0x62>
    2320:	88 0f       	add	r24, r24
    2322:	96 95       	lsr	r25
    2324:	87 95       	ror	r24
    2326:	97 f9       	bld	r25, 7
    2328:	08 95       	ret

0000232a <__fp_cmp>:
    232a:	99 0f       	add	r25, r25
    232c:	00 08       	sbc	r0, r0
    232e:	55 0f       	add	r21, r21
    2330:	aa 0b       	sbc	r26, r26
    2332:	e0 e8       	ldi	r30, 0x80	; 128
    2334:	fe ef       	ldi	r31, 0xFE	; 254
    2336:	16 16       	cp	r1, r22
    2338:	17 06       	cpc	r1, r23
    233a:	e8 07       	cpc	r30, r24
    233c:	f9 07       	cpc	r31, r25
    233e:	c0 f0       	brcs	.+48     	; 0x2370 <__fp_cmp+0x46>
    2340:	12 16       	cp	r1, r18
    2342:	13 06       	cpc	r1, r19
    2344:	e4 07       	cpc	r30, r20
    2346:	f5 07       	cpc	r31, r21
    2348:	98 f0       	brcs	.+38     	; 0x2370 <__fp_cmp+0x46>
    234a:	62 1b       	sub	r22, r18
    234c:	73 0b       	sbc	r23, r19
    234e:	84 0b       	sbc	r24, r20
    2350:	95 0b       	sbc	r25, r21
    2352:	39 f4       	brne	.+14     	; 0x2362 <__fp_cmp+0x38>
    2354:	0a 26       	eor	r0, r26
    2356:	61 f0       	breq	.+24     	; 0x2370 <__fp_cmp+0x46>
    2358:	23 2b       	or	r18, r19
    235a:	24 2b       	or	r18, r20
    235c:	25 2b       	or	r18, r21
    235e:	21 f4       	brne	.+8      	; 0x2368 <__fp_cmp+0x3e>
    2360:	08 95       	ret
    2362:	0a 26       	eor	r0, r26
    2364:	09 f4       	brne	.+2      	; 0x2368 <__fp_cmp+0x3e>
    2366:	a1 40       	sbci	r26, 0x01	; 1
    2368:	a6 95       	lsr	r26
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	81 1d       	adc	r24, r1
    236e:	81 1d       	adc	r24, r1
    2370:	08 95       	ret

00002372 <__fp_inf>:
    2372:	97 f9       	bld	r25, 7
    2374:	9f 67       	ori	r25, 0x7F	; 127
    2376:	80 e8       	ldi	r24, 0x80	; 128
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	08 95       	ret

0000237e <__fp_nan>:
    237e:	9f ef       	ldi	r25, 0xFF	; 255
    2380:	80 ec       	ldi	r24, 0xC0	; 192
    2382:	08 95       	ret

00002384 <__fp_pscA>:
    2384:	00 24       	eor	r0, r0
    2386:	0a 94       	dec	r0
    2388:	16 16       	cp	r1, r22
    238a:	17 06       	cpc	r1, r23
    238c:	18 06       	cpc	r1, r24
    238e:	09 06       	cpc	r0, r25
    2390:	08 95       	ret

00002392 <__fp_pscB>:
    2392:	00 24       	eor	r0, r0
    2394:	0a 94       	dec	r0
    2396:	12 16       	cp	r1, r18
    2398:	13 06       	cpc	r1, r19
    239a:	14 06       	cpc	r1, r20
    239c:	05 06       	cpc	r0, r21
    239e:	08 95       	ret

000023a0 <__fp_round>:
    23a0:	09 2e       	mov	r0, r25
    23a2:	03 94       	inc	r0
    23a4:	00 0c       	add	r0, r0
    23a6:	11 f4       	brne	.+4      	; 0x23ac <__fp_round+0xc>
    23a8:	88 23       	and	r24, r24
    23aa:	52 f0       	brmi	.+20     	; 0x23c0 <__fp_round+0x20>
    23ac:	bb 0f       	add	r27, r27
    23ae:	40 f4       	brcc	.+16     	; 0x23c0 <__fp_round+0x20>
    23b0:	bf 2b       	or	r27, r31
    23b2:	11 f4       	brne	.+4      	; 0x23b8 <__fp_round+0x18>
    23b4:	60 ff       	sbrs	r22, 0
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <__fp_round+0x20>
    23b8:	6f 5f       	subi	r22, 0xFF	; 255
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	8f 4f       	sbci	r24, 0xFF	; 255
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	08 95       	ret

000023c2 <__fp_split3>:
    23c2:	57 fd       	sbrc	r21, 7
    23c4:	90 58       	subi	r25, 0x80	; 128
    23c6:	44 0f       	add	r20, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	59 f0       	breq	.+22     	; 0x23e2 <__fp_splitA+0x10>
    23cc:	5f 3f       	cpi	r21, 0xFF	; 255
    23ce:	71 f0       	breq	.+28     	; 0x23ec <__fp_splitA+0x1a>
    23d0:	47 95       	ror	r20

000023d2 <__fp_splitA>:
    23d2:	88 0f       	add	r24, r24
    23d4:	97 fb       	bst	r25, 7
    23d6:	99 1f       	adc	r25, r25
    23d8:	61 f0       	breq	.+24     	; 0x23f2 <__fp_splitA+0x20>
    23da:	9f 3f       	cpi	r25, 0xFF	; 255
    23dc:	79 f0       	breq	.+30     	; 0x23fc <__fp_splitA+0x2a>
    23de:	87 95       	ror	r24
    23e0:	08 95       	ret
    23e2:	12 16       	cp	r1, r18
    23e4:	13 06       	cpc	r1, r19
    23e6:	14 06       	cpc	r1, r20
    23e8:	55 1f       	adc	r21, r21
    23ea:	f2 cf       	rjmp	.-28     	; 0x23d0 <__fp_split3+0xe>
    23ec:	46 95       	lsr	r20
    23ee:	f1 df       	rcall	.-30     	; 0x23d2 <__fp_splitA>
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <__fp_splitA+0x30>
    23f2:	16 16       	cp	r1, r22
    23f4:	17 06       	cpc	r1, r23
    23f6:	18 06       	cpc	r1, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	f1 cf       	rjmp	.-30     	; 0x23de <__fp_splitA+0xc>
    23fc:	86 95       	lsr	r24
    23fe:	71 05       	cpc	r23, r1
    2400:	61 05       	cpc	r22, r1
    2402:	08 94       	sec
    2404:	08 95       	ret

00002406 <__fp_zero>:
    2406:	e8 94       	clt

00002408 <__fp_szero>:
    2408:	bb 27       	eor	r27, r27
    240a:	66 27       	eor	r22, r22
    240c:	77 27       	eor	r23, r23
    240e:	cb 01       	movw	r24, r22
    2410:	97 f9       	bld	r25, 7
    2412:	08 95       	ret

00002414 <__gesf2>:
    2414:	8a df       	rcall	.-236    	; 0x232a <__fp_cmp>
    2416:	08 f4       	brcc	.+2      	; 0x241a <__gesf2+0x6>
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	08 95       	ret

0000241c <__mulsf3>:
    241c:	0b d0       	rcall	.+22     	; 0x2434 <__mulsf3x>
    241e:	c0 cf       	rjmp	.-128    	; 0x23a0 <__fp_round>
    2420:	b1 df       	rcall	.-158    	; 0x2384 <__fp_pscA>
    2422:	28 f0       	brcs	.+10     	; 0x242e <__mulsf3+0x12>
    2424:	b6 df       	rcall	.-148    	; 0x2392 <__fp_pscB>
    2426:	18 f0       	brcs	.+6      	; 0x242e <__mulsf3+0x12>
    2428:	95 23       	and	r25, r21
    242a:	09 f0       	breq	.+2      	; 0x242e <__mulsf3+0x12>
    242c:	a2 cf       	rjmp	.-188    	; 0x2372 <__fp_inf>
    242e:	a7 cf       	rjmp	.-178    	; 0x237e <__fp_nan>
    2430:	11 24       	eor	r1, r1
    2432:	ea cf       	rjmp	.-44     	; 0x2408 <__fp_szero>

00002434 <__mulsf3x>:
    2434:	c6 df       	rcall	.-116    	; 0x23c2 <__fp_split3>
    2436:	a0 f3       	brcs	.-24     	; 0x2420 <__mulsf3+0x4>

00002438 <__mulsf3_pse>:
    2438:	95 9f       	mul	r25, r21
    243a:	d1 f3       	breq	.-12     	; 0x2430 <__mulsf3+0x14>
    243c:	95 0f       	add	r25, r21
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	55 1f       	adc	r21, r21
    2442:	62 9f       	mul	r22, r18
    2444:	f0 01       	movw	r30, r0
    2446:	72 9f       	mul	r23, r18
    2448:	bb 27       	eor	r27, r27
    244a:	f0 0d       	add	r31, r0
    244c:	b1 1d       	adc	r27, r1
    244e:	63 9f       	mul	r22, r19
    2450:	aa 27       	eor	r26, r26
    2452:	f0 0d       	add	r31, r0
    2454:	b1 1d       	adc	r27, r1
    2456:	aa 1f       	adc	r26, r26
    2458:	64 9f       	mul	r22, r20
    245a:	66 27       	eor	r22, r22
    245c:	b0 0d       	add	r27, r0
    245e:	a1 1d       	adc	r26, r1
    2460:	66 1f       	adc	r22, r22
    2462:	82 9f       	mul	r24, r18
    2464:	22 27       	eor	r18, r18
    2466:	b0 0d       	add	r27, r0
    2468:	a1 1d       	adc	r26, r1
    246a:	62 1f       	adc	r22, r18
    246c:	73 9f       	mul	r23, r19
    246e:	b0 0d       	add	r27, r0
    2470:	a1 1d       	adc	r26, r1
    2472:	62 1f       	adc	r22, r18
    2474:	83 9f       	mul	r24, r19
    2476:	a0 0d       	add	r26, r0
    2478:	61 1d       	adc	r22, r1
    247a:	22 1f       	adc	r18, r18
    247c:	74 9f       	mul	r23, r20
    247e:	33 27       	eor	r19, r19
    2480:	a0 0d       	add	r26, r0
    2482:	61 1d       	adc	r22, r1
    2484:	23 1f       	adc	r18, r19
    2486:	84 9f       	mul	r24, r20
    2488:	60 0d       	add	r22, r0
    248a:	21 1d       	adc	r18, r1
    248c:	82 2f       	mov	r24, r18
    248e:	76 2f       	mov	r23, r22
    2490:	6a 2f       	mov	r22, r26
    2492:	11 24       	eor	r1, r1
    2494:	9f 57       	subi	r25, 0x7F	; 127
    2496:	50 40       	sbci	r21, 0x00	; 0
    2498:	8a f0       	brmi	.+34     	; 0x24bc <__mulsf3_pse+0x84>
    249a:	e1 f0       	breq	.+56     	; 0x24d4 <__mulsf3_pse+0x9c>
    249c:	88 23       	and	r24, r24
    249e:	4a f0       	brmi	.+18     	; 0x24b2 <__mulsf3_pse+0x7a>
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	bb 1f       	adc	r27, r27
    24a6:	66 1f       	adc	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 1f       	adc	r24, r24
    24ac:	91 50       	subi	r25, 0x01	; 1
    24ae:	50 40       	sbci	r21, 0x00	; 0
    24b0:	a9 f7       	brne	.-22     	; 0x249c <__mulsf3_pse+0x64>
    24b2:	9e 3f       	cpi	r25, 0xFE	; 254
    24b4:	51 05       	cpc	r21, r1
    24b6:	70 f0       	brcs	.+28     	; 0x24d4 <__mulsf3_pse+0x9c>
    24b8:	5c cf       	rjmp	.-328    	; 0x2372 <__fp_inf>
    24ba:	a6 cf       	rjmp	.-180    	; 0x2408 <__fp_szero>
    24bc:	5f 3f       	cpi	r21, 0xFF	; 255
    24be:	ec f3       	brlt	.-6      	; 0x24ba <__mulsf3_pse+0x82>
    24c0:	98 3e       	cpi	r25, 0xE8	; 232
    24c2:	dc f3       	brlt	.-10     	; 0x24ba <__mulsf3_pse+0x82>
    24c4:	86 95       	lsr	r24
    24c6:	77 95       	ror	r23
    24c8:	67 95       	ror	r22
    24ca:	b7 95       	ror	r27
    24cc:	f7 95       	ror	r31
    24ce:	e7 95       	ror	r30
    24d0:	9f 5f       	subi	r25, 0xFF	; 255
    24d2:	c1 f7       	brne	.-16     	; 0x24c4 <__mulsf3_pse+0x8c>
    24d4:	fe 2b       	or	r31, r30
    24d6:	88 0f       	add	r24, r24
    24d8:	91 1d       	adc	r25, r1
    24da:	96 95       	lsr	r25
    24dc:	87 95       	ror	r24
    24de:	97 f9       	bld	r25, 7
    24e0:	08 95       	ret
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <__mulsf3_pse+0xb0>
    24e4:	0e f4       	brtc	.+2      	; 0x24e8 <__mulsf3_pse+0xb0>
    24e6:	4b cf       	rjmp	.-362    	; 0x237e <__fp_nan>
    24e8:	3e c0       	rjmp	.+124    	; 0x2566 <__fp_mpack>

000024ea <sqrt>:
    24ea:	73 df       	rcall	.-282    	; 0x23d2 <__fp_splitA>
    24ec:	d0 f3       	brcs	.-12     	; 0x24e2 <__mulsf3_pse+0xaa>
    24ee:	99 23       	and	r25, r25
    24f0:	d9 f3       	breq	.-10     	; 0x24e8 <__mulsf3_pse+0xb0>
    24f2:	ce f3       	brts	.-14     	; 0x24e6 <__mulsf3_pse+0xae>
    24f4:	9f 57       	subi	r25, 0x7F	; 127
    24f6:	55 0b       	sbc	r21, r21
    24f8:	87 ff       	sbrs	r24, 7
    24fa:	43 d0       	rcall	.+134    	; 0x2582 <__fp_norm2>
    24fc:	00 24       	eor	r0, r0
    24fe:	a0 e6       	ldi	r26, 0x60	; 96
    2500:	40 ea       	ldi	r20, 0xA0	; 160
    2502:	90 01       	movw	r18, r0
    2504:	80 58       	subi	r24, 0x80	; 128
    2506:	56 95       	lsr	r21
    2508:	97 95       	ror	r25
    250a:	28 f4       	brcc	.+10     	; 0x2516 <sqrt+0x2c>
    250c:	80 5c       	subi	r24, 0xC0	; 192
    250e:	66 0f       	add	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	20 f0       	brcs	.+8      	; 0x251e <sqrt+0x34>
    2516:	26 17       	cp	r18, r22
    2518:	37 07       	cpc	r19, r23
    251a:	48 07       	cpc	r20, r24
    251c:	30 f4       	brcc	.+12     	; 0x252a <sqrt+0x40>
    251e:	62 1b       	sub	r22, r18
    2520:	73 0b       	sbc	r23, r19
    2522:	84 0b       	sbc	r24, r20
    2524:	20 29       	or	r18, r0
    2526:	31 29       	or	r19, r1
    2528:	4a 2b       	or	r20, r26
    252a:	a6 95       	lsr	r26
    252c:	17 94       	ror	r1
    252e:	07 94       	ror	r0
    2530:	20 25       	eor	r18, r0
    2532:	31 25       	eor	r19, r1
    2534:	4a 27       	eor	r20, r26
    2536:	58 f7       	brcc	.-42     	; 0x250e <sqrt+0x24>
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	88 1f       	adc	r24, r24
    253e:	20 f0       	brcs	.+8      	; 0x2548 <sqrt+0x5e>
    2540:	26 17       	cp	r18, r22
    2542:	37 07       	cpc	r19, r23
    2544:	48 07       	cpc	r20, r24
    2546:	30 f4       	brcc	.+12     	; 0x2554 <sqrt+0x6a>
    2548:	62 0b       	sbc	r22, r18
    254a:	73 0b       	sbc	r23, r19
    254c:	84 0b       	sbc	r24, r20
    254e:	20 0d       	add	r18, r0
    2550:	31 1d       	adc	r19, r1
    2552:	41 1d       	adc	r20, r1
    2554:	a0 95       	com	r26
    2556:	81 f7       	brne	.-32     	; 0x2538 <sqrt+0x4e>
    2558:	b9 01       	movw	r22, r18
    255a:	84 2f       	mov	r24, r20
    255c:	91 58       	subi	r25, 0x81	; 129
    255e:	88 0f       	add	r24, r24
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	08 95       	ret

00002566 <__fp_mpack>:
    2566:	9f 3f       	cpi	r25, 0xFF	; 255
    2568:	31 f0       	breq	.+12     	; 0x2576 <__fp_mpack_finite+0xc>

0000256a <__fp_mpack_finite>:
    256a:	91 50       	subi	r25, 0x01	; 1
    256c:	20 f4       	brcc	.+8      	; 0x2576 <__fp_mpack_finite+0xc>
    256e:	87 95       	ror	r24
    2570:	77 95       	ror	r23
    2572:	67 95       	ror	r22
    2574:	b7 95       	ror	r27
    2576:	88 0f       	add	r24, r24
    2578:	91 1d       	adc	r25, r1
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	97 f9       	bld	r25, 7
    2580:	08 95       	ret

00002582 <__fp_norm2>:
    2582:	91 50       	subi	r25, 0x01	; 1
    2584:	50 40       	sbci	r21, 0x00	; 0
    2586:	66 0f       	add	r22, r22
    2588:	77 1f       	adc	r23, r23
    258a:	88 1f       	adc	r24, r24
    258c:	d2 f7       	brpl	.-12     	; 0x2582 <__fp_norm2>
    258e:	08 95       	ret

00002590 <__mulsi3>:
    2590:	62 9f       	mul	r22, r18
    2592:	d0 01       	movw	r26, r0
    2594:	73 9f       	mul	r23, r19
    2596:	f0 01       	movw	r30, r0
    2598:	82 9f       	mul	r24, r18
    259a:	e0 0d       	add	r30, r0
    259c:	f1 1d       	adc	r31, r1
    259e:	64 9f       	mul	r22, r20
    25a0:	e0 0d       	add	r30, r0
    25a2:	f1 1d       	adc	r31, r1
    25a4:	92 9f       	mul	r25, r18
    25a6:	f0 0d       	add	r31, r0
    25a8:	83 9f       	mul	r24, r19
    25aa:	f0 0d       	add	r31, r0
    25ac:	74 9f       	mul	r23, r20
    25ae:	f0 0d       	add	r31, r0
    25b0:	65 9f       	mul	r22, r21
    25b2:	f0 0d       	add	r31, r0
    25b4:	99 27       	eor	r25, r25
    25b6:	72 9f       	mul	r23, r18
    25b8:	b0 0d       	add	r27, r0
    25ba:	e1 1d       	adc	r30, r1
    25bc:	f9 1f       	adc	r31, r25
    25be:	63 9f       	mul	r22, r19
    25c0:	b0 0d       	add	r27, r0
    25c2:	e1 1d       	adc	r30, r1
    25c4:	f9 1f       	adc	r31, r25
    25c6:	bd 01       	movw	r22, r26
    25c8:	cf 01       	movw	r24, r30
    25ca:	11 24       	eor	r1, r1
    25cc:	08 95       	ret

000025ce <__udivmodhi4>:
    25ce:	aa 1b       	sub	r26, r26
    25d0:	bb 1b       	sub	r27, r27
    25d2:	51 e1       	ldi	r21, 0x11	; 17
    25d4:	07 c0       	rjmp	.+14     	; 0x25e4 <__udivmodhi4_ep>

000025d6 <__udivmodhi4_loop>:
    25d6:	aa 1f       	adc	r26, r26
    25d8:	bb 1f       	adc	r27, r27
    25da:	a6 17       	cp	r26, r22
    25dc:	b7 07       	cpc	r27, r23
    25de:	10 f0       	brcs	.+4      	; 0x25e4 <__udivmodhi4_ep>
    25e0:	a6 1b       	sub	r26, r22
    25e2:	b7 0b       	sbc	r27, r23

000025e4 <__udivmodhi4_ep>:
    25e4:	88 1f       	adc	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	5a 95       	dec	r21
    25ea:	a9 f7       	brne	.-22     	; 0x25d6 <__udivmodhi4_loop>
    25ec:	80 95       	com	r24
    25ee:	90 95       	com	r25
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	08 95       	ret

000025f6 <__divmodhi4>:
    25f6:	97 fb       	bst	r25, 7
    25f8:	09 2e       	mov	r0, r25
    25fa:	07 26       	eor	r0, r23
    25fc:	0a d0       	rcall	.+20     	; 0x2612 <__divmodhi4_neg1>
    25fe:	77 fd       	sbrc	r23, 7
    2600:	04 d0       	rcall	.+8      	; 0x260a <__divmodhi4_neg2>
    2602:	e5 df       	rcall	.-54     	; 0x25ce <__udivmodhi4>
    2604:	06 d0       	rcall	.+12     	; 0x2612 <__divmodhi4_neg1>
    2606:	00 20       	and	r0, r0
    2608:	1a f4       	brpl	.+6      	; 0x2610 <__divmodhi4_exit>

0000260a <__divmodhi4_neg2>:
    260a:	70 95       	com	r23
    260c:	61 95       	neg	r22
    260e:	7f 4f       	sbci	r23, 0xFF	; 255

00002610 <__divmodhi4_exit>:
    2610:	08 95       	ret

00002612 <__divmodhi4_neg1>:
    2612:	f6 f7       	brtc	.-4      	; 0x2610 <__divmodhi4_exit>
    2614:	90 95       	com	r25
    2616:	81 95       	neg	r24
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	08 95       	ret

0000261c <__divmodsi4>:
    261c:	97 fb       	bst	r25, 7
    261e:	09 2e       	mov	r0, r25
    2620:	05 26       	eor	r0, r21
    2622:	0e d0       	rcall	.+28     	; 0x2640 <__divmodsi4_neg1>
    2624:	57 fd       	sbrc	r21, 7
    2626:	04 d0       	rcall	.+8      	; 0x2630 <__divmodsi4_neg2>
    2628:	14 d0       	rcall	.+40     	; 0x2652 <__udivmodsi4>
    262a:	0a d0       	rcall	.+20     	; 0x2640 <__divmodsi4_neg1>
    262c:	00 1c       	adc	r0, r0
    262e:	38 f4       	brcc	.+14     	; 0x263e <__divmodsi4_exit>

00002630 <__divmodsi4_neg2>:
    2630:	50 95       	com	r21
    2632:	40 95       	com	r20
    2634:	30 95       	com	r19
    2636:	21 95       	neg	r18
    2638:	3f 4f       	sbci	r19, 0xFF	; 255
    263a:	4f 4f       	sbci	r20, 0xFF	; 255
    263c:	5f 4f       	sbci	r21, 0xFF	; 255

0000263e <__divmodsi4_exit>:
    263e:	08 95       	ret

00002640 <__divmodsi4_neg1>:
    2640:	f6 f7       	brtc	.-4      	; 0x263e <__divmodsi4_exit>
    2642:	90 95       	com	r25
    2644:	80 95       	com	r24
    2646:	70 95       	com	r23
    2648:	61 95       	neg	r22
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__udivmodsi4>:
    2652:	a1 e2       	ldi	r26, 0x21	; 33
    2654:	1a 2e       	mov	r1, r26
    2656:	aa 1b       	sub	r26, r26
    2658:	bb 1b       	sub	r27, r27
    265a:	fd 01       	movw	r30, r26
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <__udivmodsi4_ep>

0000265e <__udivmodsi4_loop>:
    265e:	aa 1f       	adc	r26, r26
    2660:	bb 1f       	adc	r27, r27
    2662:	ee 1f       	adc	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	a2 17       	cp	r26, r18
    2668:	b3 07       	cpc	r27, r19
    266a:	e4 07       	cpc	r30, r20
    266c:	f5 07       	cpc	r31, r21
    266e:	20 f0       	brcs	.+8      	; 0x2678 <__udivmodsi4_ep>
    2670:	a2 1b       	sub	r26, r18
    2672:	b3 0b       	sbc	r27, r19
    2674:	e4 0b       	sbc	r30, r20
    2676:	f5 0b       	sbc	r31, r21

00002678 <__udivmodsi4_ep>:
    2678:	66 1f       	adc	r22, r22
    267a:	77 1f       	adc	r23, r23
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	1a 94       	dec	r1
    2682:	69 f7       	brne	.-38     	; 0x265e <__udivmodsi4_loop>
    2684:	60 95       	com	r22
    2686:	70 95       	com	r23
    2688:	80 95       	com	r24
    268a:	90 95       	com	r25
    268c:	9b 01       	movw	r18, r22
    268e:	ac 01       	movw	r20, r24
    2690:	bd 01       	movw	r22, r26
    2692:	cf 01       	movw	r24, r30
    2694:	08 95       	ret

00002696 <__eerd_word_m168>:
    2696:	a8 e1       	ldi	r26, 0x18	; 24
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	42 e0       	ldi	r20, 0x02	; 2
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__eerd_blraw_m168>

000026a2 <__eewr_word_m168>:
    26a2:	0e 94 66 13 	call	0x26cc	; 0x26cc <__eewr_byte_m168>
    26a6:	27 2f       	mov	r18, r23
    26a8:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__eewr_r18_m168>

000026ac <__eerd_block_m168>:
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22

000026b0 <__eerd_blraw_m168>:
    26b0:	fc 01       	movw	r30, r24
    26b2:	f9 99       	sbic	0x1f, 1	; 31
    26b4:	fe cf       	rjmp	.-4      	; 0x26b2 <__eerd_blraw_m168+0x2>
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <__eerd_blraw_m168+0x14>
    26b8:	f2 bd       	out	0x22, r31	; 34
    26ba:	e1 bd       	out	0x21, r30	; 33
    26bc:	f8 9a       	sbi	0x1f, 0	; 31
    26be:	31 96       	adiw	r30, 0x01	; 1
    26c0:	00 b4       	in	r0, 0x20	; 32
    26c2:	0d 92       	st	X+, r0
    26c4:	41 50       	subi	r20, 0x01	; 1
    26c6:	50 40       	sbci	r21, 0x00	; 0
    26c8:	b8 f7       	brcc	.-18     	; 0x26b8 <__eerd_blraw_m168+0x8>
    26ca:	08 95       	ret

000026cc <__eewr_byte_m168>:
    26cc:	26 2f       	mov	r18, r22

000026ce <__eewr_r18_m168>:
    26ce:	f9 99       	sbic	0x1f, 1	; 31
    26d0:	fe cf       	rjmp	.-4      	; 0x26ce <__eewr_r18_m168>
    26d2:	1f ba       	out	0x1f, r1	; 31
    26d4:	92 bd       	out	0x22, r25	; 34
    26d6:	81 bd       	out	0x21, r24	; 33
    26d8:	20 bd       	out	0x20, r18	; 32
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	fa 9a       	sbi	0x1f, 2	; 31
    26e0:	f9 9a       	sbi	0x1f, 1	; 31
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	08 95       	ret

000026e8 <_exit>:
    26e8:	f8 94       	cli

000026ea <__stop_program>:
    26ea:	ff cf       	rjmp	.-2      	; 0x26ea <__stop_program>
