
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000274e  00002802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000274e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800144  00800144  00002846  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00002846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000745  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e89  00000000  00000000  00002fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f2  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e16  00000000  00000000  00004032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00004e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063f  00000000  00000000  00005671  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_7>
      20:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_8>
      24:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e4       	ldi	r30, 0x4E	; 78
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 34       	cpi	r26, 0x44	; 68
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e4       	ldi	r26, 0x44	; 68
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3d       	cpi	r26, 0xD2	; 210
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 34 10 	call	0x2068	; 0x2068 <main>
      9e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_mode>:


}

void config_mode(void)
{
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	

	//basic tracking adjustment code (is under 50%)
	if (config_mode_throttle_percent < 50)
      ba:	a0 90 be 01 	lds	r10, 0x01BE
      be:	b0 90 bf 01 	lds	r11, 0x01BF
      c2:	c0 90 c0 01 	lds	r12, 0x01C0
      c6:	d0 90 c1 01 	lds	r13, 0x01C1
      ca:	c6 01       	movw	r24, r12
      cc:	b5 01       	movw	r22, r10
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	48 e4       	ldi	r20, 0x48	; 72
      d4:	52 e4       	ldi	r21, 0x42	; 66
      d6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
      da:	88 23       	and	r24, r24
      dc:	0c f0       	brlt	.+2      	; 0xe0 <config_mode+0x3a>
      de:	b7 c0       	rjmp	.+366    	; 0x24e <config_mode+0x1a8>
	{
	
		flashy_led = 0;			//flashy LED off unless something is changing
      e0:	10 92 af 01 	sts	0x01AF, r1
      e4:	10 92 ae 01 	sts	0x01AE, r1
		//flashy LED gets turned off to indicate change
		if ( leftright > (heading_center + heading_leftthresh) ) {tracking_comp = tracking_comp + (tracking_comp * 0.003); flashy_led = 1;}
      e8:	20 91 9e 01 	lds	r18, 0x019E
      ec:	30 91 9f 01 	lds	r19, 0x019F
      f0:	40 91 a0 01 	lds	r20, 0x01A0
      f4:	50 91 a1 01 	lds	r21, 0x01A1
      f8:	c0 91 14 01 	lds	r28, 0x0114
      fc:	d0 91 15 01 	lds	r29, 0x0115
     100:	80 91 16 01 	lds	r24, 0x0116
     104:	90 91 17 01 	lds	r25, 0x0117
     108:	8c 0f       	add	r24, r28
     10a:	9d 1f       	adc	r25, r29
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	82 17       	cp	r24, r18
     116:	93 07       	cpc	r25, r19
     118:	a4 07       	cpc	r26, r20
     11a:	b5 07       	cpc	r27, r21
     11c:	24 f5       	brge	.+72     	; 0x166 <config_mode+0xc0>
     11e:	e0 90 36 01 	lds	r14, 0x0136
     122:	f0 90 37 01 	lds	r15, 0x0137
     126:	00 91 38 01 	lds	r16, 0x0138
     12a:	10 91 39 01 	lds	r17, 0x0139
     12e:	c8 01       	movw	r24, r16
     130:	b7 01       	movw	r22, r14
     132:	26 ea       	ldi	r18, 0xA6	; 166
     134:	3b e9       	ldi	r19, 0x9B	; 155
     136:	44 e4       	ldi	r20, 0x44	; 68
     138:	5b e3       	ldi	r21, 0x3B	; 59
     13a:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c8 01       	movw	r24, r16
     144:	b7 01       	movw	r22, r14
     146:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
     14a:	60 93 36 01 	sts	0x0136, r22
     14e:	70 93 37 01 	sts	0x0137, r23
     152:	80 93 38 01 	sts	0x0138, r24
     156:	90 93 39 01 	sts	0x0139, r25
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	90 93 af 01 	sts	0x01AF, r25
     162:	80 93 ae 01 	sts	0x01AE, r24
		if ( leftright < (heading_center + heading_rightthresh) ) {tracking_comp = tracking_comp - (tracking_comp * 0.003); flashy_led = 1;}	
     166:	20 91 9e 01 	lds	r18, 0x019E
     16a:	30 91 9f 01 	lds	r19, 0x019F
     16e:	40 91 a0 01 	lds	r20, 0x01A0
     172:	50 91 a1 01 	lds	r21, 0x01A1
     176:	80 91 18 01 	lds	r24, 0x0118
     17a:	90 91 19 01 	lds	r25, 0x0119
     17e:	c8 0f       	add	r28, r24
     180:	d9 1f       	adc	r29, r25
     182:	ce 01       	movw	r24, r28
     184:	aa 27       	eor	r26, r26
     186:	97 fd       	sbrc	r25, 7
     188:	a0 95       	com	r26
     18a:	ba 2f       	mov	r27, r26
     18c:	28 17       	cp	r18, r24
     18e:	39 07       	cpc	r19, r25
     190:	4a 07       	cpc	r20, r26
     192:	5b 07       	cpc	r21, r27
     194:	24 f5       	brge	.+72     	; 0x1de <config_mode+0x138>
     196:	e0 90 36 01 	lds	r14, 0x0136
     19a:	f0 90 37 01 	lds	r15, 0x0137
     19e:	00 91 38 01 	lds	r16, 0x0138
     1a2:	10 91 39 01 	lds	r17, 0x0139
     1a6:	c8 01       	movw	r24, r16
     1a8:	b7 01       	movw	r22, r14
     1aa:	26 ea       	ldi	r18, 0xA6	; 166
     1ac:	3b e9       	ldi	r19, 0x9B	; 155
     1ae:	44 e4       	ldi	r20, 0x44	; 68
     1b0:	5b eb       	ldi	r21, 0xBB	; 187
     1b2:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
     1c2:	60 93 36 01 	sts	0x0136, r22
     1c6:	70 93 37 01 	sts	0x0137, r23
     1ca:	80 93 38 01 	sts	0x0138, r24
     1ce:	90 93 39 01 	sts	0x0139, r25
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 af 01 	sts	0x01AF, r25
     1da:	80 93 ae 01 	sts	0x01AE, r24

		if (tracking_comp < 0.1) tracking_comp = 0.1;
     1de:	60 91 36 01 	lds	r22, 0x0136
     1e2:	70 91 37 01 	lds	r23, 0x0137
     1e6:	80 91 38 01 	lds	r24, 0x0138
     1ea:	90 91 39 01 	lds	r25, 0x0139
     1ee:	2d ec       	ldi	r18, 0xCD	; 205
     1f0:	3c ec       	ldi	r19, 0xCC	; 204
     1f2:	4c ec       	ldi	r20, 0xCC	; 204
     1f4:	5d e3       	ldi	r21, 0x3D	; 61
     1f6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	64 f4       	brge	.+24     	; 0x216 <config_mode+0x170>
     1fe:	8d ec       	ldi	r24, 0xCD	; 205
     200:	9c ec       	ldi	r25, 0xCC	; 204
     202:	ac ec       	ldi	r26, 0xCC	; 204
     204:	bd e3       	ldi	r27, 0x3D	; 61
     206:	80 93 36 01 	sts	0x0136, r24
     20a:	90 93 37 01 	sts	0x0137, r25
     20e:	a0 93 38 01 	sts	0x0138, r26
     212:	b0 93 39 01 	sts	0x0139, r27
		if (tracking_comp > 10) tracking_comp = 10;
     216:	60 91 36 01 	lds	r22, 0x0136
     21a:	70 91 37 01 	lds	r23, 0x0137
     21e:	80 91 38 01 	lds	r24, 0x0138
     222:	90 91 39 01 	lds	r25, 0x0139
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e2       	ldi	r20, 0x20	; 32
     22c:	51 e4       	ldi	r21, 0x41	; 65
     22e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     232:	18 16       	cp	r1, r24
     234:	64 f4       	brge	.+24     	; 0x24e <config_mode+0x1a8>
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e2       	ldi	r26, 0x20	; 32
     23c:	b1 e4       	ldi	r27, 0x41	; 65
     23e:	80 93 36 01 	sts	0x0136, r24
     242:	90 93 37 01 	sts	0x0137, r25
     246:	a0 93 38 01 	sts	0x0138, r26
     24a:	b0 93 39 01 	sts	0x0139, r27
	}	


	//heading adjustment code (when throttle is between 50% and 90%)
	if (config_mode_throttle_percent >= 50 && config_mode_throttle_percent < 90)
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 e4       	ldi	r20, 0x48	; 72
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     25e:	88 23       	and	r24, r24
     260:	0c f4       	brge	.+2      	; 0x264 <config_mode+0x1be>
     262:	b0 c0       	rjmp	.+352    	; 0x3c4 <config_mode+0x31e>
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	44 eb       	ldi	r20, 0xB4	; 180
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     274:	88 23       	and	r24, r24
     276:	0c f0       	brlt	.+2      	; 0x27a <config_mode+0x1d4>
     278:	a5 c0       	rjmp	.+330    	; 0x3c4 <config_mode+0x31e>
	{
		
		flashy_led = 1;				//pulse the LED to indicate we're in heading adjustment
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 af 01 	sts	0x01AF, r25
     282:	80 93 ae 01 	sts	0x01AE, r24
		if ( leftright > (heading_center + heading_leftthresh) ) {led_adjust = led_adjust + 1; flashy_led = 0;}   //flashing gets turned back off to indicate change
     286:	20 91 9e 01 	lds	r18, 0x019E
     28a:	30 91 9f 01 	lds	r19, 0x019F
     28e:	40 91 a0 01 	lds	r20, 0x01A0
     292:	50 91 a1 01 	lds	r21, 0x01A1
     296:	c0 91 14 01 	lds	r28, 0x0114
     29a:	d0 91 15 01 	lds	r29, 0x0115
     29e:	80 91 16 01 	lds	r24, 0x0116
     2a2:	90 91 17 01 	lds	r25, 0x0117
     2a6:	8c 0f       	add	r24, r28
     2a8:	9d 1f       	adc	r25, r29
     2aa:	aa 27       	eor	r26, r26
     2ac:	97 fd       	sbrc	r25, 7
     2ae:	a0 95       	com	r26
     2b0:	ba 2f       	mov	r27, r26
     2b2:	82 17       	cp	r24, r18
     2b4:	93 07       	cpc	r25, r19
     2b6:	a4 07       	cpc	r26, r20
     2b8:	b5 07       	cpc	r27, r21
     2ba:	d4 f4       	brge	.+52     	; 0x2f0 <config_mode+0x24a>
     2bc:	60 91 3a 01 	lds	r22, 0x013A
     2c0:	70 91 3b 01 	lds	r23, 0x013B
     2c4:	80 91 3c 01 	lds	r24, 0x013C
     2c8:	90 91 3d 01 	lds	r25, 0x013D
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
     2d8:	60 93 3a 01 	sts	0x013A, r22
     2dc:	70 93 3b 01 	sts	0x013B, r23
     2e0:	80 93 3c 01 	sts	0x013C, r24
     2e4:	90 93 3d 01 	sts	0x013D, r25
     2e8:	10 92 af 01 	sts	0x01AF, r1
     2ec:	10 92 ae 01 	sts	0x01AE, r1
		if ( leftright < (heading_center + heading_rightthresh) ) {led_adjust = led_adjust - 1; flashy_led = 0;}
     2f0:	20 91 9e 01 	lds	r18, 0x019E
     2f4:	30 91 9f 01 	lds	r19, 0x019F
     2f8:	40 91 a0 01 	lds	r20, 0x01A0
     2fc:	50 91 a1 01 	lds	r21, 0x01A1
     300:	80 91 18 01 	lds	r24, 0x0118
     304:	90 91 19 01 	lds	r25, 0x0119
     308:	c8 0f       	add	r28, r24
     30a:	d9 1f       	adc	r29, r25
     30c:	ce 01       	movw	r24, r28
     30e:	aa 27       	eor	r26, r26
     310:	97 fd       	sbrc	r25, 7
     312:	a0 95       	com	r26
     314:	ba 2f       	mov	r27, r26
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	4a 07       	cpc	r20, r26
     31c:	5b 07       	cpc	r21, r27
     31e:	d4 f4       	brge	.+52     	; 0x354 <config_mode+0x2ae>
     320:	60 91 3a 01 	lds	r22, 0x013A
     324:	70 91 3b 01 	lds	r23, 0x013B
     328:	80 91 3c 01 	lds	r24, 0x013C
     32c:	90 91 3d 01 	lds	r25, 0x013D
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
     33c:	60 93 3a 01 	sts	0x013A, r22
     340:	70 93 3b 01 	sts	0x013B, r23
     344:	80 93 3c 01 	sts	0x013C, r24
     348:	90 93 3d 01 	sts	0x013D, r25
     34c:	10 92 af 01 	sts	0x01AF, r1
     350:	10 92 ae 01 	sts	0x01AE, r1

		if (led_adjust < 0) led_adjust = 100;
     354:	60 91 3a 01 	lds	r22, 0x013A
     358:	70 91 3b 01 	lds	r23, 0x013B
     35c:	80 91 3c 01 	lds	r24, 0x013C
     360:	90 91 3d 01 	lds	r25, 0x013D
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     370:	88 23       	and	r24, r24
     372:	64 f4       	brge	.+24     	; 0x38c <config_mode+0x2e6>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a8 ec       	ldi	r26, 0xC8	; 200
     37a:	b2 e4       	ldi	r27, 0x42	; 66
     37c:	80 93 3a 01 	sts	0x013A, r24
     380:	90 93 3b 01 	sts	0x013B, r25
     384:	a0 93 3c 01 	sts	0x013C, r26
     388:	b0 93 3d 01 	sts	0x013D, r27
		if (led_adjust > 100) led_adjust = 0;
     38c:	60 91 3a 01 	lds	r22, 0x013A
     390:	70 91 3b 01 	lds	r23, 0x013B
     394:	80 91 3c 01 	lds	r24, 0x013C
     398:	90 91 3d 01 	lds	r25, 0x013D
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	48 ec       	ldi	r20, 0xC8	; 200
     3a2:	52 e4       	ldi	r21, 0x42	; 66
     3a4:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	64 f4       	brge	.+24     	; 0x3c4 <config_mode+0x31e>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 3a 01 	sts	0x013A, r24
     3b8:	90 93 3b 01 	sts	0x013B, r25
     3bc:	a0 93 3c 01 	sts	0x013C, r26
     3c0:	b0 93 3d 01 	sts	0x013D, r27
	}	
	

	//if we're above 90% throttle - the bot is effectively in normal drive mode - with throttle locked at 50%

}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	08 95       	ret

000003da <motors_brake>:

void motors_brake(void)
{

	//actual braking only supported for PWM
	if (use_pwm_esc == 0)
     3da:	80 91 44 01 	lds	r24, 0x0144
     3de:	90 91 45 01 	lds	r25, 0x0145
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	19 f4       	brne	.+6      	; 0x3ec <motors_brake+0x12>
	{
		set_motor1_pin_off();
     3e6:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     3e8:	5c 98       	cbi	0x0b, 4	; 11
     3ea:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	31 f4       	brne	.+12     	; 0x3fc <motors_brake+0x22>
	{
        OCR2A = pwm_throttle_brake;
     3f0:	80 91 04 01 	lds	r24, 0x0104
     3f4:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_brake;
     3f8:	80 93 b4 00 	sts	0x00B4, r24
     3fc:	08 95       	ret

000003fe <setup>:

void adc_init(void)
{
 
  	// Free running Mode
	ADCSRB = 0x00;
     3fe:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     402:	86 e8       	ldi	r24, 0x86	; 134
     404:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	80 93 7c 00 	sts	0x007C, r24

{

	adc_init();		//init the ADC...

	set_throttle_pin_as_input();
     40e:	20 98       	cbi	0x04, 0	; 4
	set_leftright_pin_as_input();  
     410:	21 98       	cbi	0x04, 1	; 4
	set_forwardback_pin_as_input();
     412:	22 98       	cbi	0x04, 2	; 4
  
	set_accel_data_pin_as_input();
     414:	3c 98       	cbi	0x07, 4	; 7
	
	set_accelpower_pin_as_output();
     416:	50 9a       	sbi	0x0a, 0	; 10
	set_accelpower_pin_on();								//turn on power for accel (accel is connected to chip for power)
     418:	58 9a       	sbi	0x0b, 0	; 11

	
	set_led_pin_as_output();
     41a:	55 9a       	sbi	0x0a, 5	; 10

	set_motor1_pin_as_output();
     41c:	52 9a       	sbi	0x0a, 2	; 10
	set_motor2_pin_as_output();
     41e:	54 9a       	sbi	0x0a, 4	; 10
	
	set_led_on();						                    //turn on signal LED before timers so it comes on immediately
     420:	5d 9a       	sbi	0x0b, 5	; 11
	

	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 6b 00 	sts	0x006B, r24
	PCICR = 1<<PCIE0; 
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 68 00 	sts	0x0068, r24



void SetupTimer1(void)
{
	TCCR1A = 0;                               //mode = 0
     42e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	80 93 81 00 	sts	0x0081, r24
	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
	PCICR = 1<<PCIE0; 
	  
	SetupTimer1();   //fire up timer1 (2 bytes) - accessed via TCNT1 variable
	if (use_pwm_esc == 1) SetupTimer2();   //for "software" PWM
     438:	80 91 44 01 	lds	r24, 0x0144
     43c:	90 91 45 01 	lds	r25, 0x0145
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	31 f4       	brne	.+12     	; 0x450 <setup+0x52>
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
}

void SetupTimer2(void)
{
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A) | _BV(OCIE2B);  //enable interrupt on overflow  + enable interrupts for comparator
     444:	87 e0       	ldi	r24, 0x07	; 7
     446:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = _BV(CS22) | _BV(CS21);	//prescaler to 256
     44a:	86 e0       	ldi	r24, 0x06	; 6
     44c:	80 93 b1 00 	sts	0x00B1, r24
	PCICR = 1<<PCIE0; 
	  
	SetupTimer1();   //fire up timer1 (2 bytes) - accessed via TCNT1 variable
	if (use_pwm_esc == 1) SetupTimer2();   //for "software" PWM

	sei();  //enable interrupts to allow updating of transmitter data
     450:	78 94       	sei


	motors_brake();   //make sure those motors are off...
     452:	0e 94 ed 01 	call	0x3da	; 0x3da <motors_brake>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
	{
		toggle_led();
     45e:	e0 e2       	ldi	r30, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     460:	68 e8       	ldi	r22, 0x88	; 136
     462:	73 e1       	ldi	r23, 0x13	; 19
     464:	0a c0       	rjmp	.+20     	; 0x47a <setup+0x7c>
     466:	8b b1       	in	r24, 0x0b	; 11
     468:	8e 27       	eor	r24, r30
     46a:	8b b9       	out	0x0b, r24	; 11
     46c:	cb 01       	movw	r24, r22
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <setup+0x70>
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	4f 4f       	sbci	r20, 0xFF	; 255
     478:	5f 4f       	sbci	r21, 0xFF	; 255

	motors_brake();   //make sure those motors are off...


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
     47a:	2b 3f       	cpi	r18, 0xFB	; 251
     47c:	31 05       	cpc	r19, r1
     47e:	41 05       	cpc	r20, r1
     480:	51 05       	cpc	r21, r1
     482:	8c f3       	brlt	.-30     	; 0x466 <setup+0x68>
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot (slower)
	for (x = 1; x <= 6; x++)
	{
		toggle_led();
     48c:	a0 e2       	ldi	r26, 0x20	; 32
     48e:	64 ef       	ldi	r22, 0xF4	; 244
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	0e c0       	rjmp	.+28     	; 0x4b0 <setup+0xb2>
     494:	8b b1       	in	r24, 0x0b	; 11
     496:	8a 27       	eor	r24, r26
     498:	8b b9       	out	0x0b, r24	; 11
     49a:	80 ed       	ldi	r24, 0xD0	; 208
     49c:	97 e0       	ldi	r25, 0x07	; 7
     49e:	fb 01       	movw	r30, r22
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <setup+0xa2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a6:	d9 f7       	brne	.-10     	; 0x49e <setup+0xa0>
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	4f 4f       	sbci	r20, 0xFF	; 255
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
		_delay_ms(1);
	}


	//flash LED on boot (slower)
	for (x = 1; x <= 6; x++)
     4b0:	27 30       	cpi	r18, 0x07	; 7
     4b2:	31 05       	cpc	r19, r1
     4b4:	41 05       	cpc	r20, r1
     4b6:	51 05       	cpc	r21, r1
     4b8:	6c f3       	brlt	.-38     	; 0x494 <setup+0x96>
     4ba:	20 93 74 01 	sts	0x0174, r18
     4be:	30 93 75 01 	sts	0x0175, r19
     4c2:	40 93 76 01 	sts	0x0176, r20
     4c6:	50 93 77 01 	sts	0x0177, r21
	{
		toggle_led();
		_delay_ms(200);
	}

	throttle = 0;   //make sure throttle is off at boot
     4ca:	10 92 96 01 	sts	0x0196, r1
     4ce:	10 92 97 01 	sts	0x0197, r1
     4d2:	10 92 98 01 	sts	0x0198, r1
     4d6:	10 92 99 01 	sts	0x0199, r1
	



}
     4da:	08 95       	ret

000004dc <motors_low>:

void motors_low(void)
{

	//if not pwm - motors totally off
	if (use_pwm_esc == 0)
     4dc:	80 91 44 01 	lds	r24, 0x0144
     4e0:	90 91 45 01 	lds	r25, 0x0145
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	19 f4       	brne	.+6      	; 0x4ee <motors_low+0x12>
	{
		set_motor1_pin_off();
     4e8:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     4ea:	5c 98       	cbi	0x0b, 4	; 11
     4ec:	08 95       	ret
	}
	
	//send low signal if pwm (still providing some motor power)
	if (use_pwm_esc == 1)
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	39 f4       	brne	.+14     	; 0x500 <__stack+0x1>
	{
        OCR2A = pwm_throttle_low;
     4f2:	80 91 06 01 	lds	r24, 0x0106
     4f6:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = 95;
     4fa:	8f e5       	ldi	r24, 0x5F	; 95
     4fc:	80 93 b4 00 	sts	0x00B4, r24
     500:	08 95       	ret

00000502 <motors_left>:


void motors_left(void)
{

	if (use_pwm_esc == 0)
     502:	80 91 44 01 	lds	r24, 0x0144
     506:	90 91 45 01 	lds	r25, 0x0145
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	19 f4       	brne	.+6      	; 0x514 <motors_left+0x12>
	{
		set_motor1_pin_on();
     50e:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_on();
     510:	5c 9a       	sbi	0x0b, 4	; 11
     512:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	31 f4       	brne	.+12     	; 0x524 <motors_left+0x22>
	{
        OCR2A = pwm_throttle_high;
     518:	80 91 08 01 	lds	r24, 0x0108
     51c:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_high;
     520:	80 93 b4 00 	sts	0x00B4, r24
     524:	08 95       	ret

00000526 <motor1_on>:


void motor1_on(void)
{

	if (use_pwm_esc == 0)
     526:	80 91 44 01 	lds	r24, 0x0144
     52a:	90 91 45 01 	lds	r25, 0x0145
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	19 f4       	brne	.+6      	; 0x538 <motor1_on+0x12>
	{
		set_motor1_pin_on();
     532:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_off();
     534:	5c 98       	cbi	0x0b, 4	; 11
     536:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	39 f4       	brne	.+14     	; 0x54a <motor1_on+0x24>
	{
        OCR2A = pwm_throttle_high;
     53c:	80 91 08 01 	lds	r24, 0x0108
     540:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = 95;
     544:	8f e5       	ldi	r24, 0x5F	; 95
     546:	80 93 b4 00 	sts	0x00B4, r24
     54a:	08 95       	ret

0000054c <motor2_on>:

}

void motor2_on(void)
{
	if (use_pwm_esc == 0)
     54c:	80 91 44 01 	lds	r24, 0x0144
     550:	90 91 45 01 	lds	r25, 0x0145
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	19 f4       	brne	.+6      	; 0x55e <motor2_on+0x12>
	{
		set_motor1_pin_off();
     558:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_on();
     55a:	5c 9a       	sbi	0x0b, 4	; 11
     55c:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	41 f4       	brne	.+16     	; 0x572 <motor2_on+0x26>
	{
        OCR2A = pwm_throttle_low;
     562:	80 91 06 01 	lds	r24, 0x0106
     566:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_high;
     56a:	80 91 08 01 	lds	r24, 0x0108
     56e:	80 93 b4 00 	sts	0x00B4, r24
     572:	08 95       	ret

00000574 <do_spin_180>:
}


	
void do_spin_180(int spin_cycle)
{	
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
		{
			led_is_on_now = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	48 2e       	mov	r4, r24
     59a:	51 2c       	mov	r5, r1
     59c:	88 c1       	rjmp	.+784    	; 0x8ae <do_spin_180+0x33a>
{	

	while (TCNT1 < half_spin_time)
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
     59e:	60 91 84 00 	lds	r22, 0x0084
     5a2:	70 91 85 00 	lds	r23, 0x0085
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     5ae:	20 91 ce 01 	lds	r18, 0x01CE
     5b2:	30 91 cf 01 	lds	r19, 0x01CF
     5b6:	40 91 d0 01 	lds	r20, 0x01D0
     5ba:	50 91 d1 01 	lds	r21, 0x01D1
     5be:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     5c2:	88 23       	and	r24, r24
     5c4:	14 f4       	brge	.+4      	; 0x5ca <do_spin_180+0x56>
     5c6:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>
		if (TCNT1 > end_brake) motors_left();					//full power if we're after braking
     5ca:	60 91 84 00 	lds	r22, 0x0084
     5ce:	70 91 85 00 	lds	r23, 0x0085
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     5da:	20 91 a2 01 	lds	r18, 0x01A2
     5de:	30 91 a3 01 	lds	r19, 0x01A3
     5e2:	40 91 a4 01 	lds	r20, 0x01A4
     5e6:	50 91 a5 01 	lds	r21, 0x01A5
     5ea:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	14 f4       	brge	.+4      	; 0x5f6 <do_spin_180+0x82>
     5f2:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>

		led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops
     5f6:	60 91 84 00 	lds	r22, 0x0084
     5fa:	70 91 85 00 	lds	r23, 0x0085
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	20 91 78 01 	lds	r18, 0x0178
     606:	30 91 79 01 	lds	r19, 0x0179
     60a:	40 91 7a 01 	lds	r20, 0x017A
     60e:	50 91 7b 01 	lds	r21, 0x017B
     612:	62 0f       	add	r22, r18
     614:	73 1f       	adc	r23, r19
     616:	84 1f       	adc	r24, r20
     618:	95 1f       	adc	r25, r21
     61a:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
     61e:	60 93 82 01 	sts	0x0182, r22
     622:	70 93 83 01 	sts	0x0183, r23
     626:	80 93 84 01 	sts	0x0184, r24
     62a:	90 93 85 01 	sts	0x0185, r25

		if ( TCNT1 > begin_brake && TCNT1 < end_brake )         //switch to single motor as soon as entering braking cycle
     62e:	60 91 84 00 	lds	r22, 0x0084
     632:	70 91 85 00 	lds	r23, 0x0085
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     63e:	20 91 ce 01 	lds	r18, 0x01CE
     642:	30 91 cf 01 	lds	r19, 0x01CF
     646:	40 91 d0 01 	lds	r20, 0x01D0
     64a:	50 91 d1 01 	lds	r21, 0x01D1
     64e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     652:	18 16       	cp	r1, r24
     654:	0c f0       	brlt	.+2      	; 0x658 <do_spin_180+0xe4>
     656:	65 c0       	rjmp	.+202    	; 0x722 <do_spin_180+0x1ae>
     658:	60 91 84 00 	lds	r22, 0x0084
     65c:	70 91 85 00 	lds	r23, 0x0085
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     668:	20 91 a2 01 	lds	r18, 0x01A2
     66c:	30 91 a3 01 	lds	r19, 0x01A3
     670:	40 91 a4 01 	lds	r20, 0x01A4
     674:	50 91 a5 01 	lds	r21, 0x01A5
     678:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	0c f0       	brlt	.+2      	; 0x682 <do_spin_180+0x10e>
     680:	50 c0       	rjmp	.+160    	; 0x722 <do_spin_180+0x1ae>
		{
			//if sitting still
			if ( forward == 0 && backward == 0 )
     682:	80 91 ac 01 	lds	r24, 0x01AC
     686:	90 91 ad 01 	lds	r25, 0x01AD
     68a:	89 2b       	or	r24, r25
     68c:	41 f5       	brne	.+80     	; 0x6de <do_spin_180+0x16a>
     68e:	80 91 bc 01 	lds	r24, 0x01BC
     692:	90 91 bd 01 	lds	r25, 0x01BD
     696:	89 2b       	or	r24, r25
     698:	11 f5       	brne	.+68     	; 0x6de <do_spin_180+0x16a>
			{
				if ( alternate_motor_cycle == 0 )  //alternates which motor is used each cycle if sitting still
     69a:	80 91 4e 01 	lds	r24, 0x014E
     69e:	90 91 4f 01 	lds	r25, 0x014F
     6a2:	89 2b       	or	r24, r25
     6a4:	59 f4       	brne	.+22     	; 0x6bc <do_spin_180+0x148>
				{	
					if (spin_cycle == 1) motor1_on();
     6a6:	c1 30       	cpi	r28, 0x01	; 1
     6a8:	d1 05       	cpc	r29, r1
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <do_spin_180+0x13e>
     6ac:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <do_spin_180+0x148>
					if (spin_cycle == 2) motor2_on();
     6b2:	c2 30       	cpi	r28, 0x02	; 2
     6b4:	d1 05       	cpc	r29, r1
     6b6:	11 f4       	brne	.+4      	; 0x6bc <do_spin_180+0x148>
     6b8:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
				}

				if ( alternate_motor_cycle == 1 )
     6bc:	80 91 4e 01 	lds	r24, 0x014E
     6c0:	90 91 4f 01 	lds	r25, 0x014F
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	59 f4       	brne	.+22     	; 0x6de <do_spin_180+0x16a>
				{	
					if (spin_cycle == 1) motor2_on();
     6c8:	c1 30       	cpi	r28, 0x01	; 1
     6ca:	d1 05       	cpc	r29, r1
     6cc:	19 f4       	brne	.+6      	; 0x6d4 <do_spin_180+0x160>
     6ce:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <do_spin_180+0x16a>
					if (spin_cycle == 2) motor1_on();
     6d4:	c2 30       	cpi	r28, 0x02	; 2
     6d6:	d1 05       	cpc	r29, r1
     6d8:	11 f4       	brne	.+4      	; 0x6de <do_spin_180+0x16a>
     6da:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
				}

			}

			//if ( going forward / back set motors appropriately (this is "where it happens")
			if ( forward == 1)
     6de:	80 91 ac 01 	lds	r24, 0x01AC
     6e2:	90 91 ad 01 	lds	r25, 0x01AD
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	59 f4       	brne	.+22     	; 0x700 <do_spin_180+0x18c>
			{	
				if (spin_cycle == 1) motor1_on();
     6ea:	c1 30       	cpi	r28, 0x01	; 1
     6ec:	d1 05       	cpc	r29, r1
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <do_spin_180+0x182>
     6f0:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <do_spin_180+0x18c>
				if (spin_cycle == 2) motor2_on();
     6f6:	c2 30       	cpi	r28, 0x02	; 2
     6f8:	d1 05       	cpc	r29, r1
     6fa:	11 f4       	brne	.+4      	; 0x700 <do_spin_180+0x18c>
     6fc:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
			}

			if ( backward == 1)
     700:	80 91 bc 01 	lds	r24, 0x01BC
     704:	90 91 bd 01 	lds	r25, 0x01BD
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	59 f4       	brne	.+22     	; 0x722 <do_spin_180+0x1ae>
			{	
				if (spin_cycle == 1) motor2_on();
     70c:	c1 30       	cpi	r28, 0x01	; 1
     70e:	d1 05       	cpc	r29, r1
     710:	19 f4       	brne	.+6      	; 0x718 <do_spin_180+0x1a4>
     712:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
     716:	05 c0       	rjmp	.+10     	; 0x722 <do_spin_180+0x1ae>
				if (spin_cycle == 2) motor1_on();
     718:	c2 30       	cpi	r28, 0x02	; 2
     71a:	d1 05       	cpc	r29, r1
     71c:	11 f4       	brne	.+4      	; 0x722 <do_spin_180+0x1ae>
     71e:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
			}
				
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power
     722:	60 91 84 00 	lds	r22, 0x0084
     726:	70 91 85 00 	lds	r23, 0x0085
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     732:	20 91 a2 01 	lds	r18, 0x01A2
     736:	30 91 a3 01 	lds	r19, 0x01A3
     73a:	40 91 a4 01 	lds	r20, 0x01A4
     73e:	50 91 a5 01 	lds	r21, 0x01A5
     742:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	14 f4       	brge	.+4      	; 0x74e <do_spin_180+0x1da>
     74a:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>

		if ( TCNT1 < power_kill_part1 ) motors_low();            //if throttle is less that 100% - kill power at appropriate time
     74e:	60 91 84 00 	lds	r22, 0x0084
     752:	70 91 85 00 	lds	r23, 0x0085
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     75e:	20 91 92 01 	lds	r18, 0x0192
     762:	30 91 93 01 	lds	r19, 0x0193
     766:	40 91 94 01 	lds	r20, 0x0194
     76a:	50 91 95 01 	lds	r21, 0x0195
     76e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     772:	88 23       	and	r24, r24
     774:	14 f4       	brge	.+4      	; 0x77a <do_spin_180+0x206>
     776:	0e 94 6e 02 	call	0x4dc	; 0x4dc <motors_low>
		if ( TCNT1 > power_kill_part2 ) motors_low();            //if throttle is less that 100% - kill power at appropriate time
     77a:	60 91 84 00 	lds	r22, 0x0084
     77e:	70 91 85 00 	lds	r23, 0x0085
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     78a:	20 91 8a 01 	lds	r18, 0x018A
     78e:	30 91 8b 01 	lds	r19, 0x018B
     792:	40 91 8c 01 	lds	r20, 0x018C
     796:	50 91 8d 01 	lds	r21, 0x018D
     79a:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     79e:	18 16       	cp	r1, r24
     7a0:	14 f4       	brge	.+4      	; 0x7a6 <do_spin_180+0x232>
     7a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <motors_low>

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     7a6:	a0 90 a6 01 	lds	r10, 0x01A6
     7aa:	b0 90 a7 01 	lds	r11, 0x01A7
     7ae:	c0 90 a8 01 	lds	r12, 0x01A8
     7b2:	d0 90 a9 01 	lds	r13, 0x01A9
     7b6:	60 90 c4 01 	lds	r6, 0x01C4
     7ba:	70 90 c5 01 	lds	r7, 0x01C5
     7be:	80 90 c6 01 	lds	r8, 0x01C6
     7c2:	90 90 c7 01 	lds	r9, 0x01C7
     7c6:	c6 01       	movw	r24, r12
     7c8:	b5 01       	movw	r22, r10
     7ca:	a4 01       	movw	r20, r8
     7cc:	93 01       	movw	r18, r6
     7ce:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	24 f5       	brge	.+72     	; 0x81e <do_spin_180+0x2aa>
		{
			led_is_on_now = 1;
     7d6:	50 92 81 01 	sts	0x0181, r5
     7da:	40 92 80 01 	sts	0x0180, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     7de:	e0 90 82 01 	lds	r14, 0x0182
     7e2:	f0 90 83 01 	lds	r15, 0x0183
     7e6:	00 91 84 01 	lds	r16, 0x0184
     7ea:	10 91 85 01 	lds	r17, 0x0185
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 01       	movw	r22, r14
     7f2:	a4 01       	movw	r20, r8
     7f4:	93 01       	movw	r18, r6
     7f6:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	24 f4       	brge	.+8      	; 0x806 <do_spin_180+0x292>
     7fe:	10 92 81 01 	sts	0x0181, r1
     802:	10 92 80 01 	sts	0x0180, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	a6 01       	movw	r20, r12
     80c:	95 01       	movw	r18, r10
     80e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	24 f4       	brge	.+8      	; 0x81e <do_spin_180+0x2aa>
     816:	50 92 81 01 	sts	0x0181, r5
     81a:	40 92 80 01 	sts	0x0180, r4
		}


		if (led_off > led_on)
     81e:	c4 01       	movw	r24, r8
     820:	b3 01       	movw	r22, r6
     822:	a6 01       	movw	r20, r12
     824:	95 01       	movw	r18, r10
     826:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	24 f5       	brge	.+72     	; 0x876 <do_spin_180+0x302>
		{
		
			led_is_on_now = 0;
     82e:	10 92 81 01 	sts	0x0181, r1
     832:	10 92 80 01 	sts	0x0180, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     836:	e0 90 82 01 	lds	r14, 0x0182
     83a:	f0 90 83 01 	lds	r15, 0x0183
     83e:	00 91 84 01 	lds	r16, 0x0184
     842:	10 91 85 01 	lds	r17, 0x0185
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	a6 01       	movw	r20, r12
     84c:	95 01       	movw	r18, r10
     84e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	24 f4       	brge	.+8      	; 0x85e <do_spin_180+0x2ea>
     856:	50 92 81 01 	sts	0x0181, r5
     85a:	40 92 80 01 	sts	0x0180, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     85e:	c8 01       	movw	r24, r16
     860:	b7 01       	movw	r22, r14
     862:	a4 01       	movw	r20, r8
     864:	93 01       	movw	r18, r6
     866:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     86a:	18 16       	cp	r1, r24
     86c:	24 f4       	brge	.+8      	; 0x876 <do_spin_180+0x302>
     86e:	10 92 81 01 	sts	0x0181, r1
     872:	10 92 80 01 	sts	0x0180, r1
		
		}
	
	
		if ( led_is_on_now == 1 )
     876:	80 91 80 01 	lds	r24, 0x0180
     87a:	90 91 81 01 	lds	r25, 0x0181
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	91 05       	cpc	r25, r1
     882:	91 f4       	brne	.+36     	; 0x8a8 <do_spin_180+0x334>
		{
			//flash the LED if we're in flashy mode - otherwise it's just on
			if ( flashy_led == 1 )
     884:	80 91 ae 01 	lds	r24, 0x01AE
     888:	90 91 af 01 	lds	r25, 0x01AF
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	51 f4       	brne	.+20     	; 0x8a4 <do_spin_180+0x330>
			{
				
				if ((TCNT1 / 160) % 2 == 0) set_led_on(); else set_led_off();
     890:	80 91 84 00 	lds	r24, 0x0084
     894:	90 91 85 00 	lds	r25, 0x0085
     898:	60 ea       	ldi	r22, 0xA0	; 160
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	0e 94 18 13 	call	0x2630	; 0x2630 <__udivmodhi4>
     8a0:	60 fd       	sbrc	r22, 0
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <do_spin_180+0x338>
			}
			else
			{
				set_led_on();
     8a4:	5d 9a       	sbi	0x0b, 5	; 11
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <do_spin_180+0x33a>
			}
		}

		if ( led_is_on_now == 0 )
     8a8:	89 2b       	or	r24, r25
     8aa:	09 f4       	brne	.+2      	; 0x8ae <do_spin_180+0x33a>
		{
			set_led_off();
     8ac:	5d 98       	cbi	0x0b, 5	; 11

	
void do_spin_180(int spin_cycle)
{	

	while (TCNT1 < half_spin_time)
     8ae:	60 91 84 00 	lds	r22, 0x0084
     8b2:	70 91 85 00 	lds	r23, 0x0085
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     8be:	20 91 9a 01 	lds	r18, 0x019A
     8c2:	30 91 9b 01 	lds	r19, 0x019B
     8c6:	40 91 9c 01 	lds	r20, 0x019C
     8ca:	50 91 9d 01 	lds	r21, 0x019D
     8ce:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     8d2:	87 fd       	sbrc	r24, 7
     8d4:	64 ce       	rjmp	.-824    	; 0x59e <do_spin_180+0x2a>
			set_led_off();
		}
		
	}

}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	9f 90       	pop	r9
     8ec:	8f 90       	pop	r8
     8ee:	7f 90       	pop	r7
     8f0:	6f 90       	pop	r6
     8f2:	5f 90       	pop	r5
     8f4:	4f 90       	pop	r4
     8f6:	08 95       	ret

000008f8 <reset_rc>:


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     8f8:	10 92 5a 01 	sts	0x015A, r1
     8fc:	10 92 5b 01 	sts	0x015B, r1
     900:	10 92 5c 01 	sts	0x015C, r1
     904:	10 92 5d 01 	sts	0x015D, r1
	leftright_hightime = 0;
     908:	10 92 62 01 	sts	0x0162, r1
     90c:	10 92 63 01 	sts	0x0163, r1
     910:	10 92 64 01 	sts	0x0164, r1
     914:	10 92 65 01 	sts	0x0165, r1
	forwardback_hightime = 0;
     918:	10 92 5e 01 	sts	0x015E, r1
     91c:	10 92 5f 01 	sts	0x015F, r1
     920:	10 92 60 01 	sts	0x0160, r1
     924:	10 92 61 01 	sts	0x0161, r1

}
     928:	08 95       	ret

0000092a <throttle_change>:

//updates RC channels any time specified pin goes high/low
//following 3 routines are all identical except for channels and some safety code in throttle_change (not easy to consolidate them)
void throttle_change(void)
{
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
	
	//did the pin go HIGH? - then note time
	if ( throttle_pin != 0 ) throttle_hightime = TCNT1;    
     932:	18 9b       	sbis	0x03, 0	; 3
     934:	0e c0       	rjmp	.+28     	; 0x952 <throttle_change+0x28>
     936:	80 91 84 00 	lds	r24, 0x0084
     93a:	90 91 85 00 	lds	r25, 0x0085
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	80 93 5a 01 	sts	0x015A, r24
     946:	90 93 5b 01 	sts	0x015B, r25
     94a:	a0 93 5c 01 	sts	0x015C, r26
     94e:	b0 93 5d 01 	sts	0x015D, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if ( throttle_pin == 0 && throttle_hightime != 0 && TCNT1 > throttle_hightime)
     952:	18 99       	sbic	0x03, 0	; 3
     954:	59 c0       	rjmp	.+178    	; 0xa08 <throttle_change+0xde>
     956:	e0 90 5a 01 	lds	r14, 0x015A
     95a:	f0 90 5b 01 	lds	r15, 0x015B
     95e:	00 91 5c 01 	lds	r16, 0x015C
     962:	10 91 5d 01 	lds	r17, 0x015D
     966:	e1 14       	cp	r14, r1
     968:	f1 04       	cpc	r15, r1
     96a:	01 05       	cpc	r16, r1
     96c:	11 05       	cpc	r17, r1
     96e:	09 f4       	brne	.+2      	; 0x972 <throttle_change+0x48>
     970:	4b c0       	rjmp	.+150    	; 0xa08 <throttle_change+0xde>
     972:	80 91 84 00 	lds	r24, 0x0084
     976:	90 91 85 00 	lds	r25, 0x0085
     97a:	a0 e0       	ldi	r26, 0x00	; 0
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e8 16       	cp	r14, r24
     980:	f9 06       	cpc	r15, r25
     982:	0a 07       	cpc	r16, r26
     984:	1b 07       	cpc	r17, r27
     986:	0c f0       	brlt	.+2      	; 0x98a <throttle_change+0x60>
     988:	3f c0       	rjmp	.+126    	; 0xa08 <throttle_change+0xde>
	{		
		throttle = ((throttle * 85) + ((TCNT1 - throttle_hightime) * 15)) / 100;		//smoothed RC data
     98a:	60 91 96 01 	lds	r22, 0x0196
     98e:	70 91 97 01 	lds	r23, 0x0197
     992:	80 91 98 01 	lds	r24, 0x0198
     996:	90 91 99 01 	lds	r25, 0x0199
     99a:	20 91 84 00 	lds	r18, 0x0084
     99e:	30 91 85 00 	lds	r19, 0x0085
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	2e 19       	sub	r18, r14
     9a8:	3f 09       	sbc	r19, r15
     9aa:	40 0b       	sbc	r20, r16
     9ac:	51 0b       	sbc	r21, r17
     9ae:	79 01       	movw	r14, r18
     9b0:	8a 01       	movw	r16, r20
     9b2:	e4 e0       	ldi	r30, 0x04	; 4
     9b4:	ee 0c       	add	r14, r14
     9b6:	ff 1c       	adc	r15, r15
     9b8:	00 1f       	adc	r16, r16
     9ba:	11 1f       	adc	r17, r17
     9bc:	ea 95       	dec	r30
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <throttle_change+0x8a>
     9c0:	e2 1a       	sub	r14, r18
     9c2:	f3 0a       	sbc	r15, r19
     9c4:	04 0b       	sbc	r16, r20
     9c6:	15 0b       	sbc	r17, r21
     9c8:	25 e5       	ldi	r18, 0x55	; 85
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsi3>
     9d4:	e6 0e       	add	r14, r22
     9d6:	f7 1e       	adc	r15, r23
     9d8:	08 1f       	adc	r16, r24
     9da:	19 1f       	adc	r17, r25
     9dc:	c8 01       	movw	r24, r16
     9de:	b7 01       	movw	r22, r14
     9e0:	24 e6       	ldi	r18, 0x64	; 100
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	0e 94 3f 13 	call	0x267e	; 0x267e <__divmodsi4>
     9ec:	c9 01       	movw	r24, r18
     9ee:	da 01       	movw	r26, r20
     9f0:	80 93 96 01 	sts	0x0196, r24
     9f4:	90 93 97 01 	sts	0x0197, r25
     9f8:	a0 93 98 01 	sts	0x0198, r26
     9fc:	b0 93 99 01 	sts	0x0199, r27
																						//throttle is highly smoothed to help prevent accidental spin-down
		rotations_since_throttle_was_set = 0;					 //note that throttle was successfully set (for safety)
     a00:	10 92 53 01 	sts	0x0153, r1
     a04:	10 92 52 01 	sts	0x0152, r1
	}


	throttle_hilow = throttle_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     a08:	83 b1       	in	r24, 0x03	; 3
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	90 93 cb 01 	sts	0x01CB, r25
     a14:	80 93 ca 01 	sts	0x01CA, r24
	
}
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <leftright_change>:

void leftright_change(void)
{
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
	//did the pin go HIGH? - then note time
	if (leftright_pin != 0 ) leftright_hightime = TCNT1;    
     a2a:	19 9b       	sbis	0x03, 1	; 3
     a2c:	0e c0       	rjmp	.+28     	; 0xa4a <leftright_change+0x28>
     a2e:	80 91 84 00 	lds	r24, 0x0084
     a32:	90 91 85 00 	lds	r25, 0x0085
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	80 93 62 01 	sts	0x0162, r24
     a3e:	90 93 63 01 	sts	0x0163, r25
     a42:	a0 93 64 01 	sts	0x0164, r26
     a46:	b0 93 65 01 	sts	0x0165, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (leftright_pin == 0 && leftright_hightime != 0 && TCNT1 > leftright_hightime)
     a4a:	19 99       	sbic	0x03, 1	; 3
     a4c:	3e c0       	rjmp	.+124    	; 0xaca <leftright_change+0xa8>
     a4e:	e0 90 62 01 	lds	r14, 0x0162
     a52:	f0 90 63 01 	lds	r15, 0x0163
     a56:	00 91 64 01 	lds	r16, 0x0164
     a5a:	10 91 65 01 	lds	r17, 0x0165
     a5e:	e1 14       	cp	r14, r1
     a60:	f1 04       	cpc	r15, r1
     a62:	01 05       	cpc	r16, r1
     a64:	11 05       	cpc	r17, r1
     a66:	89 f1       	breq	.+98     	; 0xaca <leftright_change+0xa8>
     a68:	80 91 84 00 	lds	r24, 0x0084
     a6c:	90 91 85 00 	lds	r25, 0x0085
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e8 16       	cp	r14, r24
     a76:	f9 06       	cpc	r15, r25
     a78:	0a 07       	cpc	r16, r26
     a7a:	1b 07       	cpc	r17, r27
     a7c:	34 f5       	brge	.+76     	; 0xaca <leftright_change+0xa8>
	{
			leftright = ((leftright * 50) + ((TCNT1 - leftright_hightime) * 50)) / 100;		//smoothed RC data
     a7e:	20 91 9e 01 	lds	r18, 0x019E
     a82:	30 91 9f 01 	lds	r19, 0x019F
     a86:	40 91 a0 01 	lds	r20, 0x01A0
     a8a:	50 91 a1 01 	lds	r21, 0x01A1
     a8e:	60 91 84 00 	lds	r22, 0x0084
     a92:	70 91 85 00 	lds	r23, 0x0085
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	6e 19       	sub	r22, r14
     a9c:	7f 09       	sbc	r23, r15
     a9e:	80 0b       	sbc	r24, r16
     aa0:	91 0b       	sbc	r25, r17
     aa2:	62 0f       	add	r22, r18
     aa4:	73 1f       	adc	r23, r19
     aa6:	84 1f       	adc	r24, r20
     aa8:	95 1f       	adc	r25, r21
     aaa:	22 e0       	ldi	r18, 0x02	; 2
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	0e 94 3f 13 	call	0x267e	; 0x267e <__divmodsi4>
     ab6:	c9 01       	movw	r24, r18
     ab8:	da 01       	movw	r26, r20
     aba:	80 93 9e 01 	sts	0x019E, r24
     abe:	90 93 9f 01 	sts	0x019F, r25
     ac2:	a0 93 a0 01 	sts	0x01A0, r26
     ac6:	b0 93 a1 01 	sts	0x01A1, r27
	}
  
	leftright_hilow = leftright_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     aca:	83 b1       	in	r24, 0x03	; 3
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	82 70       	andi	r24, 0x02	; 2
     ad0:	90 70       	andi	r25, 0x00	; 0
     ad2:	90 93 6b 01 	sts	0x016B, r25
     ad6:	80 93 6a 01 	sts	0x016A, r24
		
}
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <forwardback_change>:

void forwardback_change(void)
{
	//did the pin go HIGH? - then note time
	if (forwardback_pin != 0 ) forwardback_hightime = TCNT1;    
     ae4:	1a 9b       	sbis	0x03, 2	; 3
     ae6:	0e c0       	rjmp	.+28     	; 0xb04 <forwardback_change+0x20>
     ae8:	80 91 84 00 	lds	r24, 0x0084
     aec:	90 91 85 00 	lds	r25, 0x0085
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	80 93 5e 01 	sts	0x015E, r24
     af8:	90 93 5f 01 	sts	0x015F, r25
     afc:	a0 93 60 01 	sts	0x0160, r26
     b00:	b0 93 61 01 	sts	0x0161, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (forwardback_pin == 0 && forwardback_hightime != 0 && TCNT1 > forwardback_hightime) forwardback = TCNT1 - forwardback_hightime;      
     b04:	1a 99       	sbic	0x03, 2	; 3
     b06:	2a c0       	rjmp	.+84     	; 0xb5c <forwardback_change+0x78>
     b08:	20 91 5e 01 	lds	r18, 0x015E
     b0c:	30 91 5f 01 	lds	r19, 0x015F
     b10:	40 91 60 01 	lds	r20, 0x0160
     b14:	50 91 61 01 	lds	r21, 0x0161
     b18:	21 15       	cp	r18, r1
     b1a:	31 05       	cpc	r19, r1
     b1c:	41 05       	cpc	r20, r1
     b1e:	51 05       	cpc	r21, r1
     b20:	e9 f0       	breq	.+58     	; 0xb5c <forwardback_change+0x78>
     b22:	80 91 84 00 	lds	r24, 0x0084
     b26:	90 91 85 00 	lds	r25, 0x0085
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	28 17       	cp	r18, r24
     b30:	39 07       	cpc	r19, r25
     b32:	4a 07       	cpc	r20, r26
     b34:	5b 07       	cpc	r21, r27
     b36:	94 f4       	brge	.+36     	; 0xb5c <forwardback_change+0x78>
     b38:	80 91 84 00 	lds	r24, 0x0084
     b3c:	90 91 85 00 	lds	r25, 0x0085
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	82 1b       	sub	r24, r18
     b46:	93 0b       	sbc	r25, r19
     b48:	a4 0b       	sbc	r26, r20
     b4a:	b5 0b       	sbc	r27, r21
     b4c:	80 93 7c 01 	sts	0x017C, r24
     b50:	90 93 7d 01 	sts	0x017D, r25
     b54:	a0 93 7e 01 	sts	0x017E, r26
     b58:	b0 93 7f 01 	sts	0x017F, r27
  
	forwardback_hilow = forwardback_pin;                               //make note of pin state for reference next time interrupt is triggered...
     b5c:	83 b1       	in	r24, 0x03	; 3
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	84 70       	andi	r24, 0x04	; 4
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	90 93 c3 01 	sts	0x01C3, r25
     b68:	80 93 c2 01 	sts	0x01C2, r24

}
     b6c:	08 95       	ret

00000b6e <__vector_3>:


//main interrupt handler - is called any time any ports on PORTB change

ISR (PCINT0_vect)
{
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
	
	//check all RC channels to see if they were updated
	if (throttle_hilow != throttle_pin) throttle_change();
     b90:	83 b1       	in	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	81 70       	andi	r24, 0x01	; 1
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	20 91 ca 01 	lds	r18, 0x01CA
     b9c:	30 91 cb 01 	lds	r19, 0x01CB
     ba0:	28 17       	cp	r18, r24
     ba2:	39 07       	cpc	r19, r25
     ba4:	11 f0       	breq	.+4      	; 0xbaa <__vector_3+0x3c>
     ba6:	0e 94 95 04 	call	0x92a	; 0x92a <throttle_change>
	if (leftright_hilow != leftright_pin) leftright_change();
     baa:	83 b1       	in	r24, 0x03	; 3
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	82 70       	andi	r24, 0x02	; 2
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	20 91 6a 01 	lds	r18, 0x016A
     bb6:	30 91 6b 01 	lds	r19, 0x016B
     bba:	28 17       	cp	r18, r24
     bbc:	39 07       	cpc	r19, r25
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <__vector_3+0x56>
     bc0:	0e 94 11 05 	call	0xa22	; 0xa22 <leftright_change>
	if (forwardback_hilow != forwardback_pin) forwardback_change();
     bc4:	83 b1       	in	r24, 0x03	; 3
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	84 70       	andi	r24, 0x04	; 4
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	20 91 c2 01 	lds	r18, 0x01C2
     bd0:	30 91 c3 01 	lds	r19, 0x01C3
     bd4:	28 17       	cp	r18, r24
     bd6:	39 07       	cpc	r19, r25
     bd8:	11 f0       	breq	.+4      	; 0xbde <__vector_3+0x70>
     bda:	0e 94 72 05 	call	0xae4	; 0xae4 <forwardback_change>

}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <SetupTimer1>:



void SetupTimer1(void)
{
	TCCR1A = 0;                               //mode = 0
     c00:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	80 93 81 00 	sts	0x0081, r24
}
     c0a:	08 95       	ret

00000c0c <SetupTimer2>:

void SetupTimer2(void)
{
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A) | _BV(OCIE2B);  //enable interrupt on overflow  + enable interrupts for comparator
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = _BV(CS22) | _BV(CS21);	//prescaler to 256
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	80 93 b1 00 	sts	0x00B1, r24
 }
     c18:	08 95       	ret

00000c1a <__vector_9>:

ISR(TIMER2_OVF_vect)    //sets both motor pins high on timer 2 overflow if using PWM
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
	set_motor1_pin_on();
     c24:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_pin_on();
     c26:	5c 9a       	sbi	0x0b, 4	; 11
}
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_7>:

ISR(TIMER2_COMPA_vect)	//set motor1 low on compare match
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
	set_motor1_pin_off();
     c3c:	5a 98       	cbi	0x0b, 2	; 11
}
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <__vector_8>:

ISR(TIMER2_COMPB_vect)	//set motor2 low on compare match
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
	set_motor2_pin_off();
     c52:	5c 98       	cbi	0x0b, 4	; 11
}
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <adc_init>:

void adc_init(void)
{
 
  	// Free running Mode
	ADCSRB = 0x00;
     c5e:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     c62:	86 e8       	ldi	r24, 0x86	; 134
     c64:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	80 93 7c 00 	sts	0x007C, r24
}
     c6e:	08 95       	ret

00000c70 <read_adc>:
{

    unsigned int adc_data;
	
	// Start conversion by setting ADSC on ADCSRA Register
	  ADCSRA |= (1<<ADSC);
     c70:	80 91 7a 00 	lds	r24, 0x007A
     c74:	80 64       	ori	r24, 0x40	; 64
     c76:	80 93 7a 00 	sts	0x007A, r24

	// wait until convertion complete ADSC=0 -> Complete
    while (ADCSRA & (1<<ADSC));
     c7a:	80 91 7a 00 	lds	r24, 0x007A
     c7e:	86 fd       	sbrc	r24, 6
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <read_adc+0xa>
	    
	adc_data = ADCL;   
     c82:	90 91 78 00 	lds	r25, 0x0078

	//shift from low level to high level ADC, from 8bit to 10bit

	adc_data += (ADCH<<8);	  
     c86:	80 91 79 00 	lds	r24, 0x0079
     c8a:	38 2f       	mov	r19, r24
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	29 0f       	add	r18, r25
     c90:	31 1d       	adc	r19, r1

	return (adc_data);

}
     c92:	c9 01       	movw	r24, r18
     c94:	08 95       	ret

00000c96 <get_averaged_accel>:


}


float get_averaged_accel(float average_count, int us_delay) {
     c96:	2f 92       	push	r2
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	2a 97       	sbiw	r28, 0x0a	; 10
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	1b 01       	movw	r2, r22
     ccc:	2c 01       	movw	r4, r24
     cce:	5c 83       	std	Y+4, r21	; 0x04
     cd0:	4b 83       	std	Y+3, r20	; 0x03
     cd2:	0f 2e       	mov	r0, r31
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	6f 2e       	mov	r6, r31
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	7f 2e       	mov	r7, r31
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8f 2e       	mov	r8, r31
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	9f 2e       	mov	r9, r31
     ce4:	f0 2d       	mov	r31, r0
     ce6:	1a 86       	std	Y+10, r1	; 0x0a
     ce8:	19 86       	std	Y+9, r1	; 0x09
	for (int loop = 0; loop < average_count; loop++)
	{
		averaged_accel = averaged_accel + read_adc() / average_count;
		
		//delay samples over time to reduce noise
		if (us_delay !=0) _delay_us(us_delay);
     cea:	ca 01       	movw	r24, r20
     cec:	aa 27       	eor	r26, r26
     cee:	97 fd       	sbrc	r25, 7
     cf0:	a0 95       	com	r26
     cf2:	ba 2f       	mov	r27, r26
     cf4:	8d 83       	std	Y+5, r24	; 0x05
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	af 83       	std	Y+7, r26	; 0x07
     cfa:	b8 87       	std	Y+8, r27	; 0x08
     cfc:	93 c0       	rjmp	.+294    	; 0xe24 <get_averaged_accel+0x18e>
float get_averaged_accel(float average_count, int us_delay) {
	
	float averaged_accel = 0;
	for (int loop = 0; loop < average_count; loop++)
	{
		averaged_accel = averaged_accel + read_adc() / average_count;
     cfe:	0e 94 38 06 	call	0xc70	; 0xc70 <read_adc>
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
		
		//delay samples over time to reduce noise
		if (us_delay !=0) _delay_us(us_delay);
     d06:	ab 81       	ldd	r26, Y+3	; 0x03
     d08:	bc 81       	ldd	r27, Y+4	; 0x04
     d0a:	ab 2b       	or	r26, r27
     d0c:	09 f4       	brne	.+2      	; 0xd10 <get_averaged_accel+0x7a>
     d0e:	6f c0       	rjmp	.+222    	; 0xdee <get_averaged_accel+0x158>
     d10:	6d 81       	ldd	r22, Y+5	; 0x05
     d12:	7e 81       	ldd	r23, Y+6	; 0x06
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
     d1c:	5b 01       	movw	r10, r22
     d1e:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d20:	25 e5       	ldi	r18, 0x55	; 85
     d22:	35 e5       	ldi	r19, 0x55	; 85
     d24:	45 ed       	ldi	r20, 0xD5	; 213
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
     d2c:	7b 01       	movw	r14, r22
     d2e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	14 f4       	brge	.+4      	; 0xd44 <get_averaged_accel+0xae>
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	53 c0       	rjmp	.+166    	; 0xdea <get_averaged_accel+0x154>
		__ticks = 1;
	else if (__tmp > 255)
     d44:	c8 01       	movw	r24, r16
     d46:	b7 01       	movw	r22, r14
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     d54:	18 16       	cp	r1, r24
     d56:	0c f0       	brlt	.+2      	; 0xd5a <get_averaged_accel+0xc4>
     d58:	44 c0       	rjmp	.+136    	; 0xde2 <get_averaged_accel+0x14c>
	{
		_delay_ms(__us / 1000.0);
     d5a:	c6 01       	movw	r24, r12
     d5c:	b5 01       	movw	r22, r10
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	4a e7       	ldi	r20, 0x7A	; 122
     d64:	54 e4       	ldi	r21, 0x44	; 68
     d66:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
     d6a:	5b 01       	movw	r10, r22
     d6c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e4       	ldi	r19, 0x40	; 64
     d72:	4c e9       	ldi	r20, 0x9C	; 156
     d74:	55 e4       	ldi	r21, 0x45	; 69
     d76:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
     d7a:	7b 01       	movw	r14, r22
     d7c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     d8a:	88 23       	and	r24, r24
     d8c:	1c f4       	brge	.+6      	; 0xd94 <get_averaged_accel+0xfe>
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	23 c0       	rjmp	.+70     	; 0xdda <get_averaged_accel+0x144>
		__ticks = 1;
	else if (__tmp > 65535)
     d94:	c8 01       	movw	r24, r16
     d96:	b7 01       	movw	r22, r14
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	4f e7       	ldi	r20, 0x7F	; 127
     d9e:	57 e4       	ldi	r21, 0x47	; 71
     da0:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
     da4:	18 16       	cp	r1, r24
     da6:	ac f4       	brge	.+42     	; 0xdd2 <get_averaged_accel+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	c6 01       	movw	r24, r12
     daa:	b5 01       	movw	r22, r10
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
     db8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fixunssfsi>
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <get_averaged_accel+0x134>
     dbe:	84 ef       	ldi	r24, 0xF4	; 244
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <get_averaged_accel+0x12c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc6:	61 50       	subi	r22, 0x01	; 1
     dc8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	61 15       	cp	r22, r1
     dcc:	71 05       	cpc	r23, r1
     dce:	b9 f7       	brne	.-18     	; 0xdbe <get_averaged_accel+0x128>
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <get_averaged_accel+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	c8 01       	movw	r24, r16
     dd4:	b7 01       	movw	r22, r14
     dd6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fixunssfsi>
     dda:	cb 01       	movw	r24, r22
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <get_averaged_accel+0x146>
     de0:	06 c0       	rjmp	.+12     	; 0xdee <get_averaged_accel+0x158>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     de2:	c8 01       	movw	r24, r16
     de4:	b7 01       	movw	r22, r14
     de6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dea:	6a 95       	dec	r22
     dec:	f1 f7       	brne	.-4      	; 0xdea <get_averaged_accel+0x154>
float get_averaged_accel(float average_count, int us_delay) {
	
	float averaged_accel = 0;
	for (int loop = 0; loop < average_count; loop++)
	{
		averaged_accel = averaged_accel + read_adc() / average_count;
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	bf 01       	movw	r22, r30
     df4:	88 27       	eor	r24, r24
     df6:	77 fd       	sbrc	r23, 7
     df8:	80 95       	com	r24
     dfa:	98 2f       	mov	r25, r24
     dfc:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
     e00:	a2 01       	movw	r20, r4
     e02:	91 01       	movw	r18, r2
     e04:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	c4 01       	movw	r24, r8
     e0e:	b3 01       	movw	r22, r6
     e10:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
     e14:	3b 01       	movw	r6, r22
     e16:	4c 01       	movw	r8, r24


float get_averaged_accel(float average_count, int us_delay) {
	
	float averaged_accel = 0;
	for (int loop = 0; loop < average_count; loop++)
     e18:	29 85       	ldd	r18, Y+9	; 0x09
     e1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e1c:	2f 5f       	subi	r18, 0xFF	; 255
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	3a 87       	std	Y+10, r19	; 0x0a
     e22:	29 87       	std	Y+9, r18	; 0x09
     e24:	a9 85       	ldd	r26, Y+9	; 0x09
     e26:	ba 85       	ldd	r27, Y+10	; 0x0a
     e28:	bd 01       	movw	r22, r26
     e2a:	88 27       	eor	r24, r24
     e2c:	77 fd       	sbrc	r23, 7
     e2e:	80 95       	com	r24
     e30:	98 2f       	mov	r25, r24
     e32:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
     e36:	a2 01       	movw	r20, r4
     e38:	91 01       	movw	r18, r2
     e3a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
     e3e:	87 fd       	sbrc	r24, 7
     e40:	5e cf       	rjmp	.-324    	; 0xcfe <get_averaged_accel+0x68>
		//delay samples over time to reduce noise
		if (us_delay !=0) _delay_us(us_delay);
	}

	return (averaged_accel);
}
     e42:	b3 01       	movw	r22, r6
     e44:	c4 01       	movw	r24, r8
     e46:	2a 96       	adiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	9f 90       	pop	r9
     e68:	8f 90       	pop	r8
     e6a:	7f 90       	pop	r7
     e6c:	6f 90       	pop	r6
     e6e:	5f 90       	pop	r5
     e70:	4f 90       	pop	r4
     e72:	3f 90       	pop	r3
     e74:	2f 90       	pop	r2
     e76:	08 95       	ret

00000e78 <get_config_constants>:


}

void get_config_constants(void)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29

	// sample and set the accelerometer base value (average a bunch of samples)
	base_accel = get_averaged_accel(20, 10000);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 ea       	ldi	r24, 0xA0	; 160
     e82:	91 e4       	ldi	r25, 0x41	; 65
     e84:	40 e1       	ldi	r20, 0x10	; 16
     e86:	57 e2       	ldi	r21, 0x27	; 39
     e88:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_averaged_accel>
     e8c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
     e90:	70 93 3f 01 	sts	0x013F, r23
     e94:	60 93 3e 01 	sts	0x013E, r22
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ea4:	c4 ef       	ldi	r28, 0xF4	; 244
     ea6:	d1 e0       	ldi	r29, 0x01	; 1
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <get_config_constants+0x5c>
	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
	{
		heading_center = heading_center + leftright;               		
     eaa:	80 91 9e 01 	lds	r24, 0x019E
     eae:	90 91 9f 01 	lds	r25, 0x019F
     eb2:	a0 91 a0 01 	lds	r26, 0x01A0
     eb6:	b0 91 a1 01 	lds	r27, 0x01A1
     eba:	68 0f       	add	r22, r24
     ebc:	79 1f       	adc	r23, r25
     ebe:	88 ec       	ldi	r24, 0xC8	; 200
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	fe 01       	movw	r30, r28
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <get_config_constants+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	d9 f7       	brne	.-10     	; 0xec2 <get_config_constants+0x4a>
     ecc:	2f 5f       	subi	r18, 0xFF	; 255
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	4f 4f       	sbci	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255


	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
     ed4:	24 31       	cpi	r18, 0x14	; 20
     ed6:	31 05       	cpc	r19, r1
     ed8:	41 05       	cpc	r20, r1
     eda:	51 05       	cpc	r21, r1
     edc:	34 f3       	brlt	.-52     	; 0xeaa <get_config_constants+0x32>
     ede:	20 93 74 01 	sts	0x0174, r18
     ee2:	30 93 75 01 	sts	0x0175, r19
     ee6:	40 93 76 01 	sts	0x0176, r20
     eea:	50 93 77 01 	sts	0x0177, r21
	{
		heading_center = heading_center + leftright;               		
		_delay_ms(20);

	}
	heading_center = heading_center / 20;
     eee:	cb 01       	movw	r24, r22
     ef0:	64 e1       	ldi	r22, 0x14	; 20
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 2c 13 	call	0x2658	; 0x2658 <__divmodhi4>
     ef8:	70 93 15 01 	sts	0x0115, r23
     efc:	60 93 14 01 	sts	0x0114, r22


}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <main_calculations>:
}


void main_calculations(void)

{
     f06:	2f 92       	push	r2
     f08:	3f 92       	push	r3
     f0a:	4f 92       	push	r4
     f0c:	5f 92       	push	r5
     f0e:	6f 92       	push	r6
     f10:	7f 92       	push	r7
     f12:	8f 92       	push	r8
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <main_calculations+0x26>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <main_calculations+0x28>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <main_calculations+0x2a>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     f34:	10 92 5a 01 	sts	0x015A, r1
     f38:	10 92 5b 01 	sts	0x015B, r1
     f3c:	10 92 5c 01 	sts	0x015C, r1
     f40:	10 92 5d 01 	sts	0x015D, r1
	leftright_hightime = 0;
     f44:	10 92 62 01 	sts	0x0162, r1
     f48:	10 92 63 01 	sts	0x0163, r1
     f4c:	10 92 64 01 	sts	0x0164, r1
     f50:	10 92 65 01 	sts	0x0165, r1
	forwardback_hightime = 0;
     f54:	10 92 5e 01 	sts	0x015E, r1
     f58:	10 92 5f 01 	sts	0x015F, r1
     f5c:	10 92 60 01 	sts	0x0160, r1
     f60:	10 92 61 01 	sts	0x0161, r1

{

	reset_rc();				//resets existing RC data - must get called before timer1 is reset to prevent errors
	
	TCNT1 = 0;				//resets timer (used to track for time spent outside motor drive loop)
     f64:	10 92 85 00 	sts	0x0085, r1
     f68:	10 92 84 00 	sts	0x0084, r1
							//by resetting timer at beginning over each call to main_calculations - the calc time effectively gets included in the do_spin loop


	//Are we going forward or backwards?
	if ( forwardback > (forwardback_center + forwardback_forwardthresh)) forward = 1; else forward = 0;
     f6c:	20 91 7c 01 	lds	r18, 0x017C
     f70:	30 91 7d 01 	lds	r19, 0x017D
     f74:	40 91 7e 01 	lds	r20, 0x017E
     f78:	50 91 7f 01 	lds	r21, 0x017F
     f7c:	60 91 0e 01 	lds	r22, 0x010E
     f80:	70 91 0f 01 	lds	r23, 0x010F
     f84:	80 91 10 01 	lds	r24, 0x0110
     f88:	90 91 11 01 	lds	r25, 0x0111
     f8c:	86 0f       	add	r24, r22
     f8e:	97 1f       	adc	r25, r23
     f90:	aa 27       	eor	r26, r26
     f92:	97 fd       	sbrc	r25, 7
     f94:	a0 95       	com	r26
     f96:	ba 2f       	mov	r27, r26
     f98:	82 17       	cp	r24, r18
     f9a:	93 07       	cpc	r25, r19
     f9c:	a4 07       	cpc	r26, r20
     f9e:	b5 07       	cpc	r27, r21
     fa0:	3c f4       	brge	.+14     	; 0xfb0 <main_calculations+0xaa>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 ad 01 	sts	0x01AD, r25
     faa:	80 93 ac 01 	sts	0x01AC, r24
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <main_calculations+0xb2>
     fb0:	10 92 ad 01 	sts	0x01AD, r1
     fb4:	10 92 ac 01 	sts	0x01AC, r1
	if ( forwardback < (forwardback_center + forwardback_backthresh)) backward = 1; else backward = 0;
     fb8:	20 91 7c 01 	lds	r18, 0x017C
     fbc:	30 91 7d 01 	lds	r19, 0x017D
     fc0:	40 91 7e 01 	lds	r20, 0x017E
     fc4:	50 91 7f 01 	lds	r21, 0x017F
     fc8:	80 91 12 01 	lds	r24, 0x0112
     fcc:	90 91 13 01 	lds	r25, 0x0113
     fd0:	68 0f       	add	r22, r24
     fd2:	79 1f       	adc	r23, r25
     fd4:	cb 01       	movw	r24, r22
     fd6:	aa 27       	eor	r26, r26
     fd8:	97 fd       	sbrc	r25, 7
     fda:	a0 95       	com	r26
     fdc:	ba 2f       	mov	r27, r26
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	4a 07       	cpc	r20, r26
     fe4:	5b 07       	cpc	r21, r27
     fe6:	3c f4       	brge	.+14     	; 0xff6 <main_calculations+0xf0>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	90 93 bd 01 	sts	0x01BD, r25
     ff0:	80 93 bc 01 	sts	0x01BC, r24
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <main_calculations+0xf8>
     ff6:	10 92 bd 01 	sts	0x01BD, r1
     ffa:	10 92 bc 01 	sts	0x01BC, r1

	flashy_led = 0;											//by default LED isn't flashy
     ffe:	10 92 af 01 	sts	0x01AF, r1
    1002:	10 92 ae 01 	sts	0x01AE, r1
	
	//initial accel_read without moving average
	if (running_average_accel_read == 0) {
    1006:	a0 90 4a 01 	lds	r10, 0x014A
    100a:	b0 90 4b 01 	lds	r11, 0x014B
    100e:	c0 90 4c 01 	lds	r12, 0x014C
    1012:	d0 90 4d 01 	lds	r13, 0x014D
    1016:	c6 01       	movw	r24, r12
    1018:	b5 01       	movw	r22, r10
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    1026:	88 23       	and	r24, r24
    1028:	49 f4       	brne	.+18     	; 0x103c <main_calculations+0x136>
		running_average_accel_read = get_averaged_accel(4, 20);}
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	90 e4       	ldi	r25, 0x40	; 64
    1032:	44 e1       	ldi	r20, 0x14	; 20
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_averaged_accel>
    103a:	22 c0       	rjmp	.+68     	; 0x1080 <main_calculations+0x17a>
	else {
		//use moving average for accel data (causes slight delay in response to RPM change - but makes tracking more stable)
		running_average_accel_read = (running_average_accel_read * 0.6f) + (get_averaged_accel(4, 20) * 0.4f);}
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	90 e4       	ldi	r25, 0x40	; 64
    1044:	44 e1       	ldi	r20, 0x14	; 20
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_averaged_accel>
    104c:	7b 01       	movw	r14, r22
    104e:	8c 01       	movw	r16, r24
    1050:	c6 01       	movw	r24, r12
    1052:	b5 01       	movw	r22, r10
    1054:	2a e9       	ldi	r18, 0x9A	; 154
    1056:	39 e9       	ldi	r19, 0x99	; 153
    1058:	49 e1       	ldi	r20, 0x19	; 25
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1060:	5b 01       	movw	r10, r22
    1062:	6c 01       	movw	r12, r24
    1064:	c8 01       	movw	r24, r16
    1066:	b7 01       	movw	r22, r14
    1068:	2d ec       	ldi	r18, 0xCD	; 205
    106a:	3c ec       	ldi	r19, 0xCC	; 204
    106c:	4c ec       	ldi	r20, 0xCC	; 204
    106e:	5e e3       	ldi	r21, 0x3E	; 62
    1070:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	c6 01       	movw	r24, r12
    107a:	b5 01       	movw	r22, r10
    107c:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
    1080:	60 93 4a 01 	sts	0x014A, r22
    1084:	70 93 4b 01 	sts	0x014B, r23
    1088:	80 93 4c 01 	sts	0x014C, r24
    108c:	90 93 4d 01 	sts	0x014D, r25
	
	
	g = (running_average_accel_read - base_accel) * g_per_adc_increment;     //compensate for base (2.5v) level and convert to g's
    1090:	60 91 3e 01 	lds	r22, 0x013E
    1094:	70 91 3f 01 	lds	r23, 0x013F
    1098:	88 27       	eor	r24, r24
    109a:	77 fd       	sbrc	r23, 7
    109c:	80 95       	com	r24
    109e:	98 2f       	mov	r25, r24
    10a0:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	60 91 4a 01 	lds	r22, 0x014A
    10ac:	70 91 4b 01 	lds	r23, 0x014B
    10b0:	80 91 4c 01 	lds	r24, 0x014C
    10b4:	90 91 4d 01 	lds	r25, 0x014D
    10b8:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    10bc:	20 91 2a 01 	lds	r18, 0x012A
    10c0:	30 91 2b 01 	lds	r19, 0x012B
    10c4:	40 91 2c 01 	lds	r20, 0x012C
    10c8:	50 91 2d 01 	lds	r21, 0x012D
    10cc:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    10d0:	3b 01       	movw	r6, r22
    10d2:	4c 01       	movw	r8, r24
    10d4:	60 93 86 01 	sts	0x0186, r22
    10d8:	70 93 87 01 	sts	0x0187, r23
    10dc:	80 93 88 01 	sts	0x0188, r24
    10e0:	90 93 89 01 	sts	0x0189, r25

	rpm = g * 89445;                                //calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	rpm = rpm / radius;
	rpm = pow(rpm, .5);								
    10e4:	20 e8       	ldi	r18, 0x80	; 128
    10e6:	32 eb       	ldi	r19, 0xB2	; 178
    10e8:	4e ea       	ldi	r20, 0xAE	; 174
    10ea:	57 e4       	ldi	r21, 0x47	; 71
    10ec:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    10f0:	20 91 26 01 	lds	r18, 0x0126
    10f4:	30 91 27 01 	lds	r19, 0x0127
    10f8:	40 91 28 01 	lds	r20, 0x0128
    10fc:	50 91 29 01 	lds	r21, 0x0129
    1100:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    1104:	0e 94 a6 12 	call	0x254c	; 0x254c <sqrt>
    1108:	7b 01       	movw	r14, r22
    110a:	8c 01       	movw	r16, r24
    110c:	17 01       	movw	r2, r14
    110e:	28 01       	movw	r4, r16
    1110:	e0 92 b0 01 	sts	0x01B0, r14
    1114:	f0 92 b1 01 	sts	0x01B1, r15
    1118:	00 93 b2 01 	sts	0x01B2, r16
    111c:	10 93 b3 01 	sts	0x01B3, r17
	
	if (rpm > max_observed_rpm) max_observed_rpm = rpm;		//update max_observed_rpm if current rpm is higher
    1120:	60 91 56 01 	lds	r22, 0x0156
    1124:	70 91 57 01 	lds	r23, 0x0157
    1128:	80 91 58 01 	lds	r24, 0x0158
    112c:	90 91 59 01 	lds	r25, 0x0159
    1130:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	c8 01       	movw	r24, r16
    113a:	b7 01       	movw	r22, r14
    113c:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    1140:	18 16       	cp	r1, r24
    1142:	64 f4       	brge	.+24     	; 0x115c <main_calculations+0x256>
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
    114c:	60 93 56 01 	sts	0x0156, r22
    1150:	70 93 57 01 	sts	0x0157, r23
    1154:	80 93 58 01 	sts	0x0158, r24
    1158:	90 93 59 01 	sts	0x0159, r25
	
	full_spin_time_ms = rpm / 60;                                      //convert RPM to duration of each spin in milliseconds
    115c:	c2 01       	movw	r24, r4
    115e:	b1 01       	movw	r22, r2
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e7       	ldi	r20, 0x70	; 112
    1166:	52 e4       	ldi	r21, 0x42	; 66
    1168:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    116c:	60 93 6c 01 	sts	0x016C, r22
    1170:	70 93 6d 01 	sts	0x016D, r23
    1174:	80 93 6e 01 	sts	0x016E, r24
    1178:	90 93 6f 01 	sts	0x016F, r25
		
	if (full_spin_time_ms == 0) full_spin_time_ms = 1;                          //must prevent any possible division by zero!!!
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    1188:	88 23       	and	r24, r24
    118a:	61 f4       	brne	.+24     	; 0x11a4 <main_calculations+0x29e>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 e8       	ldi	r26, 0x80	; 128
    1192:	bf e3       	ldi	r27, 0x3F	; 63
    1194:	80 93 6c 01 	sts	0x016C, r24
    1198:	90 93 6d 01 	sts	0x016D, r25
    119c:	a0 93 6e 01 	sts	0x016E, r26
    11a0:	b0 93 6f 01 	sts	0x016F, r27
	full_spin_time_ms = 1 / full_spin_time_ms;
	full_spin_time_ms = full_spin_time_ms * 1000;									//seconds to milliseconds

	full_spin_time_ms = full_spin_time_ms * tracking_comp;                      //compensate with user-set tracking adjustment
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	9f e3       	ldi	r25, 0x3F	; 63
    11ac:	20 91 6c 01 	lds	r18, 0x016C
    11b0:	30 91 6d 01 	lds	r19, 0x016D
    11b4:	40 91 6e 01 	lds	r20, 0x016E
    11b8:	50 91 6f 01 	lds	r21, 0x016F
    11bc:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	54 e4       	ldi	r21, 0x44	; 68
    11c8:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    11cc:	20 91 36 01 	lds	r18, 0x0136
    11d0:	30 91 37 01 	lds	r19, 0x0137
    11d4:	40 91 38 01 	lds	r20, 0x0138
    11d8:	50 91 39 01 	lds	r21, 0x0139
    11dc:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	60 93 6c 01 	sts	0x016C, r22
    11e8:	70 93 6d 01 	sts	0x016D, r23
    11ec:	80 93 6e 01 	sts	0x016E, r24
    11f0:	90 93 6f 01 	sts	0x016F, r25

  
	if ( forward == 1 ) full_spin_time_ms = full_spin_time_ms * forward_comp;   //extra compensation if going forward
    11f4:	80 91 ac 01 	lds	r24, 0x01AC
    11f8:	90 91 ad 01 	lds	r25, 0x01AD
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <main_calculations+0x322>
    1200:	ca 01       	movw	r24, r20
    1202:	b9 01       	movw	r22, r18
    1204:	20 91 2e 01 	lds	r18, 0x012E
    1208:	30 91 2f 01 	lds	r19, 0x012F
    120c:	40 91 30 01 	lds	r20, 0x0130
    1210:	50 91 31 01 	lds	r21, 0x0131
    1214:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1218:	60 93 6c 01 	sts	0x016C, r22
    121c:	70 93 6d 01 	sts	0x016D, r23
    1220:	80 93 6e 01 	sts	0x016E, r24
    1224:	90 93 6f 01 	sts	0x016F, r25
	if ( backward == 1 ) full_spin_time_ms = full_spin_time_ms * backward_comp; //extra compensation if going backward
    1228:	80 91 bc 01 	lds	r24, 0x01BC
    122c:	90 91 bd 01 	lds	r25, 0x01BD
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	d1 f4       	brne	.+52     	; 0x1268 <main_calculations+0x362>
    1234:	60 91 6c 01 	lds	r22, 0x016C
    1238:	70 91 6d 01 	lds	r23, 0x016D
    123c:	80 91 6e 01 	lds	r24, 0x016E
    1240:	90 91 6f 01 	lds	r25, 0x016F
    1244:	20 91 32 01 	lds	r18, 0x0132
    1248:	30 91 33 01 	lds	r19, 0x0133
    124c:	40 91 34 01 	lds	r20, 0x0134
    1250:	50 91 35 01 	lds	r21, 0x0135
    1254:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1258:	60 93 6c 01 	sts	0x016C, r22
    125c:	70 93 6d 01 	sts	0x016D, r23
    1260:	80 93 6e 01 	sts	0x016E, r24
    1264:	90 93 6f 01 	sts	0x016F, r25



	//converts throttle reading from remote into percentage
	throttle_percent = ((throttle - throttle_low) * 100) / (throttle_high - throttle_low);
    1268:	60 91 96 01 	lds	r22, 0x0196
    126c:	70 91 97 01 	lds	r23, 0x0197
    1270:	80 91 98 01 	lds	r24, 0x0198
    1274:	90 91 99 01 	lds	r25, 0x0199
    1278:	00 91 0a 01 	lds	r16, 0x010A
    127c:	10 91 0b 01 	lds	r17, 0x010B
    1280:	98 01       	movw	r18, r16
    1282:	44 27       	eor	r20, r20
    1284:	37 fd       	sbrc	r19, 7
    1286:	40 95       	com	r20
    1288:	54 2f       	mov	r21, r20
    128a:	62 1b       	sub	r22, r18
    128c:	73 0b       	sbc	r23, r19
    128e:	84 0b       	sbc	r24, r20
    1290:	95 0b       	sbc	r25, r21
    1292:	24 e6       	ldi	r18, 0x64	; 100
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsi3>
    129e:	20 91 0c 01 	lds	r18, 0x010C
    12a2:	30 91 0d 01 	lds	r19, 0x010D
    12a6:	20 1b       	sub	r18, r16
    12a8:	31 0b       	sbc	r19, r17
    12aa:	44 27       	eor	r20, r20
    12ac:	37 fd       	sbrc	r19, 7
    12ae:	40 95       	com	r20
    12b0:	54 2f       	mov	r21, r20
    12b2:	0e 94 3f 13 	call	0x267e	; 0x267e <__divmodsi4>
    12b6:	ca 01       	movw	r24, r20
    12b8:	b9 01       	movw	r22, r18
    12ba:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    12be:	60 93 b8 01 	sts	0x01B8, r22
    12c2:	70 93 b9 01 	sts	0x01B9, r23
    12c6:	80 93 ba 01 	sts	0x01BA, r24
    12ca:	90 93 bb 01 	sts	0x01BB, r25
	if ( throttle_percent < 12 ) throttle_percent = 12;    //don't got under X%	 (throttle percent is only set if we exit safety - so lack of "0" throttle isn't a problem)
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e4       	ldi	r20, 0x40	; 64
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    12da:	88 23       	and	r24, r24
    12dc:	64 f4       	brge	.+24     	; 0x12f6 <main_calculations+0x3f0>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e4       	ldi	r26, 0x40	; 64
    12e4:	b1 e4       	ldi	r27, 0x41	; 65
    12e6:	80 93 b8 01 	sts	0x01B8, r24
    12ea:	90 93 b9 01 	sts	0x01B9, r25
    12ee:	a0 93 ba 01 	sts	0x01BA, r26
    12f2:	b0 93 bb 01 	sts	0x01BB, r27
	if ( throttle_percent > 100 ) throttle_percent = 100;    //don't got over 100%
    12f6:	60 91 b8 01 	lds	r22, 0x01B8
    12fa:	70 91 b9 01 	lds	r23, 0x01B9
    12fe:	80 91 ba 01 	lds	r24, 0x01BA
    1302:	90 91 bb 01 	lds	r25, 0x01BB
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	48 ec       	ldi	r20, 0xC8	; 200
    130c:	52 e4       	ldi	r21, 0x42	; 66
    130e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    1312:	18 16       	cp	r1, r24
    1314:	64 f4       	brge	.+24     	; 0x132e <main_calculations+0x428>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a8 ec       	ldi	r26, 0xC8	; 200
    131c:	b2 e4       	ldi	r27, 0x42	; 66
    131e:	80 93 b8 01 	sts	0x01B8, r24
    1322:	90 93 b9 01 	sts	0x01B9, r25
    1326:	a0 93 ba 01 	sts	0x01BA, r26
    132a:	b0 93 bb 01 	sts	0x01BB, r27
	

	config_mode_throttle_percent = throttle_percent;				//second copy of variable used in config mode (since we're otherwise locking it at 50%)
    132e:	20 91 b8 01 	lds	r18, 0x01B8
    1332:	30 91 b9 01 	lds	r19, 0x01B9
    1336:	40 91 ba 01 	lds	r20, 0x01BA
    133a:	50 91 bb 01 	lds	r21, 0x01BB
    133e:	20 93 be 01 	sts	0x01BE, r18
    1342:	30 93 bf 01 	sts	0x01BF, r19
    1346:	40 93 c0 01 	sts	0x01C0, r20
    134a:	50 93 c1 01 	sts	0x01C1, r21
	if (in_config_mode == 1) throttle_percent = 50;			//throttle is locked at 50 percent in config mode
    134e:	80 91 cc 01 	lds	r24, 0x01CC
    1352:	90 91 cd 01 	lds	r25, 0x01CD
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	69 f4       	brne	.+26     	; 0x1378 <main_calculations+0x472>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a8 e4       	ldi	r26, 0x48	; 72
    1364:	b2 e4       	ldi	r27, 0x42	; 66
    1366:	80 93 b8 01 	sts	0x01B8, r24
    136a:	90 93 b9 01 	sts	0x01B9, r25
    136e:	a0 93 ba 01 	sts	0x01BA, r26
    1372:	b0 93 bb 01 	sts	0x01BB, r27
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <main_calculations+0x47a>


	//calculates + modifies changes to heading based on input from transmitter - not done if in config mode (and not in the 90+% normal drive mode)
	
	if (in_config_mode == 0 || config_mode_throttle_percent > 90)
    1378:	ad 81       	ldd	r26, Y+5	; 0x05
    137a:	be 81       	ldd	r27, Y+6	; 0x06
    137c:	ab 2b       	or	r26, r27
    137e:	59 f0       	breq	.+22     	; 0x1396 <main_calculations+0x490>
    1380:	ca 01       	movw	r24, r20
    1382:	b9 01       	movw	r22, r18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	44 eb       	ldi	r20, 0xB4	; 180
    138a:	52 e4       	ldi	r21, 0x42	; 66
    138c:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    1390:	18 16       	cp	r1, r24
    1392:	0c f0       	brlt	.+2      	; 0x1396 <main_calculations+0x490>
    1394:	44 c0       	rjmp	.+136    	; 0x141e <main_calculations+0x518>
	{
		steering_multiplier = heading_center - leftright;
    1396:	20 91 9e 01 	lds	r18, 0x019E
    139a:	30 91 9f 01 	lds	r19, 0x019F
    139e:	40 91 a0 01 	lds	r20, 0x01A0
    13a2:	50 91 a1 01 	lds	r21, 0x01A1
		steering_multiplier = steering_multiplier * turn_speed;
    13a6:	60 91 14 01 	lds	r22, 0x0114
    13aa:	70 91 15 01 	lds	r23, 0x0115
    13ae:	88 27       	eor	r24, r24
    13b0:	77 fd       	sbrc	r23, 7
    13b2:	80 95       	com	r24
    13b4:	98 2f       	mov	r25, r24
    13b6:	62 1b       	sub	r22, r18
    13b8:	73 0b       	sbc	r23, r19
    13ba:	84 0b       	sbc	r24, r20
    13bc:	95 0b       	sbc	r25, r21
    13be:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    13c2:	20 91 40 01 	lds	r18, 0x0140
    13c6:	30 91 41 01 	lds	r19, 0x0141
    13ca:	40 91 42 01 	lds	r20, 0x0142
    13ce:	50 91 43 01 	lds	r21, 0x0143
    13d2:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
		steering_multiplier = 1 - steering_multiplier;		//starts with 1 as a base value (ie - if it was 0.0 it becomes 1.0 - so there's no change in heading)
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	9f e3       	ldi	r25, 0x3F	; 63
    13e2:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	60 93 66 01 	sts	0x0166, r22
    13ee:	70 93 67 01 	sts	0x0167, r23
    13f2:	80 93 68 01 	sts	0x0168, r24
    13f6:	90 93 69 01 	sts	0x0169, r25
		full_spin_time_ms = full_spin_time_ms * steering_multiplier;
    13fa:	60 91 6c 01 	lds	r22, 0x016C
    13fe:	70 91 6d 01 	lds	r23, 0x016D
    1402:	80 91 6e 01 	lds	r24, 0x016E
    1406:	90 91 6f 01 	lds	r25, 0x016F
    140a:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    140e:	60 93 6c 01 	sts	0x016C, r22
    1412:	70 93 6d 01 	sts	0x016D, r23
    1416:	80 93 6e 01 	sts	0x016E, r24
    141a:	90 93 6f 01 	sts	0x016F, r25
	}
	

	half_spin_time = full_spin_time_ms / 2;                          //sets period in MS for each half of spin
    141e:	a0 90 6c 01 	lds	r10, 0x016C
    1422:	b0 90 6d 01 	lds	r11, 0x016D
    1426:	c0 90 6e 01 	lds	r12, 0x016E
    142a:	d0 90 6f 01 	lds	r13, 0x016F
    142e:	c6 01       	movw	r24, r12
    1430:	b5 01       	movw	r22, r10
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    143e:	60 93 9a 01 	sts	0x019A, r22
    1442:	70 93 9b 01 	sts	0x019B, r23
    1446:	80 93 9c 01 	sts	0x019C, r24
    144a:	90 93 9d 01 	sts	0x019D, r25

	//caps on timing if going too slow or fast
	if ( half_spin_time > 200) half_spin_time = 200;			//slowest allowed - 200ms per half-cycle = 150rpm
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	48 e4       	ldi	r20, 0x48	; 72
    1454:	53 e4       	ldi	r21, 0x43	; 67
    1456:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    145a:	18 16       	cp	r1, r24
    145c:	64 f4       	brge	.+24     	; 0x1476 <main_calculations+0x570>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a8 e4       	ldi	r26, 0x48	; 72
    1464:	b3 e4       	ldi	r27, 0x43	; 67
    1466:	80 93 9a 01 	sts	0x019A, r24
    146a:	90 93 9b 01 	sts	0x019B, r25
    146e:	a0 93 9c 01 	sts	0x019C, r26
    1472:	b0 93 9d 01 	sts	0x019D, r27
	if ( half_spin_time < 5) half_spin_time = 5;				//fastest - 5ms per half-cycle = 6000rpm
    1476:	60 91 9a 01 	lds	r22, 0x019A
    147a:	70 91 9b 01 	lds	r23, 0x019B
    147e:	80 91 9c 01 	lds	r24, 0x019C
    1482:	90 91 9d 01 	lds	r25, 0x019D
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 ea       	ldi	r20, 0xA0	; 160
    148c:	50 e4       	ldi	r21, 0x40	; 64
    148e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    1492:	88 23       	and	r24, r24
    1494:	64 f4       	brge	.+24     	; 0x14ae <main_calculations+0x5a8>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 ea       	ldi	r26, 0xA0	; 160
    149c:	b0 e4       	ldi	r27, 0x40	; 64
    149e:	80 93 9a 01 	sts	0x019A, r24
    14a2:	90 93 9b 01 	sts	0x019B, r25
    14a6:	a0 93 9c 01 	sts	0x019C, r26
    14aa:	b0 93 9d 01 	sts	0x019D, r27


	//set heading beacon size and location

	led_on = full_spin_time_ms * led_adjust;
	led_on = led_on / 100;
    14ae:	c6 01       	movw	r24, r12
    14b0:	b5 01       	movw	r22, r10
    14b2:	20 91 3a 01 	lds	r18, 0x013A
    14b6:	30 91 3b 01 	lds	r19, 0x013B
    14ba:	40 91 3c 01 	lds	r20, 0x013C
    14be:	50 91 3d 01 	lds	r21, 0x013D
    14c2:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	48 ec       	ldi	r20, 0xC8	; 200
    14cc:	52 e4       	ldi	r21, 0x42	; 66
    14ce:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    14d2:	7b 01       	movw	r14, r22
    14d4:	8c 01       	movw	r16, r24
    14d6:	60 93 a6 01 	sts	0x01A6, r22
    14da:	70 93 a7 01 	sts	0x01A7, r23
    14de:	80 93 a8 01 	sts	0x01A8, r24
    14e2:	90 93 a9 01 	sts	0x01A9, r25
	led_off = full_spin_time_ms / 3;                                  //led signal is 33% of circle
	led_off = led_off + led_on;
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e4       	ldi	r20, 0x40	; 64
    14f0:	50 e4       	ldi	r21, 0x40	; 64
    14f2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    14f6:	a8 01       	movw	r20, r16
    14f8:	97 01       	movw	r18, r14
    14fa:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
    14fe:	7b 01       	movw	r14, r22
    1500:	8c 01       	movw	r16, r24
    1502:	60 93 c4 01 	sts	0x01C4, r22
    1506:	70 93 c5 01 	sts	0x01C5, r23
    150a:	80 93 c6 01 	sts	0x01C6, r24
    150e:	90 93 c7 01 	sts	0x01C7, r25


	if (led_off >= full_spin_time_ms ) //if led_off is "later" or at end of cycle - shift led_off behind by one cycle
    1512:	a6 01       	movw	r20, r12
    1514:	95 01       	movw	r18, r10
    1516:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    151a:	88 23       	and	r24, r24
    151c:	74 f0       	brlt	.+28     	; 0x153a <main_calculations+0x634>
	{                        
		led_off = led_off - full_spin_time_ms;
    151e:	c8 01       	movw	r24, r16
    1520:	b7 01       	movw	r22, r14
    1522:	a6 01       	movw	r20, r12
    1524:	95 01       	movw	r18, r10
    1526:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    152a:	60 93 c4 01 	sts	0x01C4, r22
    152e:	70 93 c5 01 	sts	0x01C5, r23
    1532:	80 93 c6 01 	sts	0x01C6, r24
    1536:	90 93 c7 01 	sts	0x01C7, r25
	}

	if ( led_off < 1 ) led_off = led_off + full_spin_time_ms;
    153a:	e0 90 c4 01 	lds	r14, 0x01C4
    153e:	f0 90 c5 01 	lds	r15, 0x01C5
    1542:	00 91 c6 01 	lds	r16, 0x01C6
    1546:	10 91 c7 01 	lds	r17, 0x01C7
    154a:	c8 01       	movw	r24, r16
    154c:	b7 01       	movw	r22, r14
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    155a:	88 23       	and	r24, r24
    155c:	74 f4       	brge	.+28     	; 0x157a <main_calculations+0x674>
    155e:	c8 01       	movw	r24, r16
    1560:	b7 01       	movw	r22, r14
    1562:	a6 01       	movw	r20, r12
    1564:	95 01       	movw	r18, r10
    1566:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
    156a:	60 93 c4 01 	sts	0x01C4, r22
    156e:	70 93 c5 01 	sts	0x01C5, r23
    1572:	80 93 c6 01 	sts	0x01C6, r24
    1576:	90 93 c7 01 	sts	0x01C7, r25

	//throttling

	full_power_spin = 0;
    157a:	10 92 c9 01 	sts	0x01C9, r1
    157e:	10 92 c8 01 	sts	0x01C8, r1
	if ( rpm < min_rpm ) full_power_spin = 1;                //if we're under the minimum RPM for translation - do the full power spin!
    1582:	c2 01       	movw	r24, r4
    1584:	b1 01       	movw	r22, r2
    1586:	20 91 1a 01 	lds	r18, 0x011A
    158a:	30 91 1b 01 	lds	r19, 0x011B
    158e:	40 91 1c 01 	lds	r20, 0x011C
    1592:	50 91 1d 01 	lds	r21, 0x011D
    1596:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    159a:	88 23       	and	r24, r24
    159c:	34 f4       	brge	.+12     	; 0x15aa <main_calculations+0x6a4>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 c9 01 	sts	0x01C9, r25
    15a6:	80 93 c8 01 	sts	0x01C8, r24
	if ( g > max_g || rpm > max_allowed_rpm ) throttle_percent = 10;  				     //if we're over max alowed G's or RPM - reduce throttle
    15aa:	c4 01       	movw	r24, r8
    15ac:	b3 01       	movw	r22, r6
    15ae:	20 91 22 01 	lds	r18, 0x0122
    15b2:	30 91 23 01 	lds	r19, 0x0123
    15b6:	40 91 24 01 	lds	r20, 0x0124
    15ba:	50 91 25 01 	lds	r21, 0x0125
    15be:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	74 f0       	brlt	.+28     	; 0x15e2 <main_calculations+0x6dc>
    15c6:	c2 01       	movw	r24, r4
    15c8:	b1 01       	movw	r22, r2
    15ca:	20 91 1e 01 	lds	r18, 0x011E
    15ce:	30 91 1f 01 	lds	r19, 0x011F
    15d2:	40 91 20 01 	lds	r20, 0x0120
    15d6:	50 91 21 01 	lds	r21, 0x0121
    15da:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    15de:	18 16       	cp	r1, r24
    15e0:	64 f4       	brge	.+24     	; 0x15fa <main_calculations+0x6f4>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a0 e2       	ldi	r26, 0x20	; 32
    15e8:	b1 e4       	ldi	r27, 0x41	; 65
    15ea:	80 93 b8 01 	sts	0x01B8, r24
    15ee:	90 93 b9 01 	sts	0x01B9, r25
    15f2:	a0 93 ba 01 	sts	0x01BA, r26
    15f6:	b0 93 bb 01 	sts	0x01BB, r27
	
	
	//if throttle is at or over 50% throttle - adjust time spent in braking
	if ( throttle_percent > 50 )
    15fa:	80 91 b8 01 	lds	r24, 0x01B8
    15fe:	90 91 b9 01 	lds	r25, 0x01B9
    1602:	a0 91 ba 01 	lds	r26, 0x01BA
    1606:	b0 91 bb 01 	lds	r27, 0x01BB
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	ab 83       	std	Y+3, r26	; 0x03
    1610:	bc 83       	std	Y+4, r27	; 0x04
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	48 e4       	ldi	r20, 0x48	; 72
    161c:	52 e4       	ldi	r21, 0x42	; 66
    161e:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    1622:	18 16       	cp	r1, r24
    1624:	0c f0       	brlt	.+2      	; 0x1628 <main_calculations+0x722>
    1626:	76 c0       	rjmp	.+236    	; 0x1714 <main_calculations+0x80e>
	{                          

		flashy_led = 1;                                        //flash the LED to indicate we're in fast mode
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	90 93 af 01 	sts	0x01AF, r25
    1630:	80 93 ae 01 	sts	0x01AE, r24

		braking_length = half_spin_time * 25;                  
    1634:	20 90 9a 01 	lds	r2, 0x019A
    1638:	30 90 9b 01 	lds	r3, 0x019B
    163c:	40 90 9c 01 	lds	r4, 0x019C
    1640:	50 90 9d 01 	lds	r5, 0x019D
    1644:	c2 01       	movw	r24, r4
    1646:	b1 01       	movw	r22, r2
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	48 ec       	ldi	r20, 0xC8	; 200
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
		braking_length = braking_length / throttle_percent;    
    1654:	29 81       	ldd	r18, Y+1	; 0x01
    1656:	3a 81       	ldd	r19, Y+2	; 0x02
    1658:	4b 81       	ldd	r20, Y+3	; 0x03
    165a:	5c 81       	ldd	r21, Y+4	; 0x04
    165c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    1660:	7b 01       	movw	r14, r22
    1662:	8c 01       	movw	r16, r24
    1664:	60 93 70 01 	sts	0x0170, r22
    1668:	70 93 71 01 	sts	0x0171, r23
    166c:	80 93 72 01 	sts	0x0172, r24
    1670:	90 93 73 01 	sts	0x0173, r25

		begin_brake = half_spin_time / 2;
    1674:	c2 01       	movw	r24, r4
    1676:	b1 01       	movw	r22, r2
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1684:	5b 01       	movw	r10, r22
    1686:	6c 01       	movw	r12, r24
		begin_brake = begin_brake - braking_length;
    1688:	a8 01       	movw	r20, r16
    168a:	97 01       	movw	r18, r14
    168c:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    1690:	3b 01       	movw	r6, r22
    1692:	4c 01       	movw	r8, r24
    1694:	60 93 ce 01 	sts	0x01CE, r22
    1698:	70 93 cf 01 	sts	0x01CF, r23
    169c:	80 93 d0 01 	sts	0x01D0, r24
    16a0:	90 93 d1 01 	sts	0x01D1, r25

		end_brake = half_spin_time / 2;
		end_brake = end_brake + braking_length;
    16a4:	c6 01       	movw	r24, r12
    16a6:	b5 01       	movw	r22, r10
    16a8:	a8 01       	movw	r20, r16
    16aa:	97 01       	movw	r18, r14
    16ac:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
    16b0:	60 93 a2 01 	sts	0x01A2, r22
    16b4:	70 93 a3 01 	sts	0x01A3, r23
    16b8:	80 93 a4 01 	sts	0x01A4, r24
    16bc:	90 93 a5 01 	sts	0x01A5, r25
	
		if ( begin_brake < 1 )	begin_brake = 1;               //make sure begin_brake isn't getting set to 0
    16c0:	c4 01       	movw	r24, r8
    16c2:	b3 01       	movw	r22, r6
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	64 f4       	brge	.+24     	; 0x16ec <main_calculations+0x7e6>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e8       	ldi	r26, 0x80	; 128
    16da:	bf e3       	ldi	r27, 0x3F	; 63
    16dc:	80 93 ce 01 	sts	0x01CE, r24
    16e0:	90 93 cf 01 	sts	0x01CF, r25
    16e4:	a0 93 d0 01 	sts	0x01D0, r26
    16e8:	b0 93 d1 01 	sts	0x01D1, r27
			
		power_kill_part1 = 0;                                  //power_kill not used if throttle over 50%
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	80 93 92 01 	sts	0x0192, r24
    16f8:	90 93 93 01 	sts	0x0193, r25
    16fc:	a0 93 94 01 	sts	0x0194, r26
    1700:	b0 93 95 01 	sts	0x0195, r27
		power_kill_part2 = half_spin_time;
    1704:	20 92 8a 01 	sts	0x018A, r2
    1708:	30 92 8b 01 	sts	0x018B, r3
    170c:	40 92 8c 01 	sts	0x018C, r4
    1710:	50 92 8d 01 	sts	0x018D, r5

	}


	if ( throttle_percent <= 50 )                           //if throttle under 50% - kill the motors for a portion of each spin
    1714:	69 81       	ldd	r22, Y+1	; 0x01
    1716:	7a 81       	ldd	r23, Y+2	; 0x02
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	48 e4       	ldi	r20, 0x48	; 72
    1722:	52 e4       	ldi	r21, 0x42	; 66
    1724:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__cmpsf2>
    1728:	18 16       	cp	r1, r24
    172a:	0c f4       	brge	.+2      	; 0x172e <main_calculations+0x828>
    172c:	4e c0       	rjmp	.+156    	; 0x17ca <main_calculations+0x8c4>
	{
		begin_brake = 1;
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e8       	ldi	r26, 0x80	; 128
    1734:	bf e3       	ldi	r27, 0x3F	; 63
    1736:	80 93 ce 01 	sts	0x01CE, r24
    173a:	90 93 cf 01 	sts	0x01CF, r25
    173e:	a0 93 d0 01 	sts	0x01D0, r26
    1742:	b0 93 d1 01 	sts	0x01D1, r27
		end_brake = half_spin_time;
    1746:	e0 90 9a 01 	lds	r14, 0x019A
    174a:	f0 90 9b 01 	lds	r15, 0x019B
    174e:	00 91 9c 01 	lds	r16, 0x019C
    1752:	10 91 9d 01 	lds	r17, 0x019D
    1756:	e0 92 a2 01 	sts	0x01A2, r14
    175a:	f0 92 a3 01 	sts	0x01A3, r15
    175e:	00 93 a4 01 	sts	0x01A4, r16
    1762:	10 93 a5 01 	sts	0x01A5, r17

		power_kill_length = 50 - throttle_percent;           //set time in each cycle to cut power (throttling)
		power_kill_length = power_kill_length * half_spin_time;
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	88 e4       	ldi	r24, 0x48	; 72
    176c:	92 e4       	ldi	r25, 0x42	; 66
    176e:	29 81       	ldd	r18, Y+1	; 0x01
    1770:	3a 81       	ldd	r19, Y+2	; 0x02
    1772:	4b 81       	ldd	r20, Y+3	; 0x03
    1774:	5c 81       	ldd	r21, Y+4	; 0x04
    1776:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    177a:	a8 01       	movw	r20, r16
    177c:	97 01       	movw	r18, r14
    177e:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
		power_kill_length = power_kill_length / 150;
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	46 e1       	ldi	r20, 0x16	; 22
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    178e:	9b 01       	movw	r18, r22
    1790:	ac 01       	movw	r20, r24
    1792:	60 93 b4 01 	sts	0x01B4, r22
    1796:	70 93 b5 01 	sts	0x01B5, r23
    179a:	80 93 b6 01 	sts	0x01B6, r24
    179e:	90 93 b7 01 	sts	0x01B7, r25

		power_kill_part1 = power_kill_length;
    17a2:	60 93 92 01 	sts	0x0192, r22
    17a6:	70 93 93 01 	sts	0x0193, r23
    17aa:	80 93 94 01 	sts	0x0194, r24
    17ae:	90 93 95 01 	sts	0x0195, r25
		power_kill_part2 = half_spin_time - power_kill_length;
    17b2:	c8 01       	movw	r24, r16
    17b4:	b7 01       	movw	r22, r14
    17b6:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    17ba:	60 93 8a 01 	sts	0x018A, r22
    17be:	70 93 8b 01 	sts	0x018B, r23
    17c2:	80 93 8c 01 	sts	0x018C, r24
    17c6:	90 93 8d 01 	sts	0x018D, r25

	}

	if ( full_power_spin == 1 )      //if we're actually doing full power this spin (no translation) - ignore any calculations / reset variables
    17ca:	80 91 c8 01 	lds	r24, 0x01C8
    17ce:	90 91 c9 01 	lds	r25, 0x01C9
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	81 f5       	brne	.+96     	; 0x1836 <main_calculations+0x930>
	{
		end_brake = 1;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e8       	ldi	r26, 0x80	; 128
    17dc:	bf e3       	ldi	r27, 0x3F	; 63
    17de:	80 93 a2 01 	sts	0x01A2, r24
    17e2:	90 93 a3 01 	sts	0x01A3, r25
    17e6:	a0 93 a4 01 	sts	0x01A4, r26
    17ea:	b0 93 a5 01 	sts	0x01A5, r27
		begin_brake = 0;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	80 93 ce 01 	sts	0x01CE, r24
    17fa:	90 93 cf 01 	sts	0x01CF, r25
    17fe:	a0 93 d0 01 	sts	0x01D0, r26
    1802:	b0 93 d1 01 	sts	0x01D1, r27

		power_kill_part1 = 0;
    1806:	80 93 92 01 	sts	0x0192, r24
    180a:	90 93 93 01 	sts	0x0193, r25
    180e:	a0 93 94 01 	sts	0x0194, r26
    1812:	b0 93 95 01 	sts	0x0195, r27
		power_kill_part2 = half_spin_time;
    1816:	80 91 9a 01 	lds	r24, 0x019A
    181a:	90 91 9b 01 	lds	r25, 0x019B
    181e:	a0 91 9c 01 	lds	r26, 0x019C
    1822:	b0 91 9d 01 	lds	r27, 0x019D
    1826:	80 93 8a 01 	sts	0x018A, r24
    182a:	90 93 8b 01 	sts	0x018B, r25
    182e:	a0 93 8c 01 	sts	0x018C, r26
    1832:	b0 93 8d 01 	sts	0x018D, r27
	}
	
	if (in_config_mode == 1) config_mode();	//do config_mode stuff if we're in configuration mode
    1836:	ad 81       	ldd	r26, Y+5	; 0x05
    1838:	be 81       	ldd	r27, Y+6	; 0x06
    183a:	11 97       	sbiw	r26, 0x01	; 1
    183c:	11 f4       	brne	.+4      	; 0x1842 <main_calculations+0x93c>
    183e:	0e 94 53 00 	call	0xa6	; 0xa6 <config_mode>
		
	//adjustments - convert times from milliseconds to timer ticks
	led_on = led_on * timer_ticks_per_ms;
    1842:	e0 90 00 01 	lds	r14, 0x0100
    1846:	f0 90 01 01 	lds	r15, 0x0101
    184a:	00 91 02 01 	lds	r16, 0x0102
    184e:	10 91 03 01 	lds	r17, 0x0103
    1852:	60 91 a6 01 	lds	r22, 0x01A6
    1856:	70 91 a7 01 	lds	r23, 0x01A7
    185a:	80 91 a8 01 	lds	r24, 0x01A8
    185e:	90 91 a9 01 	lds	r25, 0x01A9
    1862:	a8 01       	movw	r20, r16
    1864:	97 01       	movw	r18, r14
    1866:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    186a:	60 93 a6 01 	sts	0x01A6, r22
    186e:	70 93 a7 01 	sts	0x01A7, r23
    1872:	80 93 a8 01 	sts	0x01A8, r24
    1876:	90 93 a9 01 	sts	0x01A9, r25
	led_off = led_off * timer_ticks_per_ms;
    187a:	60 91 c4 01 	lds	r22, 0x01C4
    187e:	70 91 c5 01 	lds	r23, 0x01C5
    1882:	80 91 c6 01 	lds	r24, 0x01C6
    1886:	90 91 c7 01 	lds	r25, 0x01C7
    188a:	a8 01       	movw	r20, r16
    188c:	97 01       	movw	r18, r14
    188e:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1892:	60 93 c4 01 	sts	0x01C4, r22
    1896:	70 93 c5 01 	sts	0x01C5, r23
    189a:	80 93 c6 01 	sts	0x01C6, r24
    189e:	90 93 c7 01 	sts	0x01C7, r25
	half_spin_time = half_spin_time * timer_ticks_per_ms;
    18a2:	60 91 9a 01 	lds	r22, 0x019A
    18a6:	70 91 9b 01 	lds	r23, 0x019B
    18aa:	80 91 9c 01 	lds	r24, 0x019C
    18ae:	90 91 9d 01 	lds	r25, 0x019D
    18b2:	a8 01       	movw	r20, r16
    18b4:	97 01       	movw	r18, r14
    18b6:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    18ba:	60 93 9a 01 	sts	0x019A, r22
    18be:	70 93 9b 01 	sts	0x019B, r23
    18c2:	80 93 9c 01 	sts	0x019C, r24
    18c6:	90 93 9d 01 	sts	0x019D, r25
	power_kill_part1 = power_kill_part1 * timer_ticks_per_ms;
    18ca:	60 91 92 01 	lds	r22, 0x0192
    18ce:	70 91 93 01 	lds	r23, 0x0193
    18d2:	80 91 94 01 	lds	r24, 0x0194
    18d6:	90 91 95 01 	lds	r25, 0x0195
    18da:	a8 01       	movw	r20, r16
    18dc:	97 01       	movw	r18, r14
    18de:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    18e2:	60 93 92 01 	sts	0x0192, r22
    18e6:	70 93 93 01 	sts	0x0193, r23
    18ea:	80 93 94 01 	sts	0x0194, r24
    18ee:	90 93 95 01 	sts	0x0195, r25
	power_kill_part2 = power_kill_part2 * timer_ticks_per_ms;
    18f2:	60 91 8a 01 	lds	r22, 0x018A
    18f6:	70 91 8b 01 	lds	r23, 0x018B
    18fa:	80 91 8c 01 	lds	r24, 0x018C
    18fe:	90 91 8d 01 	lds	r25, 0x018D
    1902:	a8 01       	movw	r20, r16
    1904:	97 01       	movw	r18, r14
    1906:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    190a:	60 93 8a 01 	sts	0x018A, r22
    190e:	70 93 8b 01 	sts	0x018B, r23
    1912:	80 93 8c 01 	sts	0x018C, r24
    1916:	90 93 8d 01 	sts	0x018D, r25
	begin_brake = begin_brake * timer_ticks_per_ms;
    191a:	60 91 ce 01 	lds	r22, 0x01CE
    191e:	70 91 cf 01 	lds	r23, 0x01CF
    1922:	80 91 d0 01 	lds	r24, 0x01D0
    1926:	90 91 d1 01 	lds	r25, 0x01D1
    192a:	a8 01       	movw	r20, r16
    192c:	97 01       	movw	r18, r14
    192e:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1932:	60 93 ce 01 	sts	0x01CE, r22
    1936:	70 93 cf 01 	sts	0x01CF, r23
    193a:	80 93 d0 01 	sts	0x01D0, r24
    193e:	90 93 d1 01 	sts	0x01D1, r25
	end_brake = end_brake * timer_ticks_per_ms;
    1942:	60 91 a2 01 	lds	r22, 0x01A2
    1946:	70 91 a3 01 	lds	r23, 0x01A3
    194a:	80 91 a4 01 	lds	r24, 0x01A4
    194e:	90 91 a5 01 	lds	r25, 0x01A5
    1952:	a8 01       	movw	r20, r16
    1954:	97 01       	movw	r18, r14
    1956:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    195a:	60 93 a2 01 	sts	0x01A2, r22
    195e:	70 93 a3 01 	sts	0x01A3, r23
    1962:	80 93 a4 01 	sts	0x01A4, r24
    1966:	90 93 a5 01 	sts	0x01A5, r25
	

}
    196a:	26 96       	adiw	r28, 0x06	; 6
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	7f 90       	pop	r7
    1990:	6f 90       	pop	r6
    1992:	5f 90       	pop	r5
    1994:	4f 90       	pop	r4
    1996:	3f 90       	pop	r3
    1998:	2f 90       	pop	r2
    199a:	08 95       	ret

0000199c <save_config>:
	}

}

void save_config(void)
{
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
	long tracking_word1;	//first word of tracking_comp
	float tracking_word2;	//second word of tracking_comp
	
	//this code busts up tracking_comp (float) into two words for storage to ROM (there are probably cleaner ways to do this)
	
	tracking_word1 = tracking_comp * 1000;							//mulitply tracking_comp by 1000 to get 1st word
    19ac:	60 91 36 01 	lds	r22, 0x0136
    19b0:	70 91 37 01 	lds	r23, 0x0137
    19b4:	80 91 38 01 	lds	r24, 0x0138
    19b8:	90 91 39 01 	lds	r25, 0x0139
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a e7       	ldi	r20, 0x7A	; 122
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    19c8:	7b 01       	movw	r14, r22
    19ca:	8c 01       	movw	r16, r24
    19cc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fixsfsi>
    19d0:	5b 01       	movw	r10, r22
    19d2:	6c 01       	movw	r12, r24
	tracking_word2 = ((tracking_comp * 1000) - tracking_word1);	//amount that didn't make it into word1 goes into word2
    19d4:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	c8 01       	movw	r24, r16
    19de:	b7 01       	movw	r22, r14
    19e0:	0e 94 87 10 	call	0x210e	; 0x210e <__subsf3>
    19e4:	7b 01       	movw	r14, r22
    19e6:	8c 01       	movw	r16, r24
	tracking_word2 = tracking_word2 * 10000;						//multiply that by 10,000
		
	//EPROM variables - for saved configuration data
	eeprom_write_word(&saved_data_valid, 128);	//used as an indicator that saved data is good
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	60 e8       	ldi	r22, 0x80	; 128
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>
	eeprom_write_word(&led_adjust_save, led_adjust);	//saves out led offset
    19f4:	60 91 3a 01 	lds	r22, 0x013A
    19f8:	70 91 3b 01 	lds	r23, 0x013B
    19fc:	80 91 3c 01 	lds	r24, 0x013C
    1a00:	90 91 3d 01 	lds	r25, 0x013D
    1a04:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fixunssfsi>
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	b9 01       	movw	r22, r18
    1a12:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word1, tracking_word1);	//saves out tracking calibration word1 (converted to integer)
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	b5 01       	movw	r22, r10
    1a1c:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word2, tracking_word2);	//saves out tracking calibration word2 (converted to integer)
    1a20:	c8 01       	movw	r24, r16
    1a22:	b7 01       	movw	r22, r14
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e4       	ldi	r19, 0x40	; 64
    1a28:	4c e1       	ldi	r20, 0x1C	; 28
    1a2a:	56 e4       	ldi	r21, 0x46	; 70
    1a2c:	0e 94 3f 12 	call	0x247e	; 0x247e <__mulsf3>
    1a30:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__fixunssfsi>
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>
	eeprom_write_word(&heading_center_save, heading_center);	//saves out RC center value for left/right 
    1a42:	60 91 14 01 	lds	r22, 0x0114
    1a46:	70 91 15 01 	lds	r23, 0x0115
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>
	eeprom_write_word(&base_accel_save, base_accel);	//saves out accelerometer 0G value
    1a52:	60 91 3e 01 	lds	r22, 0x013E
    1a56:	70 91 3f 01 	lds	r23, 0x013F
    1a5a:	8a e0       	ldi	r24, 0x0A	; 10
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 82 13 	call	0x2704	; 0x2704 <__eewr_word_m168>


}
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	08 95       	ret

00001a74 <safety_and_idle>:
}



void safety_and_idle(void)
{
    1a74:	2f 92       	push	r2
    1a76:	3f 92       	push	r3
    1a78:	4f 92       	push	r4
    1a7a:	5f 92       	push	r5
    1a7c:	6f 92       	push	r6
    1a7e:	7f 92       	push	r7
    1a80:	8f 92       	push	r8
    1a82:	9f 92       	push	r9
    1a84:	af 92       	push	r10
    1a86:	bf 92       	push	r11
    1a88:	cf 92       	push	r12
    1a8a:	df 92       	push	r13
    1a8c:	ef 92       	push	r14
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
	{


		motors_brake();			//motors are off (braked if pwm) while sitting idle
		running_average_accel_read = 0;  //running average for accel reset to 0
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	2f 2e       	mov	r2, r31
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	3f 2e       	mov	r3, r31
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	4f 2e       	mov	r4, r31
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	5f 2e       	mov	r5, r31
    1aaa:	f0 2d       	mov	r31, r0
    1aac:	c4 ef       	ldi	r28, 0xF4	; 244
    1aae:	d1 e0       	ldi	r29, 0x01	; 1
    1ab0:	0f c2       	rjmp	.+1054   	; 0x1ed0 <safety_and_idle+0x45c>

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
	{


		motors_brake();			//motors are off (braked if pwm) while sitting idle
    1ab2:	0e 94 ed 01 	call	0x3da	; 0x3da <motors_brake>
		running_average_accel_read = 0;  //running average for accel reset to 0
    1ab6:	20 92 4a 01 	sts	0x014A, r2
    1aba:	30 92 4b 01 	sts	0x014B, r3
    1abe:	40 92 4c 01 	sts	0x014C, r4
    1ac2:	50 92 4d 01 	sts	0x014D, r5

		if (throttle < throttle_low || throttle > (throttle_high + 100)) throttle_up_count = 0;		//single low / bad throttle resets the counter to 0
    1ac6:	20 91 96 01 	lds	r18, 0x0196
    1aca:	30 91 97 01 	lds	r19, 0x0197
    1ace:	40 91 98 01 	lds	r20, 0x0198
    1ad2:	50 91 99 01 	lds	r21, 0x0199
    1ad6:	80 91 0a 01 	lds	r24, 0x010A
    1ada:	90 91 0b 01 	lds	r25, 0x010B
    1ade:	7c 01       	movw	r14, r24
    1ae0:	00 27       	eor	r16, r16
    1ae2:	f7 fc       	sbrc	r15, 7
    1ae4:	00 95       	com	r16
    1ae6:	10 2f       	mov	r17, r16
    1ae8:	2e 15       	cp	r18, r14
    1aea:	3f 05       	cpc	r19, r15
    1aec:	40 07       	cpc	r20, r16
    1aee:	51 07       	cpc	r21, r17
    1af0:	bc f0       	brlt	.+46     	; 0x1b20 <safety_and_idle+0xac>
    1af2:	20 91 96 01 	lds	r18, 0x0196
    1af6:	30 91 97 01 	lds	r19, 0x0197
    1afa:	40 91 98 01 	lds	r20, 0x0198
    1afe:	50 91 99 01 	lds	r21, 0x0199
    1b02:	80 91 0c 01 	lds	r24, 0x010C
    1b06:	90 91 0d 01 	lds	r25, 0x010D
    1b0a:	8c 59       	subi	r24, 0x9C	; 156
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	aa 27       	eor	r26, r26
    1b10:	97 fd       	sbrc	r25, 7
    1b12:	a0 95       	com	r26
    1b14:	ba 2f       	mov	r27, r26
    1b16:	82 17       	cp	r24, r18
    1b18:	93 07       	cpc	r25, r19
    1b1a:	a4 07       	cpc	r26, r20
    1b1c:	b5 07       	cpc	r27, r21
    1b1e:	24 f4       	brge	.+8      	; 0x1b28 <safety_and_idle+0xb4>
    1b20:	10 92 55 01 	sts	0x0155, r1
    1b24:	10 92 54 01 	sts	0x0154, r1
		if (throttle > throttle_low && throttle < (throttle_high + 100)) throttle_up_count ++;		//if the throttle has been moved high - increment the counter
    1b28:	80 91 96 01 	lds	r24, 0x0196
    1b2c:	90 91 97 01 	lds	r25, 0x0197
    1b30:	a0 91 98 01 	lds	r26, 0x0198
    1b34:	b0 91 99 01 	lds	r27, 0x0199
    1b38:	e8 16       	cp	r14, r24
    1b3a:	f9 06       	cpc	r15, r25
    1b3c:	0a 07       	cpc	r16, r26
    1b3e:	1b 07       	cpc	r17, r27
    1b40:	04 f5       	brge	.+64     	; 0x1b82 <safety_and_idle+0x10e>
    1b42:	20 91 96 01 	lds	r18, 0x0196
    1b46:	30 91 97 01 	lds	r19, 0x0197
    1b4a:	40 91 98 01 	lds	r20, 0x0198
    1b4e:	50 91 99 01 	lds	r21, 0x0199
    1b52:	80 91 0c 01 	lds	r24, 0x010C
    1b56:	90 91 0d 01 	lds	r25, 0x010D
    1b5a:	8c 59       	subi	r24, 0x9C	; 156
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	aa 27       	eor	r26, r26
    1b60:	97 fd       	sbrc	r25, 7
    1b62:	a0 95       	com	r26
    1b64:	ba 2f       	mov	r27, r26
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	4a 07       	cpc	r20, r26
    1b6c:	5b 07       	cpc	r21, r27
    1b6e:	4c f4       	brge	.+18     	; 0x1b82 <safety_and_idle+0x10e>
    1b70:	80 91 54 01 	lds	r24, 0x0154
    1b74:	90 91 55 01 	lds	r25, 0x0155
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	90 93 55 01 	sts	0x0155, r25
    1b7e:	80 93 54 01 	sts	0x0154, r24

		//interrupt blinking if stick isn't centered (helps to verify TX is working)
		if ( leftright > (heading_center + heading_leftthresh) ) {set_led_on(); _delay_ms(200);}
    1b82:	20 91 9e 01 	lds	r18, 0x019E
    1b86:	30 91 9f 01 	lds	r19, 0x019F
    1b8a:	40 91 a0 01 	lds	r20, 0x01A0
    1b8e:	50 91 a1 01 	lds	r21, 0x01A1
    1b92:	60 91 14 01 	lds	r22, 0x0114
    1b96:	70 91 15 01 	lds	r23, 0x0115
    1b9a:	80 91 16 01 	lds	r24, 0x0116
    1b9e:	90 91 17 01 	lds	r25, 0x0117
    1ba2:	86 0f       	add	r24, r22
    1ba4:	97 1f       	adc	r25, r23
    1ba6:	aa 27       	eor	r26, r26
    1ba8:	97 fd       	sbrc	r25, 7
    1baa:	a0 95       	com	r26
    1bac:	ba 2f       	mov	r27, r26
    1bae:	82 17       	cp	r24, r18
    1bb0:	93 07       	cpc	r25, r19
    1bb2:	a4 07       	cpc	r26, r20
    1bb4:	b5 07       	cpc	r27, r21
    1bb6:	44 f4       	brge	.+16     	; 0x1bc8 <safety_and_idle+0x154>
    1bb8:	5d 9a       	sbi	0x0b, 5	; 11
    1bba:	80 ed       	ldi	r24, 0xD0	; 208
    1bbc:	97 e0       	ldi	r25, 0x07	; 7
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	31 97       	sbiw	r30, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <safety_and_idle+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	d9 f7       	brne	.-10     	; 0x1bbe <safety_and_idle+0x14a>
		if ( leftright < (heading_center + heading_rightthresh) ) {set_led_on(); _delay_ms(200);}
    1bc8:	20 91 9e 01 	lds	r18, 0x019E
    1bcc:	30 91 9f 01 	lds	r19, 0x019F
    1bd0:	40 91 a0 01 	lds	r20, 0x01A0
    1bd4:	50 91 a1 01 	lds	r21, 0x01A1
    1bd8:	80 91 18 01 	lds	r24, 0x0118
    1bdc:	90 91 19 01 	lds	r25, 0x0119
    1be0:	68 0f       	add	r22, r24
    1be2:	79 1f       	adc	r23, r25
    1be4:	cb 01       	movw	r24, r22
    1be6:	aa 27       	eor	r26, r26
    1be8:	97 fd       	sbrc	r25, 7
    1bea:	a0 95       	com	r26
    1bec:	ba 2f       	mov	r27, r26
    1bee:	28 17       	cp	r18, r24
    1bf0:	39 07       	cpc	r19, r25
    1bf2:	4a 07       	cpc	r20, r26
    1bf4:	5b 07       	cpc	r21, r27
    1bf6:	44 f4       	brge	.+16     	; 0x1c08 <safety_and_idle+0x194>
    1bf8:	5d 9a       	sbi	0x0b, 5	; 11
    1bfa:	80 ed       	ldi	r24, 0xD0	; 208
    1bfc:	97 e0       	ldi	r25, 0x07	; 7
    1bfe:	fe 01       	movw	r30, r28
    1c00:	31 97       	sbiw	r30, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <safety_and_idle+0x18c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	d9 f7       	brne	.-10     	; 0x1bfe <safety_and_idle+0x18a>

		//sit there and flash LED
		
		toggle_led();
    1c08:	8b b1       	in	r24, 0x0b	; 11
    1c0a:	90 e2       	ldi	r25, 0x20	; 32
    1c0c:	89 27       	eor	r24, r25
    1c0e:	8b b9       	out	0x0b, r24	; 11
    1c10:	8c e2       	ldi	r24, 0x2C	; 44
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	fe 01       	movw	r30, r28
    1c16:	31 97       	sbiw	r30, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <safety_and_idle+0x1a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1c:	d9 f7       	brne	.-10     	; 0x1c14 <safety_and_idle+0x1a0>
		_delay_ms(30);		
		

		//slower LED flash if in config mode
		if (in_config_mode == 1) {set_led_off(); _delay_ms(200);}		
    1c1e:	80 90 cc 01 	lds	r8, 0x01CC
    1c22:	90 90 cd 01 	lds	r9, 0x01CD
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	88 16       	cp	r8, r24
    1c2a:	91 04       	cpc	r9, r1
    1c2c:	41 f4       	brne	.+16     	; 0x1c3e <safety_and_idle+0x1ca>
    1c2e:	5d 98       	cbi	0x0b, 5	; 11
    1c30:	80 ed       	ldi	r24, 0xD0	; 208
    1c32:	97 e0       	ldi	r25, 0x07	; 7
    1c34:	fe 01       	movw	r30, r28
    1c36:	31 97       	sbiw	r30, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <safety_and_idle+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	d9 f7       	brne	.-10     	; 0x1c34 <safety_and_idle+0x1c0>
		
		
		//verifies we got a centered forwardback stick at least once before allowing config mode (prevents boot directly into config mode if fail-safe is below center)
		if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))
    1c3e:	20 91 7c 01 	lds	r18, 0x017C
    1c42:	30 91 7d 01 	lds	r19, 0x017D
    1c46:	40 91 7e 01 	lds	r20, 0x017E
    1c4a:	50 91 7f 01 	lds	r21, 0x017F
    1c4e:	60 91 0e 01 	lds	r22, 0x010E
    1c52:	70 91 0f 01 	lds	r23, 0x010F
    1c56:	80 91 12 01 	lds	r24, 0x0112
    1c5a:	90 91 13 01 	lds	r25, 0x0113
    1c5e:	86 0f       	add	r24, r22
    1c60:	97 1f       	adc	r25, r23
    1c62:	7c 01       	movw	r14, r24
    1c64:	00 27       	eor	r16, r16
    1c66:	f7 fc       	sbrc	r15, 7
    1c68:	00 95       	com	r16
    1c6a:	10 2f       	mov	r17, r16
    1c6c:	e2 16       	cp	r14, r18
    1c6e:	f3 06       	cpc	r15, r19
    1c70:	04 07       	cpc	r16, r20
    1c72:	15 07       	cpc	r17, r21
    1c74:	e4 f5       	brge	.+120    	; 0x1cee <safety_and_idle+0x27a>
    1c76:	20 91 7c 01 	lds	r18, 0x017C
    1c7a:	30 91 7d 01 	lds	r19, 0x017D
    1c7e:	40 91 7e 01 	lds	r20, 0x017E
    1c82:	50 91 7f 01 	lds	r21, 0x017F
    1c86:	80 91 10 01 	lds	r24, 0x0110
    1c8a:	90 91 11 01 	lds	r25, 0x0111
    1c8e:	68 0f       	add	r22, r24
    1c90:	79 1f       	adc	r23, r25
    1c92:	5b 01       	movw	r10, r22
    1c94:	cc 24       	eor	r12, r12
    1c96:	b7 fc       	sbrc	r11, 7
    1c98:	c0 94       	com	r12
    1c9a:	dc 2c       	mov	r13, r12
    1c9c:	2a 15       	cp	r18, r10
    1c9e:	3b 05       	cpc	r19, r11
    1ca0:	4c 05       	cpc	r20, r12
    1ca2:	5d 05       	cpc	r21, r13
    1ca4:	24 f5       	brge	.+72     	; 0x1cee <safety_and_idle+0x27a>
    1ca6:	80 e5       	ldi	r24, 0x50	; 80
    1ca8:	93 ec       	ldi	r25, 0xC3	; 195
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <safety_and_idle+0x236>
		{

			_delay_ms(10);
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
    1cae:	80 91 7c 01 	lds	r24, 0x017C
    1cb2:	90 91 7d 01 	lds	r25, 0x017D
    1cb6:	a0 91 7e 01 	lds	r26, 0x017E
    1cba:	b0 91 7f 01 	lds	r27, 0x017F
    1cbe:	e8 16       	cp	r14, r24
    1cc0:	f9 06       	cpc	r15, r25
    1cc2:	0a 07       	cpc	r16, r26
    1cc4:	1b 07       	cpc	r17, r27
    1cc6:	9c f4       	brge	.+38     	; 0x1cee <safety_and_idle+0x27a>
    1cc8:	80 91 7c 01 	lds	r24, 0x017C
    1ccc:	90 91 7d 01 	lds	r25, 0x017D
    1cd0:	a0 91 7e 01 	lds	r26, 0x017E
    1cd4:	b0 91 7f 01 	lds	r27, 0x017F
    1cd8:	8a 15       	cp	r24, r10
    1cda:	9b 05       	cpc	r25, r11
    1cdc:	ac 05       	cpc	r26, r12
    1cde:	bd 05       	cpc	r27, r13
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <safety_and_idle+0x27a>
			{
				got_centered_forwardback = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	90 93 51 01 	sts	0x0151, r25
    1cea:	80 93 50 01 	sts	0x0150, r24
			}
		}
 

		//check for enter / leave config mode
		if (forwardback < (forwardback_center + forwardback_backthresh) && got_centered_forwardback == 1)		//is the stick being held back?
    1cee:	80 91 7c 01 	lds	r24, 0x017C
    1cf2:	90 91 7d 01 	lds	r25, 0x017D
    1cf6:	a0 91 7e 01 	lds	r26, 0x017E
    1cfa:	b0 91 7f 01 	lds	r27, 0x017F
    1cfe:	8e 15       	cp	r24, r14
    1d00:	9f 05       	cpc	r25, r15
    1d02:	a0 07       	cpc	r26, r16
    1d04:	b1 07       	cpc	r27, r17
    1d06:	0c f0       	brlt	.+2      	; 0x1d0a <safety_and_idle+0x296>
    1d08:	98 c0       	rjmp	.+304    	; 0x1e3a <safety_and_idle+0x3c6>
    1d0a:	80 91 50 01 	lds	r24, 0x0150
    1d0e:	90 91 51 01 	lds	r25, 0x0151
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <safety_and_idle+0x2a4>
    1d16:	91 c0       	rjmp	.+290    	; 0x1e3a <safety_and_idle+0x3c6>
    1d18:	80 e1       	ldi	r24, 0x10	; 16
    1d1a:	97 e2       	ldi	r25, 0x27	; 39
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	31 97       	sbiw	r30, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <safety_and_idle+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	d9 f7       	brne	.-10     	; 0x1d1c <safety_and_idle+0x2a8>
		{

			//wait a bit to make sure stick is being held...
			_delay_ms(1000);
			//still being held back - then enter / leave config mode
			if (forwardback < (forwardback_center + forwardback_backthresh))
    1d26:	80 91 7c 01 	lds	r24, 0x017C
    1d2a:	90 91 7d 01 	lds	r25, 0x017D
    1d2e:	a0 91 7e 01 	lds	r26, 0x017E
    1d32:	b0 91 7f 01 	lds	r27, 0x017F
    1d36:	8e 15       	cp	r24, r14
    1d38:	9f 05       	cpc	r25, r15
    1d3a:	a0 07       	cpc	r26, r16
    1d3c:	b1 07       	cpc	r27, r17
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <safety_and_idle+0x2ce>
    1d40:	7c c0       	rjmp	.+248    	; 0x1e3a <safety_and_idle+0x3c6>
			{
				in_config_mode = !in_config_mode;
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	89 28       	or	r8, r9
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <safety_and_idle+0x2da>
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	30 93 cd 01 	sts	0x01CD, r19
    1d52:	20 93 cc 01 	sts	0x01CC, r18
    1d56:	88 e9       	ldi	r24, 0x98	; 152
    1d58:	9a e3       	ldi	r25, 0x3A	; 58
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	31 97       	sbiw	r30, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <safety_and_idle+0x2e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	d9 f7       	brne	.-10     	; 0x1d5a <safety_and_idle+0x2e6>
				_delay_ms(1500);				//delay a bit longer to help assure config_mode isn't toggled again

				cli();                	//disable interrupts - seems like a good idea before saving stuff to ROM
    1d64:	f8 94       	cli
				if (in_config_mode == 1) get_config_constants();		//read + set a few constants prior to actually going into config mode
    1d66:	21 30       	cpi	r18, 0x01	; 1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <safety_and_idle+0x2fc>
    1d6c:	0e 94 3c 07 	call	0xe78	; 0xe78 <get_config_constants>
				if (in_config_mode == 0) save_config();				//if we're exiting config mode - save the configuration
    1d70:	80 91 cc 01 	lds	r24, 0x01CC
    1d74:	90 91 cd 01 	lds	r25, 0x01CD
    1d78:	89 2b       	or	r24, r25
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <safety_and_idle+0x30c>
    1d7c:	0e 94 ce 0c 	call	0x199c	; 0x199c <save_config>
				sei();  //re-enable interrupts
    1d80:	78 94       	sei
    1d82:	5b c0       	rjmp	.+182    	; 0x1e3a <safety_and_idle+0x3c6>
	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
		{
		   
			set_led_off();
    1d84:	5d 98       	cbi	0x0b, 5	; 11
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1d86:	e1 14       	cp	r14, r1
    1d88:	f1 04       	cpc	r15, r1
    1d8a:	01 05       	cpc	r16, r1
    1d8c:	11 05       	cpc	r17, r1
    1d8e:	a1 f4       	brne	.+40     	; 0x1db8 <safety_and_idle+0x344>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (x = 0; x < 15; x++)
				{
					set_led_on();
    1d94:	5d 9a       	sbi	0x0b, 5	; 11
    1d96:	88 ea       	ldi	r24, 0xA8	; 168
    1d98:	91 e6       	ldi	r25, 0x61	; 97
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <safety_and_idle+0x326>
					_delay_ms (5);
					set_led_off();
    1d9e:	5d 98       	cbi	0x0b, 5	; 11
    1da0:	8c e2       	ldi	r24, 0x2C	; 44
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	fe 01       	movw	r30, r28
    1da6:	31 97       	sbiw	r30, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <safety_and_idle+0x332>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	d9 f7       	brne	.-10     	; 0x1da4 <safety_and_idle+0x330>
    1dae:	2f 5f       	subi	r18, 0xFF	; 255
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
			{
				for (x = 0; x < 15; x++)
    1db2:	2f 30       	cpi	r18, 0x0F	; 15
    1db4:	31 05       	cpc	r19, r1
    1db6:	71 f7       	brne	.-36     	; 0x1d94 <safety_and_idle+0x320>
    1db8:	80 e4       	ldi	r24, 0x40	; 64
    1dba:	9f e1       	ldi	r25, 0x1F	; 31
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	31 97       	sbiw	r30, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <safety_and_idle+0x34a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	d9 f7       	brne	.-10     	; 0x1dbc <safety_and_idle+0x348>
    1dc6:	21 e3       	ldi	r18, 0x31	; 49
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <safety_and_idle+0x384>
}



void safety_and_idle(void)
{
    1dd0:	2c 59       	subi	r18, 0x9C	; 156
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd6:	5f 4f       	sbci	r21, 0xFF	; 255
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
			{
				x = x + 100;		
				set_led_on();
    1dd8:	5d 9a       	sbi	0x0b, 5	; 11
    1dda:	84 ef       	ldi	r24, 0xF4	; 244
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	fe 01       	movw	r30, r28
    1de0:	31 97       	sbiw	r30, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <safety_and_idle+0x36c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	d9 f7       	brne	.-10     	; 0x1dde <safety_and_idle+0x36a>
				_delay_ms (50);
				set_led_off();
    1de8:	5d 98       	cbi	0x0b, 5	; 11
    1dea:	80 ea       	ldi	r24, 0xA0	; 160
    1dec:	9f e0       	ldi	r25, 0x0F	; 15
    1dee:	fe 01       	movw	r30, r28
    1df0:	31 97       	sbiw	r30, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <safety_and_idle+0x37c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	d9 f7       	brne	.-10     	; 0x1dee <safety_and_idle+0x37a>
			}
			
			_delay_ms (800);
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
    1df8:	2e 15       	cp	r18, r14
    1dfa:	3f 05       	cpc	r19, r15
    1dfc:	40 07       	cpc	r20, r16
    1dfe:	51 07       	cpc	r21, r17
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <safety_and_idle+0x390>
    1e02:	43 c0       	rjmp	.+134    	; 0x1e8a <safety_and_idle+0x416>
    1e04:	80 91 7c 01 	lds	r24, 0x017C
    1e08:	90 91 7d 01 	lds	r25, 0x017D
    1e0c:	a0 91 7e 01 	lds	r26, 0x017E
    1e10:	b0 91 7f 01 	lds	r27, 0x017F
    1e14:	68 16       	cp	r6, r24
    1e16:	79 06       	cpc	r7, r25
    1e18:	8a 06       	cpc	r8, r26
    1e1a:	9b 06       	cpc	r9, r27
    1e1c:	b4 f5       	brge	.+108    	; 0x1e8a <safety_and_idle+0x416>
    1e1e:	80 91 96 01 	lds	r24, 0x0196
    1e22:	90 91 97 01 	lds	r25, 0x0197
    1e26:	a0 91 98 01 	lds	r26, 0x0198
    1e2a:	b0 91 99 01 	lds	r27, 0x0199
    1e2e:	8a 15       	cp	r24, r10
    1e30:	9b 05       	cpc	r25, r11
    1e32:	ac 05       	cpc	r26, r12
    1e34:	bd 05       	cpc	r27, r13
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <safety_and_idle+0x416>
    1e38:	cb cf       	rjmp	.-106    	; 0x1dd0 <safety_and_idle+0x35c>
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1e3a:	80 91 10 01 	lds	r24, 0x0110
    1e3e:	90 91 11 01 	lds	r25, 0x0111
    1e42:	20 91 0e 01 	lds	r18, 0x010E
    1e46:	30 91 0f 01 	lds	r19, 0x010F
    1e4a:	82 0f       	add	r24, r18
    1e4c:	93 1f       	adc	r25, r19
    1e4e:	3c 01       	movw	r6, r24
    1e50:	88 24       	eor	r8, r8
    1e52:	77 fc       	sbrc	r7, 7
    1e54:	80 94       	com	r8
    1e56:	98 2c       	mov	r9, r8
    1e58:	80 91 0a 01 	lds	r24, 0x010A
    1e5c:	90 91 0b 01 	lds	r25, 0x010B
    1e60:	5c 01       	movw	r10, r24
    1e62:	cc 24       	eor	r12, r12
    1e64:	b7 fc       	sbrc	r11, 7
    1e66:	c0 94       	com	r12
    1e68:	dc 2c       	mov	r13, r12
		{
		   
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1e6a:	e0 90 56 01 	lds	r14, 0x0156
    1e6e:	f0 90 57 01 	lds	r15, 0x0157
    1e72:	00 91 58 01 	lds	r16, 0x0158
    1e76:	10 91 59 01 	lds	r17, 0x0159
    1e7a:	20 91 74 01 	lds	r18, 0x0174
    1e7e:	30 91 75 01 	lds	r19, 0x0175
    1e82:	40 91 76 01 	lds	r20, 0x0176
    1e86:	50 91 77 01 	lds	r21, 0x0177
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1e8a:	80 91 7c 01 	lds	r24, 0x017C
    1e8e:	90 91 7d 01 	lds	r25, 0x017D
    1e92:	a0 91 7e 01 	lds	r26, 0x017E
    1e96:	b0 91 7f 01 	lds	r27, 0x017F
    1e9a:	68 16       	cp	r6, r24
    1e9c:	79 06       	cpc	r7, r25
    1e9e:	8a 06       	cpc	r8, r26
    1ea0:	9b 06       	cpc	r9, r27
    1ea2:	74 f4       	brge	.+28     	; 0x1ec0 <safety_and_idle+0x44c>
    1ea4:	80 91 96 01 	lds	r24, 0x0196
    1ea8:	90 91 97 01 	lds	r25, 0x0197
    1eac:	a0 91 98 01 	lds	r26, 0x0198
    1eb0:	b0 91 99 01 	lds	r27, 0x0199
    1eb4:	8a 15       	cp	r24, r10
    1eb6:	9b 05       	cpc	r25, r11
    1eb8:	ac 05       	cpc	r26, r12
    1eba:	bd 05       	cpc	r27, r13
    1ebc:	0c f4       	brge	.+2      	; 0x1ec0 <safety_and_idle+0x44c>
    1ebe:	62 cf       	rjmp	.-316    	; 0x1d84 <safety_and_idle+0x310>
    1ec0:	20 93 74 01 	sts	0x0174, r18
    1ec4:	30 93 75 01 	sts	0x0175, r19
    1ec8:	40 93 76 01 	sts	0x0176, r20
    1ecc:	50 93 77 01 	sts	0x0177, r21
	//also - if we've gone more than 11 rotations without getting fresh throttle data - assume something has gone wrong / shutdown
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)
		

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
    1ed0:	20 91 96 01 	lds	r18, 0x0196
    1ed4:	30 91 97 01 	lds	r19, 0x0197
    1ed8:	40 91 98 01 	lds	r20, 0x0198
    1edc:	50 91 99 01 	lds	r21, 0x0199
    1ee0:	80 91 0a 01 	lds	r24, 0x010A
    1ee4:	90 91 0b 01 	lds	r25, 0x010B
    1ee8:	aa 27       	eor	r26, r26
    1eea:	97 fd       	sbrc	r25, 7
    1eec:	a0 95       	com	r26
    1eee:	ba 2f       	mov	r27, r26
    1ef0:	28 17       	cp	r18, r24
    1ef2:	39 07       	cpc	r19, r25
    1ef4:	4a 07       	cpc	r20, r26
    1ef6:	5b 07       	cpc	r21, r27
    1ef8:	0c f4       	brge	.+2      	; 0x1efc <safety_and_idle+0x488>
    1efa:	db cd       	rjmp	.-1098   	; 0x1ab2 <safety_and_idle+0x3e>
    1efc:	20 91 96 01 	lds	r18, 0x0196
    1f00:	30 91 97 01 	lds	r19, 0x0197
    1f04:	40 91 98 01 	lds	r20, 0x0198
    1f08:	50 91 99 01 	lds	r21, 0x0199
    1f0c:	80 91 0c 01 	lds	r24, 0x010C
    1f10:	90 91 0d 01 	lds	r25, 0x010D
    1f14:	8c 59       	subi	r24, 0x9C	; 156
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	aa 27       	eor	r26, r26
    1f1a:	97 fd       	sbrc	r25, 7
    1f1c:	a0 95       	com	r26
    1f1e:	ba 2f       	mov	r27, r26
    1f20:	82 17       	cp	r24, r18
    1f22:	93 07       	cpc	r25, r19
    1f24:	a4 07       	cpc	r26, r20
    1f26:	b5 07       	cpc	r27, r21
    1f28:	0c f4       	brge	.+2      	; 0x1f2c <safety_and_idle+0x4b8>
    1f2a:	c3 cd       	rjmp	.-1146   	; 0x1ab2 <safety_and_idle+0x3e>
    1f2c:	80 91 52 01 	lds	r24, 0x0152
    1f30:	90 91 53 01 	lds	r25, 0x0153
    1f34:	0c 97       	sbiw	r24, 0x0c	; 12
    1f36:	0c f0       	brlt	.+2      	; 0x1f3a <safety_and_idle+0x4c6>
    1f38:	bc cd       	rjmp	.-1160   	; 0x1ab2 <safety_and_idle+0x3e>
    1f3a:	80 91 54 01 	lds	r24, 0x0154
    1f3e:	90 91 55 01 	lds	r25, 0x0155
    1f42:	04 97       	sbiw	r24, 0x04	; 4
    1f44:	0c f4       	brge	.+2      	; 0x1f48 <safety_and_idle+0x4d4>
    1f46:	b5 cd       	rjmp	.-1174   	; 0x1ab2 <safety_and_idle+0x3e>
		}


	}

}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	bf 90       	pop	r11
    1f5a:	af 90       	pop	r10
    1f5c:	9f 90       	pop	r9
    1f5e:	8f 90       	pop	r8
    1f60:	7f 90       	pop	r7
    1f62:	6f 90       	pop	r6
    1f64:	5f 90       	pop	r5
    1f66:	4f 90       	pop	r4
    1f68:	3f 90       	pop	r3
    1f6a:	2f 90       	pop	r2
    1f6c:	08 95       	ret

00001f6e <load_config>:

void load_config(void)
{
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17

	float tracking_word1;		//first word of tracking_comp
	float tracking_word2;		//second word of tracking_comp

	//only load config data if "saved_data_valid" indicates it was saved previously
	if (eeprom_read_word(&saved_data_valid) == 128)
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1f86:	80 38       	cpi	r24, 0x80	; 128
    1f88:	91 05       	cpc	r25, r1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <load_config+0x20>
    1f8c:	64 c0       	rjmp	.+200    	; 0x2056 <load_config+0xe8>
	{

		led_adjust = eeprom_read_word(&led_adjust_save);	//loads led offset
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1f96:	a0 e0       	ldi	r26, 0x00	; 0
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    1fa2:	60 93 3a 01 	sts	0x013A, r22
    1fa6:	70 93 3b 01 	sts	0x013B, r23
    1faa:	80 93 3c 01 	sts	0x013C, r24
    1fae:	90 93 3d 01 	sts	0x013D, r25
		tracking_word1 = (eeprom_read_word(&tracking_comp_save_word1));		//loads tracking comp
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    1fc6:	5b 01       	movw	r10, r22
    1fc8:	6c 01       	movw	r12, r24
		tracking_word2 = (eeprom_read_word(&tracking_comp_save_word2));		//loads tracking comp
    1fca:	86 e0       	ldi	r24, 0x06	; 6
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    1fde:	7b 01       	movw	r14, r22
    1fe0:	8c 01       	movw	r16, r24
		heading_center = eeprom_read_word(&heading_center_save);	//loads heading_center
    1fe2:	88 e0       	ldi	r24, 0x08	; 8
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1fea:	90 93 15 01 	sts	0x0115, r25
    1fee:	80 93 14 01 	sts	0x0114, r24
		base_accel = eeprom_read_word(&base_accel_save);		//loads base accelerometer value
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__eerd_word_m168>
    1ffa:	90 93 3f 01 	sts	0x013F, r25
    1ffe:	80 93 3e 01 	sts	0x013E, r24
	
		tracking_word1 = tracking_word1 / 1000;	//converts 1st tracking comp word back to float
		
		tracking_word2 = tracking_word2 / 1000;		//converts 2nd tracking comp word back to float
    2002:	c8 01       	movw	r24, r16
    2004:	b7 01       	movw	r22, r14
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    2012:	7b 01       	movw	r14, r22
    2014:	8c 01       	movw	r16, r24
		tracking_word2 = tracking_word2 / 10000;	//put it in the correct decimal place
		
		tracking_comp = tracking_word1 + tracking_word2;	//puts the two floats together
    2016:	c6 01       	movw	r24, r12
    2018:	b5 01       	movw	r22, r10
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a e7       	ldi	r20, 0x7A	; 122
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    2026:	5b 01       	movw	r10, r22
    2028:	6c 01       	movw	r12, r24
    202a:	c8 01       	movw	r24, r16
    202c:	b7 01       	movw	r22, r14
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e4       	ldi	r19, 0x40	; 64
    2032:	4c e1       	ldi	r20, 0x1C	; 28
    2034:	56 e4       	ldi	r21, 0x46	; 70
    2036:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__divsf3>
    203a:	9b 01       	movw	r18, r22
    203c:	ac 01       	movw	r20, r24
    203e:	c6 01       	movw	r24, r12
    2040:	b5 01       	movw	r22, r10
    2042:	0e 94 88 10 	call	0x2110	; 0x2110 <__addsf3>
    2046:	60 93 36 01 	sts	0x0136, r22
    204a:	70 93 37 01 	sts	0x0137, r23
    204e:	80 93 38 01 	sts	0x0138, r24
    2052:	90 93 39 01 	sts	0x0139, r25
	}

}
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	08 95       	ret

00002068 <main>:

int main(void)
{
	
		
	setup();			//do initial setup stuff - set pins / interrupts / etc.
    2068:	0e 94 ff 01 	call	0x3fe	; 0x3fe <setup>
			
	load_config();		//try to load configuration data from ROM
    206c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <load_config>
	{		
		
												//the lines before main_calculations don't have their execution time accounted for in the code 
												//but only take approximately 2us to execute (measured) - (0.006% of a rotation at 2000 rpm)
												
		rotations_since_throttle_was_set ++;	//used as a safety counter - if no good throttle data is received for certain number of rotations - the bot shuts down
    2070:	80 91 52 01 	lds	r24, 0x0152
    2074:	90 91 53 01 	lds	r25, 0x0153
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	90 93 53 01 	sts	0x0153, r25
    207e:	80 93 52 01 	sts	0x0152, r24
		rotation_count ++;
    2082:	80 91 46 01 	lds	r24, 0x0146
    2086:	90 91 47 01 	lds	r25, 0x0147
    208a:	a0 91 48 01 	lds	r26, 0x0148
    208e:	b0 91 49 01 	lds	r27, 0x0149
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	a1 1d       	adc	r26, r1
    2096:	b1 1d       	adc	r27, r1
    2098:	80 93 46 01 	sts	0x0146, r24
    209c:	90 93 47 01 	sts	0x0147, r25
    20a0:	a0 93 48 01 	sts	0x0148, r26
    20a4:	b0 93 49 01 	sts	0x0149, r27
				
		safety_and_idle();						//does safety check / sees if we're just sitting idle - also checks if config mode is requested
    20a8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <safety_and_idle>
		
		alternate_motor_cycle = !alternate_motor_cycle;     //alternates alternate_motor_cycle - used to balance spin / avoid favoring one motor
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	80 91 4e 01 	lds	r24, 0x014E
    20b4:	90 91 4f 01 	lds	r25, 0x014F
    20b8:	89 2b       	or	r24, r25
    20ba:	11 f4       	brne	.+4      	; 0x20c0 <main+0x58>
    20bc:	21 e0       	ldi	r18, 0x01	; 1
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	30 93 4f 01 	sts	0x014F, r19
    20c4:	20 93 4e 01 	sts	0x014E, r18

		led_hold_over = 0;						//reset the LED counter
    20c8:	10 92 78 01 	sts	0x0178, r1
    20cc:	10 92 79 01 	sts	0x0179, r1
    20d0:	10 92 7a 01 	sts	0x017A, r1
    20d4:	10 92 7b 01 	sts	0x017B, r1
		
		main_calculations();					//reads accel data and does all the math
    20d8:	0e 94 83 07 	call	0xf06	; 0xf06 <main_calculations>
												//takes about 400us - but is measured real-time / compensated for

		do_spin_180(1);							//1st 180 degrees of spin
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 ba 02 	call	0x574	; 0x574 <do_spin_180>

		led_hold_over = TCNT1;					//carry over led_counter from last spin
    20e4:	80 91 84 00 	lds	r24, 0x0084
    20e8:	90 91 85 00 	lds	r25, 0x0085
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	80 93 78 01 	sts	0x0178, r24
    20f4:	90 93 79 01 	sts	0x0179, r25
    20f8:	a0 93 7a 01 	sts	0x017A, r26
    20fc:	b0 93 7b 01 	sts	0x017B, r27
				
		main_calculations();					//read accel / do the main calculations again
    2100:	0e 94 83 07 	call	0xf06	; 0xf06 <main_calculations>
												//time doing math is tracked - but since time doing calculations is outside the motor loop - if it all falls in one cycle or the other...
												//..it may still be enough to cause a slight bias when translating
												//should really present a very small amount of time (less than 1% at 2000rpm) 
												//since we're resampling the accel - this may also provide a little better accuracy

		do_spin_180(2);							//2nd 180 degrees of spin
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 ba 02 	call	0x574	; 0x574 <do_spin_180>
    210c:	b1 cf       	rjmp	.-158    	; 0x2070 <main+0x8>

0000210e <__subsf3>:
    210e:	50 58       	subi	r21, 0x80	; 128

00002110 <__addsf3>:
    2110:	bb 27       	eor	r27, r27
    2112:	aa 27       	eor	r26, r26
    2114:	0e d0       	rcall	.+28     	; 0x2132 <__addsf3x>
    2116:	75 c1       	rjmp	.+746    	; 0x2402 <__fp_round>
    2118:	66 d1       	rcall	.+716    	; 0x23e6 <__fp_pscA>
    211a:	30 f0       	brcs	.+12     	; 0x2128 <__addsf3+0x18>
    211c:	6b d1       	rcall	.+726    	; 0x23f4 <__fp_pscB>
    211e:	20 f0       	brcs	.+8      	; 0x2128 <__addsf3+0x18>
    2120:	31 f4       	brne	.+12     	; 0x212e <__addsf3+0x1e>
    2122:	9f 3f       	cpi	r25, 0xFF	; 255
    2124:	11 f4       	brne	.+4      	; 0x212a <__addsf3+0x1a>
    2126:	1e f4       	brtc	.+6      	; 0x212e <__addsf3+0x1e>
    2128:	5b c1       	rjmp	.+694    	; 0x23e0 <__fp_nan>
    212a:	0e f4       	brtc	.+2      	; 0x212e <__addsf3+0x1e>
    212c:	e0 95       	com	r30
    212e:	e7 fb       	bst	r30, 7
    2130:	51 c1       	rjmp	.+674    	; 0x23d4 <__fp_inf>

00002132 <__addsf3x>:
    2132:	e9 2f       	mov	r30, r25
    2134:	77 d1       	rcall	.+750    	; 0x2424 <__fp_split3>
    2136:	80 f3       	brcs	.-32     	; 0x2118 <__addsf3+0x8>
    2138:	ba 17       	cp	r27, r26
    213a:	62 07       	cpc	r22, r18
    213c:	73 07       	cpc	r23, r19
    213e:	84 07       	cpc	r24, r20
    2140:	95 07       	cpc	r25, r21
    2142:	18 f0       	brcs	.+6      	; 0x214a <__addsf3x+0x18>
    2144:	71 f4       	brne	.+28     	; 0x2162 <__addsf3x+0x30>
    2146:	9e f5       	brtc	.+102    	; 0x21ae <__addsf3x+0x7c>
    2148:	8f c1       	rjmp	.+798    	; 0x2468 <__fp_zero>
    214a:	0e f4       	brtc	.+2      	; 0x214e <__addsf3x+0x1c>
    214c:	e0 95       	com	r30
    214e:	0b 2e       	mov	r0, r27
    2150:	ba 2f       	mov	r27, r26
    2152:	a0 2d       	mov	r26, r0
    2154:	0b 01       	movw	r0, r22
    2156:	b9 01       	movw	r22, r18
    2158:	90 01       	movw	r18, r0
    215a:	0c 01       	movw	r0, r24
    215c:	ca 01       	movw	r24, r20
    215e:	a0 01       	movw	r20, r0
    2160:	11 24       	eor	r1, r1
    2162:	ff 27       	eor	r31, r31
    2164:	59 1b       	sub	r21, r25
    2166:	99 f0       	breq	.+38     	; 0x218e <__addsf3x+0x5c>
    2168:	59 3f       	cpi	r21, 0xF9	; 249
    216a:	50 f4       	brcc	.+20     	; 0x2180 <__addsf3x+0x4e>
    216c:	50 3e       	cpi	r21, 0xE0	; 224
    216e:	68 f1       	brcs	.+90     	; 0x21ca <__addsf3x+0x98>
    2170:	1a 16       	cp	r1, r26
    2172:	f0 40       	sbci	r31, 0x00	; 0
    2174:	a2 2f       	mov	r26, r18
    2176:	23 2f       	mov	r18, r19
    2178:	34 2f       	mov	r19, r20
    217a:	44 27       	eor	r20, r20
    217c:	58 5f       	subi	r21, 0xF8	; 248
    217e:	f3 cf       	rjmp	.-26     	; 0x2166 <__addsf3x+0x34>
    2180:	46 95       	lsr	r20
    2182:	37 95       	ror	r19
    2184:	27 95       	ror	r18
    2186:	a7 95       	ror	r26
    2188:	f0 40       	sbci	r31, 0x00	; 0
    218a:	53 95       	inc	r21
    218c:	c9 f7       	brne	.-14     	; 0x2180 <__addsf3x+0x4e>
    218e:	7e f4       	brtc	.+30     	; 0x21ae <__addsf3x+0x7c>
    2190:	1f 16       	cp	r1, r31
    2192:	ba 0b       	sbc	r27, r26
    2194:	62 0b       	sbc	r22, r18
    2196:	73 0b       	sbc	r23, r19
    2198:	84 0b       	sbc	r24, r20
    219a:	ba f0       	brmi	.+46     	; 0x21ca <__addsf3x+0x98>
    219c:	91 50       	subi	r25, 0x01	; 1
    219e:	a1 f0       	breq	.+40     	; 0x21c8 <__addsf3x+0x96>
    21a0:	ff 0f       	add	r31, r31
    21a2:	bb 1f       	adc	r27, r27
    21a4:	66 1f       	adc	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	c2 f7       	brpl	.-16     	; 0x219c <__addsf3x+0x6a>
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <__addsf3x+0x98>
    21ae:	ba 0f       	add	r27, r26
    21b0:	62 1f       	adc	r22, r18
    21b2:	73 1f       	adc	r23, r19
    21b4:	84 1f       	adc	r24, r20
    21b6:	48 f4       	brcc	.+18     	; 0x21ca <__addsf3x+0x98>
    21b8:	87 95       	ror	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b7 95       	ror	r27
    21c0:	f7 95       	ror	r31
    21c2:	9e 3f       	cpi	r25, 0xFE	; 254
    21c4:	08 f0       	brcs	.+2      	; 0x21c8 <__addsf3x+0x96>
    21c6:	b3 cf       	rjmp	.-154    	; 0x212e <__addsf3+0x1e>
    21c8:	93 95       	inc	r25
    21ca:	88 0f       	add	r24, r24
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <__addsf3x+0x9e>
    21ce:	99 27       	eor	r25, r25
    21d0:	ee 0f       	add	r30, r30
    21d2:	97 95       	ror	r25
    21d4:	87 95       	ror	r24
    21d6:	08 95       	ret

000021d8 <__cmpsf2>:
    21d8:	d9 d0       	rcall	.+434    	; 0x238c <__fp_cmp>
    21da:	08 f4       	brcc	.+2      	; 0x21de <__cmpsf2+0x6>
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	08 95       	ret

000021e0 <__divsf3>:
    21e0:	0c d0       	rcall	.+24     	; 0x21fa <__divsf3x>
    21e2:	0f c1       	rjmp	.+542    	; 0x2402 <__fp_round>
    21e4:	07 d1       	rcall	.+526    	; 0x23f4 <__fp_pscB>
    21e6:	40 f0       	brcs	.+16     	; 0x21f8 <__divsf3+0x18>
    21e8:	fe d0       	rcall	.+508    	; 0x23e6 <__fp_pscA>
    21ea:	30 f0       	brcs	.+12     	; 0x21f8 <__divsf3+0x18>
    21ec:	21 f4       	brne	.+8      	; 0x21f6 <__divsf3+0x16>
    21ee:	5f 3f       	cpi	r21, 0xFF	; 255
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <__divsf3+0x18>
    21f2:	f0 c0       	rjmp	.+480    	; 0x23d4 <__fp_inf>
    21f4:	51 11       	cpse	r21, r1
    21f6:	39 c1       	rjmp	.+626    	; 0x246a <__fp_szero>
    21f8:	f3 c0       	rjmp	.+486    	; 0x23e0 <__fp_nan>

000021fa <__divsf3x>:
    21fa:	14 d1       	rcall	.+552    	; 0x2424 <__fp_split3>
    21fc:	98 f3       	brcs	.-26     	; 0x21e4 <__divsf3+0x4>

000021fe <__divsf3_pse>:
    21fe:	99 23       	and	r25, r25
    2200:	c9 f3       	breq	.-14     	; 0x21f4 <__divsf3+0x14>
    2202:	55 23       	and	r21, r21
    2204:	b1 f3       	breq	.-20     	; 0x21f2 <__divsf3+0x12>
    2206:	95 1b       	sub	r25, r21
    2208:	55 0b       	sbc	r21, r21
    220a:	bb 27       	eor	r27, r27
    220c:	aa 27       	eor	r26, r26
    220e:	62 17       	cp	r22, r18
    2210:	73 07       	cpc	r23, r19
    2212:	84 07       	cpc	r24, r20
    2214:	38 f0       	brcs	.+14     	; 0x2224 <__divsf3_pse+0x26>
    2216:	9f 5f       	subi	r25, 0xFF	; 255
    2218:	5f 4f       	sbci	r21, 0xFF	; 255
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	44 1f       	adc	r20, r20
    2220:	aa 1f       	adc	r26, r26
    2222:	a9 f3       	breq	.-22     	; 0x220e <__divsf3_pse+0x10>
    2224:	33 d0       	rcall	.+102    	; 0x228c <__divsf3_pse+0x8e>
    2226:	0e 2e       	mov	r0, r30
    2228:	3a f0       	brmi	.+14     	; 0x2238 <__divsf3_pse+0x3a>
    222a:	e0 e8       	ldi	r30, 0x80	; 128
    222c:	30 d0       	rcall	.+96     	; 0x228e <__divsf3_pse+0x90>
    222e:	91 50       	subi	r25, 0x01	; 1
    2230:	50 40       	sbci	r21, 0x00	; 0
    2232:	e6 95       	lsr	r30
    2234:	00 1c       	adc	r0, r0
    2236:	ca f7       	brpl	.-14     	; 0x222a <__divsf3_pse+0x2c>
    2238:	29 d0       	rcall	.+82     	; 0x228c <__divsf3_pse+0x8e>
    223a:	fe 2f       	mov	r31, r30
    223c:	27 d0       	rcall	.+78     	; 0x228c <__divsf3_pse+0x8e>
    223e:	66 0f       	add	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	88 1f       	adc	r24, r24
    2244:	bb 1f       	adc	r27, r27
    2246:	26 17       	cp	r18, r22
    2248:	37 07       	cpc	r19, r23
    224a:	48 07       	cpc	r20, r24
    224c:	ab 07       	cpc	r26, r27
    224e:	b0 e8       	ldi	r27, 0x80	; 128
    2250:	09 f0       	breq	.+2      	; 0x2254 <__divsf3_pse+0x56>
    2252:	bb 0b       	sbc	r27, r27
    2254:	80 2d       	mov	r24, r0
    2256:	bf 01       	movw	r22, r30
    2258:	ff 27       	eor	r31, r31
    225a:	93 58       	subi	r25, 0x83	; 131
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	2a f0       	brmi	.+10     	; 0x226a <__divsf3_pse+0x6c>
    2260:	9e 3f       	cpi	r25, 0xFE	; 254
    2262:	51 05       	cpc	r21, r1
    2264:	68 f0       	brcs	.+26     	; 0x2280 <__divsf3_pse+0x82>
    2266:	b6 c0       	rjmp	.+364    	; 0x23d4 <__fp_inf>
    2268:	00 c1       	rjmp	.+512    	; 0x246a <__fp_szero>
    226a:	5f 3f       	cpi	r21, 0xFF	; 255
    226c:	ec f3       	brlt	.-6      	; 0x2268 <__divsf3_pse+0x6a>
    226e:	98 3e       	cpi	r25, 0xE8	; 232
    2270:	dc f3       	brlt	.-10     	; 0x2268 <__divsf3_pse+0x6a>
    2272:	86 95       	lsr	r24
    2274:	77 95       	ror	r23
    2276:	67 95       	ror	r22
    2278:	b7 95       	ror	r27
    227a:	f7 95       	ror	r31
    227c:	9f 5f       	subi	r25, 0xFF	; 255
    227e:	c9 f7       	brne	.-14     	; 0x2272 <__divsf3_pse+0x74>
    2280:	88 0f       	add	r24, r24
    2282:	91 1d       	adc	r25, r1
    2284:	96 95       	lsr	r25
    2286:	87 95       	ror	r24
    2288:	97 f9       	bld	r25, 7
    228a:	08 95       	ret
    228c:	e1 e0       	ldi	r30, 0x01	; 1
    228e:	66 0f       	add	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	88 1f       	adc	r24, r24
    2294:	bb 1f       	adc	r27, r27
    2296:	62 17       	cp	r22, r18
    2298:	73 07       	cpc	r23, r19
    229a:	84 07       	cpc	r24, r20
    229c:	ba 07       	cpc	r27, r26
    229e:	20 f0       	brcs	.+8      	; 0x22a8 <__divsf3_pse+0xaa>
    22a0:	62 1b       	sub	r22, r18
    22a2:	73 0b       	sbc	r23, r19
    22a4:	84 0b       	sbc	r24, r20
    22a6:	ba 0b       	sbc	r27, r26
    22a8:	ee 1f       	adc	r30, r30
    22aa:	88 f7       	brcc	.-30     	; 0x228e <__divsf3_pse+0x90>
    22ac:	e0 95       	com	r30
    22ae:	08 95       	ret

000022b0 <__fixsfsi>:
    22b0:	04 d0       	rcall	.+8      	; 0x22ba <__fixunssfsi>
    22b2:	68 94       	set
    22b4:	b1 11       	cpse	r27, r1
    22b6:	d9 c0       	rjmp	.+434    	; 0x246a <__fp_szero>
    22b8:	08 95       	ret

000022ba <__fixunssfsi>:
    22ba:	bc d0       	rcall	.+376    	; 0x2434 <__fp_splitA>
    22bc:	88 f0       	brcs	.+34     	; 0x22e0 <__fixunssfsi+0x26>
    22be:	9f 57       	subi	r25, 0x7F	; 127
    22c0:	90 f0       	brcs	.+36     	; 0x22e6 <__fixunssfsi+0x2c>
    22c2:	b9 2f       	mov	r27, r25
    22c4:	99 27       	eor	r25, r25
    22c6:	b7 51       	subi	r27, 0x17	; 23
    22c8:	a0 f0       	brcs	.+40     	; 0x22f2 <__fixunssfsi+0x38>
    22ca:	d1 f0       	breq	.+52     	; 0x2300 <__fixunssfsi+0x46>
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	1a f0       	brmi	.+6      	; 0x22dc <__fixunssfsi+0x22>
    22d6:	ba 95       	dec	r27
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__fixunssfsi+0x12>
    22da:	12 c0       	rjmp	.+36     	; 0x2300 <__fixunssfsi+0x46>
    22dc:	b1 30       	cpi	r27, 0x01	; 1
    22de:	81 f0       	breq	.+32     	; 0x2300 <__fixunssfsi+0x46>
    22e0:	c3 d0       	rcall	.+390    	; 0x2468 <__fp_zero>
    22e2:	b1 e0       	ldi	r27, 0x01	; 1
    22e4:	08 95       	ret
    22e6:	c0 c0       	rjmp	.+384    	; 0x2468 <__fp_zero>
    22e8:	67 2f       	mov	r22, r23
    22ea:	78 2f       	mov	r23, r24
    22ec:	88 27       	eor	r24, r24
    22ee:	b8 5f       	subi	r27, 0xF8	; 248
    22f0:	39 f0       	breq	.+14     	; 0x2300 <__fixunssfsi+0x46>
    22f2:	b9 3f       	cpi	r27, 0xF9	; 249
    22f4:	cc f3       	brlt	.-14     	; 0x22e8 <__fixunssfsi+0x2e>
    22f6:	86 95       	lsr	r24
    22f8:	77 95       	ror	r23
    22fa:	67 95       	ror	r22
    22fc:	b3 95       	inc	r27
    22fe:	d9 f7       	brne	.-10     	; 0x22f6 <__fixunssfsi+0x3c>
    2300:	3e f4       	brtc	.+14     	; 0x2310 <__fixunssfsi+0x56>
    2302:	90 95       	com	r25
    2304:	80 95       	com	r24
    2306:	70 95       	com	r23
    2308:	61 95       	neg	r22
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	8f 4f       	sbci	r24, 0xFF	; 255
    230e:	9f 4f       	sbci	r25, 0xFF	; 255
    2310:	08 95       	ret

00002312 <__floatunsisf>:
    2312:	e8 94       	clt
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <__floatsisf+0x12>

00002316 <__floatsisf>:
    2316:	97 fb       	bst	r25, 7
    2318:	3e f4       	brtc	.+14     	; 0x2328 <__floatsisf+0x12>
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	99 23       	and	r25, r25
    232a:	a9 f0       	breq	.+42     	; 0x2356 <__floatsisf+0x40>
    232c:	f9 2f       	mov	r31, r25
    232e:	96 e9       	ldi	r25, 0x96	; 150
    2330:	bb 27       	eor	r27, r27
    2332:	93 95       	inc	r25
    2334:	f6 95       	lsr	r31
    2336:	87 95       	ror	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b7 95       	ror	r27
    233e:	f1 11       	cpse	r31, r1
    2340:	f8 cf       	rjmp	.-16     	; 0x2332 <__floatsisf+0x1c>
    2342:	fa f4       	brpl	.+62     	; 0x2382 <__floatsisf+0x6c>
    2344:	bb 0f       	add	r27, r27
    2346:	11 f4       	brne	.+4      	; 0x234c <__floatsisf+0x36>
    2348:	60 ff       	sbrs	r22, 0
    234a:	1b c0       	rjmp	.+54     	; 0x2382 <__floatsisf+0x6c>
    234c:	6f 5f       	subi	r22, 0xFF	; 255
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	16 c0       	rjmp	.+44     	; 0x2382 <__floatsisf+0x6c>
    2356:	88 23       	and	r24, r24
    2358:	11 f0       	breq	.+4      	; 0x235e <__floatsisf+0x48>
    235a:	96 e9       	ldi	r25, 0x96	; 150
    235c:	11 c0       	rjmp	.+34     	; 0x2380 <__floatsisf+0x6a>
    235e:	77 23       	and	r23, r23
    2360:	21 f0       	breq	.+8      	; 0x236a <__floatsisf+0x54>
    2362:	9e e8       	ldi	r25, 0x8E	; 142
    2364:	87 2f       	mov	r24, r23
    2366:	76 2f       	mov	r23, r22
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__floatsisf+0x5e>
    236a:	66 23       	and	r22, r22
    236c:	71 f0       	breq	.+28     	; 0x238a <__floatsisf+0x74>
    236e:	96 e8       	ldi	r25, 0x86	; 134
    2370:	86 2f       	mov	r24, r22
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	2a f0       	brmi	.+10     	; 0x2382 <__floatsisf+0x6c>
    2378:	9a 95       	dec	r25
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	da f7       	brpl	.-10     	; 0x2378 <__floatsisf+0x62>
    2382:	88 0f       	add	r24, r24
    2384:	96 95       	lsr	r25
    2386:	87 95       	ror	r24
    2388:	97 f9       	bld	r25, 7
    238a:	08 95       	ret

0000238c <__fp_cmp>:
    238c:	99 0f       	add	r25, r25
    238e:	00 08       	sbc	r0, r0
    2390:	55 0f       	add	r21, r21
    2392:	aa 0b       	sbc	r26, r26
    2394:	e0 e8       	ldi	r30, 0x80	; 128
    2396:	fe ef       	ldi	r31, 0xFE	; 254
    2398:	16 16       	cp	r1, r22
    239a:	17 06       	cpc	r1, r23
    239c:	e8 07       	cpc	r30, r24
    239e:	f9 07       	cpc	r31, r25
    23a0:	c0 f0       	brcs	.+48     	; 0x23d2 <__fp_cmp+0x46>
    23a2:	12 16       	cp	r1, r18
    23a4:	13 06       	cpc	r1, r19
    23a6:	e4 07       	cpc	r30, r20
    23a8:	f5 07       	cpc	r31, r21
    23aa:	98 f0       	brcs	.+38     	; 0x23d2 <__fp_cmp+0x46>
    23ac:	62 1b       	sub	r22, r18
    23ae:	73 0b       	sbc	r23, r19
    23b0:	84 0b       	sbc	r24, r20
    23b2:	95 0b       	sbc	r25, r21
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <__fp_cmp+0x38>
    23b6:	0a 26       	eor	r0, r26
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <__fp_cmp+0x46>
    23ba:	23 2b       	or	r18, r19
    23bc:	24 2b       	or	r18, r20
    23be:	25 2b       	or	r18, r21
    23c0:	21 f4       	brne	.+8      	; 0x23ca <__fp_cmp+0x3e>
    23c2:	08 95       	ret
    23c4:	0a 26       	eor	r0, r26
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__fp_cmp+0x3e>
    23c8:	a1 40       	sbci	r26, 0x01	; 1
    23ca:	a6 95       	lsr	r26
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	81 1d       	adc	r24, r1
    23d0:	81 1d       	adc	r24, r1
    23d2:	08 95       	ret

000023d4 <__fp_inf>:
    23d4:	97 f9       	bld	r25, 7
    23d6:	9f 67       	ori	r25, 0x7F	; 127
    23d8:	80 e8       	ldi	r24, 0x80	; 128
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	08 95       	ret

000023e0 <__fp_nan>:
    23e0:	9f ef       	ldi	r25, 0xFF	; 255
    23e2:	80 ec       	ldi	r24, 0xC0	; 192
    23e4:	08 95       	ret

000023e6 <__fp_pscA>:
    23e6:	00 24       	eor	r0, r0
    23e8:	0a 94       	dec	r0
    23ea:	16 16       	cp	r1, r22
    23ec:	17 06       	cpc	r1, r23
    23ee:	18 06       	cpc	r1, r24
    23f0:	09 06       	cpc	r0, r25
    23f2:	08 95       	ret

000023f4 <__fp_pscB>:
    23f4:	00 24       	eor	r0, r0
    23f6:	0a 94       	dec	r0
    23f8:	12 16       	cp	r1, r18
    23fa:	13 06       	cpc	r1, r19
    23fc:	14 06       	cpc	r1, r20
    23fe:	05 06       	cpc	r0, r21
    2400:	08 95       	ret

00002402 <__fp_round>:
    2402:	09 2e       	mov	r0, r25
    2404:	03 94       	inc	r0
    2406:	00 0c       	add	r0, r0
    2408:	11 f4       	brne	.+4      	; 0x240e <__fp_round+0xc>
    240a:	88 23       	and	r24, r24
    240c:	52 f0       	brmi	.+20     	; 0x2422 <__fp_round+0x20>
    240e:	bb 0f       	add	r27, r27
    2410:	40 f4       	brcc	.+16     	; 0x2422 <__fp_round+0x20>
    2412:	bf 2b       	or	r27, r31
    2414:	11 f4       	brne	.+4      	; 0x241a <__fp_round+0x18>
    2416:	60 ff       	sbrs	r22, 0
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <__fp_round+0x20>
    241a:	6f 5f       	subi	r22, 0xFF	; 255
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	8f 4f       	sbci	r24, 0xFF	; 255
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	08 95       	ret

00002424 <__fp_split3>:
    2424:	57 fd       	sbrc	r21, 7
    2426:	90 58       	subi	r25, 0x80	; 128
    2428:	44 0f       	add	r20, r20
    242a:	55 1f       	adc	r21, r21
    242c:	59 f0       	breq	.+22     	; 0x2444 <__fp_splitA+0x10>
    242e:	5f 3f       	cpi	r21, 0xFF	; 255
    2430:	71 f0       	breq	.+28     	; 0x244e <__fp_splitA+0x1a>
    2432:	47 95       	ror	r20

00002434 <__fp_splitA>:
    2434:	88 0f       	add	r24, r24
    2436:	97 fb       	bst	r25, 7
    2438:	99 1f       	adc	r25, r25
    243a:	61 f0       	breq	.+24     	; 0x2454 <__fp_splitA+0x20>
    243c:	9f 3f       	cpi	r25, 0xFF	; 255
    243e:	79 f0       	breq	.+30     	; 0x245e <__fp_splitA+0x2a>
    2440:	87 95       	ror	r24
    2442:	08 95       	ret
    2444:	12 16       	cp	r1, r18
    2446:	13 06       	cpc	r1, r19
    2448:	14 06       	cpc	r1, r20
    244a:	55 1f       	adc	r21, r21
    244c:	f2 cf       	rjmp	.-28     	; 0x2432 <__fp_split3+0xe>
    244e:	46 95       	lsr	r20
    2450:	f1 df       	rcall	.-30     	; 0x2434 <__fp_splitA>
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <__fp_splitA+0x30>
    2454:	16 16       	cp	r1, r22
    2456:	17 06       	cpc	r1, r23
    2458:	18 06       	cpc	r1, r24
    245a:	99 1f       	adc	r25, r25
    245c:	f1 cf       	rjmp	.-30     	; 0x2440 <__fp_splitA+0xc>
    245e:	86 95       	lsr	r24
    2460:	71 05       	cpc	r23, r1
    2462:	61 05       	cpc	r22, r1
    2464:	08 94       	sec
    2466:	08 95       	ret

00002468 <__fp_zero>:
    2468:	e8 94       	clt

0000246a <__fp_szero>:
    246a:	bb 27       	eor	r27, r27
    246c:	66 27       	eor	r22, r22
    246e:	77 27       	eor	r23, r23
    2470:	cb 01       	movw	r24, r22
    2472:	97 f9       	bld	r25, 7
    2474:	08 95       	ret

00002476 <__gesf2>:
    2476:	8a df       	rcall	.-236    	; 0x238c <__fp_cmp>
    2478:	08 f4       	brcc	.+2      	; 0x247c <__gesf2+0x6>
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	08 95       	ret

0000247e <__mulsf3>:
    247e:	0b d0       	rcall	.+22     	; 0x2496 <__mulsf3x>
    2480:	c0 cf       	rjmp	.-128    	; 0x2402 <__fp_round>
    2482:	b1 df       	rcall	.-158    	; 0x23e6 <__fp_pscA>
    2484:	28 f0       	brcs	.+10     	; 0x2490 <__mulsf3+0x12>
    2486:	b6 df       	rcall	.-148    	; 0x23f4 <__fp_pscB>
    2488:	18 f0       	brcs	.+6      	; 0x2490 <__mulsf3+0x12>
    248a:	95 23       	and	r25, r21
    248c:	09 f0       	breq	.+2      	; 0x2490 <__mulsf3+0x12>
    248e:	a2 cf       	rjmp	.-188    	; 0x23d4 <__fp_inf>
    2490:	a7 cf       	rjmp	.-178    	; 0x23e0 <__fp_nan>
    2492:	11 24       	eor	r1, r1
    2494:	ea cf       	rjmp	.-44     	; 0x246a <__fp_szero>

00002496 <__mulsf3x>:
    2496:	c6 df       	rcall	.-116    	; 0x2424 <__fp_split3>
    2498:	a0 f3       	brcs	.-24     	; 0x2482 <__mulsf3+0x4>

0000249a <__mulsf3_pse>:
    249a:	95 9f       	mul	r25, r21
    249c:	d1 f3       	breq	.-12     	; 0x2492 <__mulsf3+0x14>
    249e:	95 0f       	add	r25, r21
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	55 1f       	adc	r21, r21
    24a4:	62 9f       	mul	r22, r18
    24a6:	f0 01       	movw	r30, r0
    24a8:	72 9f       	mul	r23, r18
    24aa:	bb 27       	eor	r27, r27
    24ac:	f0 0d       	add	r31, r0
    24ae:	b1 1d       	adc	r27, r1
    24b0:	63 9f       	mul	r22, r19
    24b2:	aa 27       	eor	r26, r26
    24b4:	f0 0d       	add	r31, r0
    24b6:	b1 1d       	adc	r27, r1
    24b8:	aa 1f       	adc	r26, r26
    24ba:	64 9f       	mul	r22, r20
    24bc:	66 27       	eor	r22, r22
    24be:	b0 0d       	add	r27, r0
    24c0:	a1 1d       	adc	r26, r1
    24c2:	66 1f       	adc	r22, r22
    24c4:	82 9f       	mul	r24, r18
    24c6:	22 27       	eor	r18, r18
    24c8:	b0 0d       	add	r27, r0
    24ca:	a1 1d       	adc	r26, r1
    24cc:	62 1f       	adc	r22, r18
    24ce:	73 9f       	mul	r23, r19
    24d0:	b0 0d       	add	r27, r0
    24d2:	a1 1d       	adc	r26, r1
    24d4:	62 1f       	adc	r22, r18
    24d6:	83 9f       	mul	r24, r19
    24d8:	a0 0d       	add	r26, r0
    24da:	61 1d       	adc	r22, r1
    24dc:	22 1f       	adc	r18, r18
    24de:	74 9f       	mul	r23, r20
    24e0:	33 27       	eor	r19, r19
    24e2:	a0 0d       	add	r26, r0
    24e4:	61 1d       	adc	r22, r1
    24e6:	23 1f       	adc	r18, r19
    24e8:	84 9f       	mul	r24, r20
    24ea:	60 0d       	add	r22, r0
    24ec:	21 1d       	adc	r18, r1
    24ee:	82 2f       	mov	r24, r18
    24f0:	76 2f       	mov	r23, r22
    24f2:	6a 2f       	mov	r22, r26
    24f4:	11 24       	eor	r1, r1
    24f6:	9f 57       	subi	r25, 0x7F	; 127
    24f8:	50 40       	sbci	r21, 0x00	; 0
    24fa:	8a f0       	brmi	.+34     	; 0x251e <__mulsf3_pse+0x84>
    24fc:	e1 f0       	breq	.+56     	; 0x2536 <__mulsf3_pse+0x9c>
    24fe:	88 23       	and	r24, r24
    2500:	4a f0       	brmi	.+18     	; 0x2514 <__mulsf3_pse+0x7a>
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	bb 1f       	adc	r27, r27
    2508:	66 1f       	adc	r22, r22
    250a:	77 1f       	adc	r23, r23
    250c:	88 1f       	adc	r24, r24
    250e:	91 50       	subi	r25, 0x01	; 1
    2510:	50 40       	sbci	r21, 0x00	; 0
    2512:	a9 f7       	brne	.-22     	; 0x24fe <__mulsf3_pse+0x64>
    2514:	9e 3f       	cpi	r25, 0xFE	; 254
    2516:	51 05       	cpc	r21, r1
    2518:	70 f0       	brcs	.+28     	; 0x2536 <__mulsf3_pse+0x9c>
    251a:	5c cf       	rjmp	.-328    	; 0x23d4 <__fp_inf>
    251c:	a6 cf       	rjmp	.-180    	; 0x246a <__fp_szero>
    251e:	5f 3f       	cpi	r21, 0xFF	; 255
    2520:	ec f3       	brlt	.-6      	; 0x251c <__mulsf3_pse+0x82>
    2522:	98 3e       	cpi	r25, 0xE8	; 232
    2524:	dc f3       	brlt	.-10     	; 0x251c <__mulsf3_pse+0x82>
    2526:	86 95       	lsr	r24
    2528:	77 95       	ror	r23
    252a:	67 95       	ror	r22
    252c:	b7 95       	ror	r27
    252e:	f7 95       	ror	r31
    2530:	e7 95       	ror	r30
    2532:	9f 5f       	subi	r25, 0xFF	; 255
    2534:	c1 f7       	brne	.-16     	; 0x2526 <__mulsf3_pse+0x8c>
    2536:	fe 2b       	or	r31, r30
    2538:	88 0f       	add	r24, r24
    253a:	91 1d       	adc	r25, r1
    253c:	96 95       	lsr	r25
    253e:	87 95       	ror	r24
    2540:	97 f9       	bld	r25, 7
    2542:	08 95       	ret
    2544:	11 f4       	brne	.+4      	; 0x254a <__mulsf3_pse+0xb0>
    2546:	0e f4       	brtc	.+2      	; 0x254a <__mulsf3_pse+0xb0>
    2548:	4b cf       	rjmp	.-362    	; 0x23e0 <__fp_nan>
    254a:	3e c0       	rjmp	.+124    	; 0x25c8 <__fp_mpack>

0000254c <sqrt>:
    254c:	73 df       	rcall	.-282    	; 0x2434 <__fp_splitA>
    254e:	d0 f3       	brcs	.-12     	; 0x2544 <__mulsf3_pse+0xaa>
    2550:	99 23       	and	r25, r25
    2552:	d9 f3       	breq	.-10     	; 0x254a <__mulsf3_pse+0xb0>
    2554:	ce f3       	brts	.-14     	; 0x2548 <__mulsf3_pse+0xae>
    2556:	9f 57       	subi	r25, 0x7F	; 127
    2558:	55 0b       	sbc	r21, r21
    255a:	87 ff       	sbrs	r24, 7
    255c:	43 d0       	rcall	.+134    	; 0x25e4 <__fp_norm2>
    255e:	00 24       	eor	r0, r0
    2560:	a0 e6       	ldi	r26, 0x60	; 96
    2562:	40 ea       	ldi	r20, 0xA0	; 160
    2564:	90 01       	movw	r18, r0
    2566:	80 58       	subi	r24, 0x80	; 128
    2568:	56 95       	lsr	r21
    256a:	97 95       	ror	r25
    256c:	28 f4       	brcc	.+10     	; 0x2578 <sqrt+0x2c>
    256e:	80 5c       	subi	r24, 0xC0	; 192
    2570:	66 0f       	add	r22, r22
    2572:	77 1f       	adc	r23, r23
    2574:	88 1f       	adc	r24, r24
    2576:	20 f0       	brcs	.+8      	; 0x2580 <sqrt+0x34>
    2578:	26 17       	cp	r18, r22
    257a:	37 07       	cpc	r19, r23
    257c:	48 07       	cpc	r20, r24
    257e:	30 f4       	brcc	.+12     	; 0x258c <sqrt+0x40>
    2580:	62 1b       	sub	r22, r18
    2582:	73 0b       	sbc	r23, r19
    2584:	84 0b       	sbc	r24, r20
    2586:	20 29       	or	r18, r0
    2588:	31 29       	or	r19, r1
    258a:	4a 2b       	or	r20, r26
    258c:	a6 95       	lsr	r26
    258e:	17 94       	ror	r1
    2590:	07 94       	ror	r0
    2592:	20 25       	eor	r18, r0
    2594:	31 25       	eor	r19, r1
    2596:	4a 27       	eor	r20, r26
    2598:	58 f7       	brcc	.-42     	; 0x2570 <sqrt+0x24>
    259a:	66 0f       	add	r22, r22
    259c:	77 1f       	adc	r23, r23
    259e:	88 1f       	adc	r24, r24
    25a0:	20 f0       	brcs	.+8      	; 0x25aa <sqrt+0x5e>
    25a2:	26 17       	cp	r18, r22
    25a4:	37 07       	cpc	r19, r23
    25a6:	48 07       	cpc	r20, r24
    25a8:	30 f4       	brcc	.+12     	; 0x25b6 <sqrt+0x6a>
    25aa:	62 0b       	sbc	r22, r18
    25ac:	73 0b       	sbc	r23, r19
    25ae:	84 0b       	sbc	r24, r20
    25b0:	20 0d       	add	r18, r0
    25b2:	31 1d       	adc	r19, r1
    25b4:	41 1d       	adc	r20, r1
    25b6:	a0 95       	com	r26
    25b8:	81 f7       	brne	.-32     	; 0x259a <sqrt+0x4e>
    25ba:	b9 01       	movw	r22, r18
    25bc:	84 2f       	mov	r24, r20
    25be:	91 58       	subi	r25, 0x81	; 129
    25c0:	88 0f       	add	r24, r24
    25c2:	96 95       	lsr	r25
    25c4:	87 95       	ror	r24
    25c6:	08 95       	ret

000025c8 <__fp_mpack>:
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	31 f0       	breq	.+12     	; 0x25d8 <__fp_mpack_finite+0xc>

000025cc <__fp_mpack_finite>:
    25cc:	91 50       	subi	r25, 0x01	; 1
    25ce:	20 f4       	brcc	.+8      	; 0x25d8 <__fp_mpack_finite+0xc>
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b7 95       	ror	r27
    25d8:	88 0f       	add	r24, r24
    25da:	91 1d       	adc	r25, r1
    25dc:	96 95       	lsr	r25
    25de:	87 95       	ror	r24
    25e0:	97 f9       	bld	r25, 7
    25e2:	08 95       	ret

000025e4 <__fp_norm2>:
    25e4:	91 50       	subi	r25, 0x01	; 1
    25e6:	50 40       	sbci	r21, 0x00	; 0
    25e8:	66 0f       	add	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	88 1f       	adc	r24, r24
    25ee:	d2 f7       	brpl	.-12     	; 0x25e4 <__fp_norm2>
    25f0:	08 95       	ret

000025f2 <__mulsi3>:
    25f2:	62 9f       	mul	r22, r18
    25f4:	d0 01       	movw	r26, r0
    25f6:	73 9f       	mul	r23, r19
    25f8:	f0 01       	movw	r30, r0
    25fa:	82 9f       	mul	r24, r18
    25fc:	e0 0d       	add	r30, r0
    25fe:	f1 1d       	adc	r31, r1
    2600:	64 9f       	mul	r22, r20
    2602:	e0 0d       	add	r30, r0
    2604:	f1 1d       	adc	r31, r1
    2606:	92 9f       	mul	r25, r18
    2608:	f0 0d       	add	r31, r0
    260a:	83 9f       	mul	r24, r19
    260c:	f0 0d       	add	r31, r0
    260e:	74 9f       	mul	r23, r20
    2610:	f0 0d       	add	r31, r0
    2612:	65 9f       	mul	r22, r21
    2614:	f0 0d       	add	r31, r0
    2616:	99 27       	eor	r25, r25
    2618:	72 9f       	mul	r23, r18
    261a:	b0 0d       	add	r27, r0
    261c:	e1 1d       	adc	r30, r1
    261e:	f9 1f       	adc	r31, r25
    2620:	63 9f       	mul	r22, r19
    2622:	b0 0d       	add	r27, r0
    2624:	e1 1d       	adc	r30, r1
    2626:	f9 1f       	adc	r31, r25
    2628:	bd 01       	movw	r22, r26
    262a:	cf 01       	movw	r24, r30
    262c:	11 24       	eor	r1, r1
    262e:	08 95       	ret

00002630 <__udivmodhi4>:
    2630:	aa 1b       	sub	r26, r26
    2632:	bb 1b       	sub	r27, r27
    2634:	51 e1       	ldi	r21, 0x11	; 17
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <__udivmodhi4_ep>

00002638 <__udivmodhi4_loop>:
    2638:	aa 1f       	adc	r26, r26
    263a:	bb 1f       	adc	r27, r27
    263c:	a6 17       	cp	r26, r22
    263e:	b7 07       	cpc	r27, r23
    2640:	10 f0       	brcs	.+4      	; 0x2646 <__udivmodhi4_ep>
    2642:	a6 1b       	sub	r26, r22
    2644:	b7 0b       	sbc	r27, r23

00002646 <__udivmodhi4_ep>:
    2646:	88 1f       	adc	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	5a 95       	dec	r21
    264c:	a9 f7       	brne	.-22     	; 0x2638 <__udivmodhi4_loop>
    264e:	80 95       	com	r24
    2650:	90 95       	com	r25
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	08 95       	ret

00002658 <__divmodhi4>:
    2658:	97 fb       	bst	r25, 7
    265a:	09 2e       	mov	r0, r25
    265c:	07 26       	eor	r0, r23
    265e:	0a d0       	rcall	.+20     	; 0x2674 <__divmodhi4_neg1>
    2660:	77 fd       	sbrc	r23, 7
    2662:	04 d0       	rcall	.+8      	; 0x266c <__divmodhi4_neg2>
    2664:	e5 df       	rcall	.-54     	; 0x2630 <__udivmodhi4>
    2666:	06 d0       	rcall	.+12     	; 0x2674 <__divmodhi4_neg1>
    2668:	00 20       	and	r0, r0
    266a:	1a f4       	brpl	.+6      	; 0x2672 <__divmodhi4_exit>

0000266c <__divmodhi4_neg2>:
    266c:	70 95       	com	r23
    266e:	61 95       	neg	r22
    2670:	7f 4f       	sbci	r23, 0xFF	; 255

00002672 <__divmodhi4_exit>:
    2672:	08 95       	ret

00002674 <__divmodhi4_neg1>:
    2674:	f6 f7       	brtc	.-4      	; 0x2672 <__divmodhi4_exit>
    2676:	90 95       	com	r25
    2678:	81 95       	neg	r24
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	08 95       	ret

0000267e <__divmodsi4>:
    267e:	97 fb       	bst	r25, 7
    2680:	09 2e       	mov	r0, r25
    2682:	05 26       	eor	r0, r21
    2684:	0e d0       	rcall	.+28     	; 0x26a2 <__divmodsi4_neg1>
    2686:	57 fd       	sbrc	r21, 7
    2688:	04 d0       	rcall	.+8      	; 0x2692 <__divmodsi4_neg2>
    268a:	14 d0       	rcall	.+40     	; 0x26b4 <__udivmodsi4>
    268c:	0a d0       	rcall	.+20     	; 0x26a2 <__divmodsi4_neg1>
    268e:	00 1c       	adc	r0, r0
    2690:	38 f4       	brcc	.+14     	; 0x26a0 <__divmodsi4_exit>

00002692 <__divmodsi4_neg2>:
    2692:	50 95       	com	r21
    2694:	40 95       	com	r20
    2696:	30 95       	com	r19
    2698:	21 95       	neg	r18
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	4f 4f       	sbci	r20, 0xFF	; 255
    269e:	5f 4f       	sbci	r21, 0xFF	; 255

000026a0 <__divmodsi4_exit>:
    26a0:	08 95       	ret

000026a2 <__divmodsi4_neg1>:
    26a2:	f6 f7       	brtc	.-4      	; 0x26a0 <__divmodsi4_exit>
    26a4:	90 95       	com	r25
    26a6:	80 95       	com	r24
    26a8:	70 95       	com	r23
    26aa:	61 95       	neg	r22
    26ac:	7f 4f       	sbci	r23, 0xFF	; 255
    26ae:	8f 4f       	sbci	r24, 0xFF	; 255
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	08 95       	ret

000026b4 <__udivmodsi4>:
    26b4:	a1 e2       	ldi	r26, 0x21	; 33
    26b6:	1a 2e       	mov	r1, r26
    26b8:	aa 1b       	sub	r26, r26
    26ba:	bb 1b       	sub	r27, r27
    26bc:	fd 01       	movw	r30, r26
    26be:	0d c0       	rjmp	.+26     	; 0x26da <__udivmodsi4_ep>

000026c0 <__udivmodsi4_loop>:
    26c0:	aa 1f       	adc	r26, r26
    26c2:	bb 1f       	adc	r27, r27
    26c4:	ee 1f       	adc	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	a2 17       	cp	r26, r18
    26ca:	b3 07       	cpc	r27, r19
    26cc:	e4 07       	cpc	r30, r20
    26ce:	f5 07       	cpc	r31, r21
    26d0:	20 f0       	brcs	.+8      	; 0x26da <__udivmodsi4_ep>
    26d2:	a2 1b       	sub	r26, r18
    26d4:	b3 0b       	sbc	r27, r19
    26d6:	e4 0b       	sbc	r30, r20
    26d8:	f5 0b       	sbc	r31, r21

000026da <__udivmodsi4_ep>:
    26da:	66 1f       	adc	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	88 1f       	adc	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	1a 94       	dec	r1
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <__udivmodsi4_loop>
    26e6:	60 95       	com	r22
    26e8:	70 95       	com	r23
    26ea:	80 95       	com	r24
    26ec:	90 95       	com	r25
    26ee:	9b 01       	movw	r18, r22
    26f0:	ac 01       	movw	r20, r24
    26f2:	bd 01       	movw	r22, r26
    26f4:	cf 01       	movw	r24, r30
    26f6:	08 95       	ret

000026f8 <__eerd_word_m168>:
    26f8:	a8 e1       	ldi	r26, 0x18	; 24
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	42 e0       	ldi	r20, 0x02	; 2
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__eerd_blraw_m168>

00002704 <__eewr_word_m168>:
    2704:	0e 94 97 13 	call	0x272e	; 0x272e <__eewr_byte_m168>
    2708:	27 2f       	mov	r18, r23
    270a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__eewr_r18_m168>

0000270e <__eerd_block_m168>:
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22

00002712 <__eerd_blraw_m168>:
    2712:	fc 01       	movw	r30, r24
    2714:	f9 99       	sbic	0x1f, 1	; 31
    2716:	fe cf       	rjmp	.-4      	; 0x2714 <__eerd_blraw_m168+0x2>
    2718:	06 c0       	rjmp	.+12     	; 0x2726 <__eerd_blraw_m168+0x14>
    271a:	f2 bd       	out	0x22, r31	; 34
    271c:	e1 bd       	out	0x21, r30	; 33
    271e:	f8 9a       	sbi	0x1f, 0	; 31
    2720:	31 96       	adiw	r30, 0x01	; 1
    2722:	00 b4       	in	r0, 0x20	; 32
    2724:	0d 92       	st	X+, r0
    2726:	41 50       	subi	r20, 0x01	; 1
    2728:	50 40       	sbci	r21, 0x00	; 0
    272a:	b8 f7       	brcc	.-18     	; 0x271a <__eerd_blraw_m168+0x8>
    272c:	08 95       	ret

0000272e <__eewr_byte_m168>:
    272e:	26 2f       	mov	r18, r22

00002730 <__eewr_r18_m168>:
    2730:	f9 99       	sbic	0x1f, 1	; 31
    2732:	fe cf       	rjmp	.-4      	; 0x2730 <__eewr_r18_m168>
    2734:	1f ba       	out	0x1f, r1	; 31
    2736:	92 bd       	out	0x22, r25	; 34
    2738:	81 bd       	out	0x21, r24	; 33
    273a:	20 bd       	out	0x20, r18	; 32
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	fa 9a       	sbi	0x1f, 2	; 31
    2742:	f9 9a       	sbi	0x1f, 1	; 31
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	08 95       	ret

0000274a <_exit>:
    274a:	f8 94       	cli

0000274c <__stop_program>:
    274c:	ff cf       	rjmp	.-2      	; 0x274c <__stop_program>
