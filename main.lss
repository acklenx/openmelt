
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00002560  00002614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002560  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800146  00800146  0000265a  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  0000265a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000071e  00000000  00000000  00002686  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d26  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c6  00000000  00000000  00003aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d84  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00004a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e8  00000000  00000000  000051ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000056b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_7>
      20:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_8>
      24:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e6       	ldi	r30, 0x60	; 96
      7c:	f5 e2       	ldi	r31, 0x25	; 37
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 34       	cpi	r26, 0x46	; 70
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e4       	ldi	r26, 0x46	; 70
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3d       	cpi	r26, 0xD2	; 210
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <main>
      9e:	0c 94 ae 12 	jmp	0x255c	; 0x255c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <config_mode>:


}

void config_mode(void)
{
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
	

	//basic tracking adjustment code (is under 50%)
	if (config_mode_throttle_percent < 50)
      ba:	a0 90 be 01 	lds	r10, 0x01BE
      be:	b0 90 bf 01 	lds	r11, 0x01BF
      c2:	c0 90 c0 01 	lds	r12, 0x01C0
      c6:	d0 90 c1 01 	lds	r13, 0x01C1
      ca:	c6 01       	movw	r24, r12
      cc:	b5 01       	movw	r22, r10
      ce:	20 e0       	ldi	r18, 0x00	; 0
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	48 e4       	ldi	r20, 0x48	; 72
      d4:	52 e4       	ldi	r21, 0x42	; 66
      d6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
      da:	88 23       	and	r24, r24
      dc:	0c f0       	brlt	.+2      	; 0xe0 <config_mode+0x3a>
      de:	b7 c0       	rjmp	.+366    	; 0x24e <config_mode+0x1a8>
	{
	
		flashy_led = 0;			//flashy LED off unless something is changing
      e0:	10 92 af 01 	sts	0x01AF, r1
      e4:	10 92 ae 01 	sts	0x01AE, r1
		//flashy LED gets turned off to indicate change
		if ( leftright > (heading_center + heading_leftthresh) ) {tracking_comp = tracking_comp + (tracking_comp * 0.003); flashy_led = 1;}
      e8:	20 91 9a 01 	lds	r18, 0x019A
      ec:	30 91 9b 01 	lds	r19, 0x019B
      f0:	40 91 9c 01 	lds	r20, 0x019C
      f4:	50 91 9d 01 	lds	r21, 0x019D
      f8:	c0 91 16 01 	lds	r28, 0x0116
      fc:	d0 91 17 01 	lds	r29, 0x0117
     100:	80 91 18 01 	lds	r24, 0x0118
     104:	90 91 19 01 	lds	r25, 0x0119
     108:	8c 0f       	add	r24, r28
     10a:	9d 1f       	adc	r25, r29
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	82 17       	cp	r24, r18
     116:	93 07       	cpc	r25, r19
     118:	a4 07       	cpc	r26, r20
     11a:	b5 07       	cpc	r27, r21
     11c:	24 f5       	brge	.+72     	; 0x166 <config_mode+0xc0>
     11e:	e0 90 38 01 	lds	r14, 0x0138
     122:	f0 90 39 01 	lds	r15, 0x0139
     126:	00 91 3a 01 	lds	r16, 0x013A
     12a:	10 91 3b 01 	lds	r17, 0x013B
     12e:	c8 01       	movw	r24, r16
     130:	b7 01       	movw	r22, r14
     132:	26 ea       	ldi	r18, 0xA6	; 166
     134:	3b e9       	ldi	r19, 0x9B	; 155
     136:	44 e4       	ldi	r20, 0x44	; 68
     138:	5b e3       	ldi	r21, 0x3B	; 59
     13a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
     142:	c8 01       	movw	r24, r16
     144:	b7 01       	movw	r22, r14
     146:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
     14a:	60 93 38 01 	sts	0x0138, r22
     14e:	70 93 39 01 	sts	0x0139, r23
     152:	80 93 3a 01 	sts	0x013A, r24
     156:	90 93 3b 01 	sts	0x013B, r25
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	90 93 af 01 	sts	0x01AF, r25
     162:	80 93 ae 01 	sts	0x01AE, r24
		if ( leftright < (heading_center + heading_rightthresh) ) {tracking_comp = tracking_comp - (tracking_comp * 0.003); flashy_led = 1;}	
     166:	20 91 9a 01 	lds	r18, 0x019A
     16a:	30 91 9b 01 	lds	r19, 0x019B
     16e:	40 91 9c 01 	lds	r20, 0x019C
     172:	50 91 9d 01 	lds	r21, 0x019D
     176:	80 91 1a 01 	lds	r24, 0x011A
     17a:	90 91 1b 01 	lds	r25, 0x011B
     17e:	c8 0f       	add	r28, r24
     180:	d9 1f       	adc	r29, r25
     182:	ce 01       	movw	r24, r28
     184:	aa 27       	eor	r26, r26
     186:	97 fd       	sbrc	r25, 7
     188:	a0 95       	com	r26
     18a:	ba 2f       	mov	r27, r26
     18c:	28 17       	cp	r18, r24
     18e:	39 07       	cpc	r19, r25
     190:	4a 07       	cpc	r20, r26
     192:	5b 07       	cpc	r21, r27
     194:	24 f5       	brge	.+72     	; 0x1de <config_mode+0x138>
     196:	e0 90 38 01 	lds	r14, 0x0138
     19a:	f0 90 39 01 	lds	r15, 0x0139
     19e:	00 91 3a 01 	lds	r16, 0x013A
     1a2:	10 91 3b 01 	lds	r17, 0x013B
     1a6:	c8 01       	movw	r24, r16
     1a8:	b7 01       	movw	r22, r14
     1aa:	26 ea       	ldi	r18, 0xA6	; 166
     1ac:	3b e9       	ldi	r19, 0x9B	; 155
     1ae:	44 e4       	ldi	r20, 0x44	; 68
     1b0:	5b eb       	ldi	r21, 0xBB	; 187
     1b2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
     1c2:	60 93 38 01 	sts	0x0138, r22
     1c6:	70 93 39 01 	sts	0x0139, r23
     1ca:	80 93 3a 01 	sts	0x013A, r24
     1ce:	90 93 3b 01 	sts	0x013B, r25
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	90 93 af 01 	sts	0x01AF, r25
     1da:	80 93 ae 01 	sts	0x01AE, r24

		if (tracking_comp < 0.1) tracking_comp = 0.1;
     1de:	60 91 38 01 	lds	r22, 0x0138
     1e2:	70 91 39 01 	lds	r23, 0x0139
     1e6:	80 91 3a 01 	lds	r24, 0x013A
     1ea:	90 91 3b 01 	lds	r25, 0x013B
     1ee:	2d ec       	ldi	r18, 0xCD	; 205
     1f0:	3c ec       	ldi	r19, 0xCC	; 204
     1f2:	4c ec       	ldi	r20, 0xCC	; 204
     1f4:	5d e3       	ldi	r21, 0x3D	; 61
     1f6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	64 f4       	brge	.+24     	; 0x216 <config_mode+0x170>
     1fe:	8d ec       	ldi	r24, 0xCD	; 205
     200:	9c ec       	ldi	r25, 0xCC	; 204
     202:	ac ec       	ldi	r26, 0xCC	; 204
     204:	bd e3       	ldi	r27, 0x3D	; 61
     206:	80 93 38 01 	sts	0x0138, r24
     20a:	90 93 39 01 	sts	0x0139, r25
     20e:	a0 93 3a 01 	sts	0x013A, r26
     212:	b0 93 3b 01 	sts	0x013B, r27
		if (tracking_comp > 10) tracking_comp = 10;
     216:	60 91 38 01 	lds	r22, 0x0138
     21a:	70 91 39 01 	lds	r23, 0x0139
     21e:	80 91 3a 01 	lds	r24, 0x013A
     222:	90 91 3b 01 	lds	r25, 0x013B
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e2       	ldi	r20, 0x20	; 32
     22c:	51 e4       	ldi	r21, 0x41	; 65
     22e:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     232:	18 16       	cp	r1, r24
     234:	64 f4       	brge	.+24     	; 0x24e <config_mode+0x1a8>
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e2       	ldi	r26, 0x20	; 32
     23c:	b1 e4       	ldi	r27, 0x41	; 65
     23e:	80 93 38 01 	sts	0x0138, r24
     242:	90 93 39 01 	sts	0x0139, r25
     246:	a0 93 3a 01 	sts	0x013A, r26
     24a:	b0 93 3b 01 	sts	0x013B, r27
	}	


	//heading adjustment code (when throttle is between 50% and 90%)
	if (config_mode_throttle_percent >= 50 && config_mode_throttle_percent < 90)
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	48 e4       	ldi	r20, 0x48	; 72
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     25e:	88 23       	and	r24, r24
     260:	0c f4       	brge	.+2      	; 0x264 <config_mode+0x1be>
     262:	b0 c0       	rjmp	.+352    	; 0x3c4 <config_mode+0x31e>
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	44 eb       	ldi	r20, 0xB4	; 180
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     274:	88 23       	and	r24, r24
     276:	0c f0       	brlt	.+2      	; 0x27a <config_mode+0x1d4>
     278:	a5 c0       	rjmp	.+330    	; 0x3c4 <config_mode+0x31e>
	{
		
		flashy_led = 1;				//pulse the LED to indicate we're in heading adjustment
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 af 01 	sts	0x01AF, r25
     282:	80 93 ae 01 	sts	0x01AE, r24
		if ( leftright > (heading_center + heading_leftthresh) ) {led_adjust = led_adjust + 1; flashy_led = 0;}   //flashing gets turned back off to indicate change
     286:	20 91 9a 01 	lds	r18, 0x019A
     28a:	30 91 9b 01 	lds	r19, 0x019B
     28e:	40 91 9c 01 	lds	r20, 0x019C
     292:	50 91 9d 01 	lds	r21, 0x019D
     296:	c0 91 16 01 	lds	r28, 0x0116
     29a:	d0 91 17 01 	lds	r29, 0x0117
     29e:	80 91 18 01 	lds	r24, 0x0118
     2a2:	90 91 19 01 	lds	r25, 0x0119
     2a6:	8c 0f       	add	r24, r28
     2a8:	9d 1f       	adc	r25, r29
     2aa:	aa 27       	eor	r26, r26
     2ac:	97 fd       	sbrc	r25, 7
     2ae:	a0 95       	com	r26
     2b0:	ba 2f       	mov	r27, r26
     2b2:	82 17       	cp	r24, r18
     2b4:	93 07       	cpc	r25, r19
     2b6:	a4 07       	cpc	r26, r20
     2b8:	b5 07       	cpc	r27, r21
     2ba:	d4 f4       	brge	.+52     	; 0x2f0 <config_mode+0x24a>
     2bc:	60 91 3c 01 	lds	r22, 0x013C
     2c0:	70 91 3d 01 	lds	r23, 0x013D
     2c4:	80 91 3e 01 	lds	r24, 0x013E
     2c8:	90 91 3f 01 	lds	r25, 0x013F
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
     2d8:	60 93 3c 01 	sts	0x013C, r22
     2dc:	70 93 3d 01 	sts	0x013D, r23
     2e0:	80 93 3e 01 	sts	0x013E, r24
     2e4:	90 93 3f 01 	sts	0x013F, r25
     2e8:	10 92 af 01 	sts	0x01AF, r1
     2ec:	10 92 ae 01 	sts	0x01AE, r1
		if ( leftright < (heading_center + heading_rightthresh) ) {led_adjust = led_adjust - 1; flashy_led = 0;}
     2f0:	20 91 9a 01 	lds	r18, 0x019A
     2f4:	30 91 9b 01 	lds	r19, 0x019B
     2f8:	40 91 9c 01 	lds	r20, 0x019C
     2fc:	50 91 9d 01 	lds	r21, 0x019D
     300:	80 91 1a 01 	lds	r24, 0x011A
     304:	90 91 1b 01 	lds	r25, 0x011B
     308:	c8 0f       	add	r28, r24
     30a:	d9 1f       	adc	r29, r25
     30c:	ce 01       	movw	r24, r28
     30e:	aa 27       	eor	r26, r26
     310:	97 fd       	sbrc	r25, 7
     312:	a0 95       	com	r26
     314:	ba 2f       	mov	r27, r26
     316:	28 17       	cp	r18, r24
     318:	39 07       	cpc	r19, r25
     31a:	4a 07       	cpc	r20, r26
     31c:	5b 07       	cpc	r21, r27
     31e:	d4 f4       	brge	.+52     	; 0x354 <config_mode+0x2ae>
     320:	60 91 3c 01 	lds	r22, 0x013C
     324:	70 91 3d 01 	lds	r23, 0x013D
     328:	80 91 3e 01 	lds	r24, 0x013E
     32c:	90 91 3f 01 	lds	r25, 0x013F
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
     33c:	60 93 3c 01 	sts	0x013C, r22
     340:	70 93 3d 01 	sts	0x013D, r23
     344:	80 93 3e 01 	sts	0x013E, r24
     348:	90 93 3f 01 	sts	0x013F, r25
     34c:	10 92 af 01 	sts	0x01AF, r1
     350:	10 92 ae 01 	sts	0x01AE, r1

		if (led_adjust < 0) led_adjust = 100;
     354:	60 91 3c 01 	lds	r22, 0x013C
     358:	70 91 3d 01 	lds	r23, 0x013D
     35c:	80 91 3e 01 	lds	r24, 0x013E
     360:	90 91 3f 01 	lds	r25, 0x013F
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     370:	88 23       	and	r24, r24
     372:	64 f4       	brge	.+24     	; 0x38c <config_mode+0x2e6>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a8 ec       	ldi	r26, 0xC8	; 200
     37a:	b2 e4       	ldi	r27, 0x42	; 66
     37c:	80 93 3c 01 	sts	0x013C, r24
     380:	90 93 3d 01 	sts	0x013D, r25
     384:	a0 93 3e 01 	sts	0x013E, r26
     388:	b0 93 3f 01 	sts	0x013F, r27
		if (led_adjust > 100) led_adjust = 0;
     38c:	60 91 3c 01 	lds	r22, 0x013C
     390:	70 91 3d 01 	lds	r23, 0x013D
     394:	80 91 3e 01 	lds	r24, 0x013E
     398:	90 91 3f 01 	lds	r25, 0x013F
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	48 ec       	ldi	r20, 0xC8	; 200
     3a2:	52 e4       	ldi	r21, 0x42	; 66
     3a4:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	64 f4       	brge	.+24     	; 0x3c4 <config_mode+0x31e>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	80 93 3c 01 	sts	0x013C, r24
     3b8:	90 93 3d 01 	sts	0x013D, r25
     3bc:	a0 93 3e 01 	sts	0x013E, r26
     3c0:	b0 93 3f 01 	sts	0x013F, r27
	}	
	

	//if we're above 90% throttle - the bot is effectively in normal drive mode - with throttle locked at 50%

}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	08 95       	ret

000003da <motors_brake>:

void motors_brake(void)
{

	//actual braking only supported for PWM
	if (use_pwm_esc == 0)
     3da:	80 91 04 01 	lds	r24, 0x0104
     3de:	90 91 05 01 	lds	r25, 0x0105
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	19 f4       	brne	.+6      	; 0x3ec <motors_brake+0x12>
	{
		set_motor1_pin_off();
     3e6:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     3e8:	5c 98       	cbi	0x0b, 4	; 11
     3ea:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	31 f4       	brne	.+12     	; 0x3fc <motors_brake+0x22>
	{
        OCR2A = pwm_throttle_brake;
     3f0:	80 91 06 01 	lds	r24, 0x0106
     3f4:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_brake;
     3f8:	80 93 b4 00 	sts	0x00B4, r24
     3fc:	08 95       	ret

000003fe <setup>:

void adc_init(void)
{
 
  	// Free running Mode
	ADCSRB = 0x00;
     3fe:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     402:	86 e8       	ldi	r24, 0x86	; 134
     404:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	80 93 7c 00 	sts	0x007C, r24

{

	adc_init();		//init the ADC...

	set_throttle_pin_as_input();
     40e:	20 98       	cbi	0x04, 0	; 4
	set_leftright_pin_as_input();  
     410:	21 98       	cbi	0x04, 1	; 4
	set_forwardback_pin_as_input();
     412:	22 98       	cbi	0x04, 2	; 4
  
	set_accel_data_pin_as_input();
     414:	3c 98       	cbi	0x07, 4	; 7
	
	set_accelpower_pin_as_output();
     416:	50 9a       	sbi	0x0a, 0	; 10
	set_accelpower_pin_on();								//turn on power for accel (accel is connected to chip for power)
     418:	58 9a       	sbi	0x0b, 0	; 11

	
	set_led_pin_as_output();
     41a:	55 9a       	sbi	0x0a, 5	; 10

	set_motor1_pin_as_output();
     41c:	52 9a       	sbi	0x0a, 2	; 10
	set_motor2_pin_as_output();
     41e:	54 9a       	sbi	0x0a, 4	; 10
	
	set_led_on();						                    //turn on signal LED before timers so it comes on immediately
     420:	5d 9a       	sbi	0x0b, 5	; 11
	

	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 6b 00 	sts	0x006B, r24
	PCICR = 1<<PCIE0; 
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 68 00 	sts	0x0068, r24



void SetupTimer1(void)
{
	TCCR1A = 0;                               //mode = 0
     42e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	80 93 81 00 	sts	0x0081, r24
	//enable pin change interrupt - any changes on PORTB trigger interrupt
	PCMSK0 = 0xFF;
	PCICR = 1<<PCIE0; 
	  
	SetupTimer1();   //fire up timer1 (2 bytes) - accessed via TCNT1 variable
	if (use_pwm_esc == 1) SetupTimer2();   //for "software" PWM
     438:	80 91 04 01 	lds	r24, 0x0104
     43c:	90 91 05 01 	lds	r25, 0x0105
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	31 f4       	brne	.+12     	; 0x450 <setup+0x52>
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
}

void SetupTimer2(void)
{
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A) | _BV(OCIE2B);  //enable interrupt on overflow  + enable interrupts for comparator
     444:	87 e0       	ldi	r24, 0x07	; 7
     446:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = _BV(CS22) | _BV(CS21);	//prescaler to 256
     44a:	86 e0       	ldi	r24, 0x06	; 6
     44c:	80 93 b1 00 	sts	0x00B1, r24
	PCICR = 1<<PCIE0; 
	  
	SetupTimer1();   //fire up timer1 (2 bytes) - accessed via TCNT1 variable
	if (use_pwm_esc == 1) SetupTimer2();   //for "software" PWM

	sei();  //enable interrupts to allow updating of transmitter data
     450:	78 94       	sei


	motors_brake();   //make sure those motors are off...
     452:	0e 94 ed 01 	call	0x3da	; 0x3da <motors_brake>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
	{
		toggle_led();
     45e:	e0 e2       	ldi	r30, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     460:	68 e8       	ldi	r22, 0x88	; 136
     462:	73 e1       	ldi	r23, 0x13	; 19
     464:	0a c0       	rjmp	.+20     	; 0x47a <setup+0x7c>
     466:	8b b1       	in	r24, 0x0b	; 11
     468:	8e 27       	eor	r24, r30
     46a:	8b b9       	out	0x0b, r24	; 11
     46c:	cb 01       	movw	r24, r22
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <setup+0x70>
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	4f 4f       	sbci	r20, 0xFF	; 255
     478:	5f 4f       	sbci	r21, 0xFF	; 255

	motors_brake();   //make sure those motors are off...


	//flash LED on boot	(fast - so visible if spinning)
	for (x = 1; x <= 250; x++)
     47a:	2b 3f       	cpi	r18, 0xFB	; 251
     47c:	31 05       	cpc	r19, r1
     47e:	41 05       	cpc	r20, r1
     480:	51 05       	cpc	r21, r1
     482:	8c f3       	brlt	.-30     	; 0x466 <setup+0x68>
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0


	//flash LED on boot (slower)
	for (x = 1; x <= 6; x++)
	{
		toggle_led();
     48c:	a0 e2       	ldi	r26, 0x20	; 32
     48e:	64 ef       	ldi	r22, 0xF4	; 244
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	0e c0       	rjmp	.+28     	; 0x4b0 <setup+0xb2>
     494:	8b b1       	in	r24, 0x0b	; 11
     496:	8a 27       	eor	r24, r26
     498:	8b b9       	out	0x0b, r24	; 11
     49a:	80 ed       	ldi	r24, 0xD0	; 208
     49c:	97 e0       	ldi	r25, 0x07	; 7
     49e:	fb 01       	movw	r30, r22
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <setup+0xa2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a6:	d9 f7       	brne	.-10     	; 0x49e <setup+0xa0>
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	4f 4f       	sbci	r20, 0xFF	; 255
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
		_delay_ms(1);
	}


	//flash LED on boot (slower)
	for (x = 1; x <= 6; x++)
     4b0:	27 30       	cpi	r18, 0x07	; 7
     4b2:	31 05       	cpc	r19, r1
     4b4:	41 05       	cpc	r20, r1
     4b6:	51 05       	cpc	r21, r1
     4b8:	6c f3       	brlt	.-38     	; 0x494 <setup+0x96>
     4ba:	20 93 70 01 	sts	0x0170, r18
     4be:	30 93 71 01 	sts	0x0171, r19
     4c2:	40 93 72 01 	sts	0x0172, r20
     4c6:	50 93 73 01 	sts	0x0173, r21
	{
		toggle_led();
		_delay_ms(200);
	}

	throttle = 0;   //make sure throttle is off at boot
     4ca:	10 92 92 01 	sts	0x0192, r1
     4ce:	10 92 93 01 	sts	0x0193, r1
     4d2:	10 92 94 01 	sts	0x0194, r1
     4d6:	10 92 95 01 	sts	0x0195, r1
	



}
     4da:	08 95       	ret

000004dc <motors_low>:

void motors_low(void)
{

	//if not pwm - motors totally off
	if (use_pwm_esc == 0)
     4dc:	80 91 04 01 	lds	r24, 0x0104
     4e0:	90 91 05 01 	lds	r25, 0x0105
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	19 f4       	brne	.+6      	; 0x4ee <motors_low+0x12>
	{
		set_motor1_pin_off();
     4e8:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_off();
     4ea:	5c 98       	cbi	0x0b, 4	; 11
     4ec:	08 95       	ret
	}
	
	//send low signal if pwm (still providing some motor power)
	if (use_pwm_esc == 1)
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	39 f4       	brne	.+14     	; 0x500 <__stack+0x1>
	{
        OCR2A = pwm_throttle_low;
     4f2:	80 91 08 01 	lds	r24, 0x0108
     4f6:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = 95;
     4fa:	8f e5       	ldi	r24, 0x5F	; 95
     4fc:	80 93 b4 00 	sts	0x00B4, r24
     500:	08 95       	ret

00000502 <motors_left>:


void motors_left(void)
{

	if (use_pwm_esc == 0)
     502:	80 91 04 01 	lds	r24, 0x0104
     506:	90 91 05 01 	lds	r25, 0x0105
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	19 f4       	brne	.+6      	; 0x514 <motors_left+0x12>
	{
		set_motor1_pin_on();
     50e:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_on();
     510:	5c 9a       	sbi	0x0b, 4	; 11
     512:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	31 f4       	brne	.+12     	; 0x524 <motors_left+0x22>
	{
        OCR2A = pwm_throttle_high;
     518:	80 91 0a 01 	lds	r24, 0x010A
     51c:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_high;
     520:	80 93 b4 00 	sts	0x00B4, r24
     524:	08 95       	ret

00000526 <motor1_on>:


void motor1_on(void)
{

	if (use_pwm_esc == 0)
     526:	80 91 04 01 	lds	r24, 0x0104
     52a:	90 91 05 01 	lds	r25, 0x0105
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	19 f4       	brne	.+6      	; 0x538 <motor1_on+0x12>
	{
		set_motor1_pin_on();
     532:	5a 9a       	sbi	0x0b, 2	; 11
		set_motor2_pin_off();
     534:	5c 98       	cbi	0x0b, 4	; 11
     536:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	39 f4       	brne	.+14     	; 0x54a <motor1_on+0x24>
	{
        OCR2A = pwm_throttle_high;
     53c:	80 91 0a 01 	lds	r24, 0x010A
     540:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = 95;
     544:	8f e5       	ldi	r24, 0x5F	; 95
     546:	80 93 b4 00 	sts	0x00B4, r24
     54a:	08 95       	ret

0000054c <motor2_on>:

}

void motor2_on(void)
{
	if (use_pwm_esc == 0)
     54c:	80 91 04 01 	lds	r24, 0x0104
     550:	90 91 05 01 	lds	r25, 0x0105
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	19 f4       	brne	.+6      	; 0x55e <motor2_on+0x12>
	{
		set_motor1_pin_off();
     558:	5a 98       	cbi	0x0b, 2	; 11
		set_motor2_pin_on();
     55a:	5c 9a       	sbi	0x0b, 4	; 11
     55c:	08 95       	ret
	}
	
	if (use_pwm_esc == 1)
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	41 f4       	brne	.+16     	; 0x572 <motor2_on+0x26>
	{
        OCR2A = pwm_throttle_low;
     562:	80 91 08 01 	lds	r24, 0x0108
     566:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = pwm_throttle_high;
     56a:	80 91 0a 01 	lds	r24, 0x010A
     56e:	80 93 b4 00 	sts	0x00B4, r24
     572:	08 95       	ret

00000574 <do_spin_180>:
}


	
void do_spin_180(int spin_cycle)
{	
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
		{
			led_is_on_now = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	48 2e       	mov	r4, r24
     59a:	51 2c       	mov	r5, r1
     59c:	88 c1       	rjmp	.+784    	; 0x8ae <do_spin_180+0x33a>
{	

	while (TCNT1 < half_spin_time)
	{
	
		if (TCNT1 < begin_brake) motors_left();				//full power if we haven't entered braking yet
     59e:	60 91 84 00 	lds	r22, 0x0084
     5a2:	70 91 85 00 	lds	r23, 0x0085
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     5ae:	20 91 ce 01 	lds	r18, 0x01CE
     5b2:	30 91 cf 01 	lds	r19, 0x01CF
     5b6:	40 91 d0 01 	lds	r20, 0x01D0
     5ba:	50 91 d1 01 	lds	r21, 0x01D1
     5be:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     5c2:	88 23       	and	r24, r24
     5c4:	14 f4       	brge	.+4      	; 0x5ca <do_spin_180+0x56>
     5c6:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>
		if (TCNT1 > end_brake) motors_left();					//full power if we're after braking
     5ca:	60 91 84 00 	lds	r22, 0x0084
     5ce:	70 91 85 00 	lds	r23, 0x0085
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     5da:	20 91 9e 01 	lds	r18, 0x019E
     5de:	30 91 9f 01 	lds	r19, 0x019F
     5e2:	40 91 a0 01 	lds	r20, 0x01A0
     5e6:	50 91 a1 01 	lds	r21, 0x01A1
     5ea:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	14 f4       	brge	.+4      	; 0x5f6 <do_spin_180+0x82>
     5f2:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>

		led_ref = TCNT1 + led_hold_over;						//provides continuous LED tracking between the two do_spin loops
     5f6:	60 91 84 00 	lds	r22, 0x0084
     5fa:	70 91 85 00 	lds	r23, 0x0085
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	20 91 74 01 	lds	r18, 0x0174
     606:	30 91 75 01 	lds	r19, 0x0175
     60a:	40 91 76 01 	lds	r20, 0x0176
     60e:	50 91 77 01 	lds	r21, 0x0177
     612:	62 0f       	add	r22, r18
     614:	73 1f       	adc	r23, r19
     616:	84 1f       	adc	r24, r20
     618:	95 1f       	adc	r25, r21
     61a:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
     61e:	60 93 7e 01 	sts	0x017E, r22
     622:	70 93 7f 01 	sts	0x017F, r23
     626:	80 93 80 01 	sts	0x0180, r24
     62a:	90 93 81 01 	sts	0x0181, r25

		if ( TCNT1 > begin_brake && TCNT1 < end_brake )         //switch to single motor as soon as entering braking cycle
     62e:	60 91 84 00 	lds	r22, 0x0084
     632:	70 91 85 00 	lds	r23, 0x0085
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     63e:	20 91 ce 01 	lds	r18, 0x01CE
     642:	30 91 cf 01 	lds	r19, 0x01CF
     646:	40 91 d0 01 	lds	r20, 0x01D0
     64a:	50 91 d1 01 	lds	r21, 0x01D1
     64e:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     652:	18 16       	cp	r1, r24
     654:	0c f0       	brlt	.+2      	; 0x658 <do_spin_180+0xe4>
     656:	65 c0       	rjmp	.+202    	; 0x722 <do_spin_180+0x1ae>
     658:	60 91 84 00 	lds	r22, 0x0084
     65c:	70 91 85 00 	lds	r23, 0x0085
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     668:	20 91 9e 01 	lds	r18, 0x019E
     66c:	30 91 9f 01 	lds	r19, 0x019F
     670:	40 91 a0 01 	lds	r20, 0x01A0
     674:	50 91 a1 01 	lds	r21, 0x01A1
     678:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	0c f0       	brlt	.+2      	; 0x682 <do_spin_180+0x10e>
     680:	50 c0       	rjmp	.+160    	; 0x722 <do_spin_180+0x1ae>
		{
			//if sitting still
			if ( forward == 0 && backward == 0 )
     682:	80 91 ac 01 	lds	r24, 0x01AC
     686:	90 91 ad 01 	lds	r25, 0x01AD
     68a:	89 2b       	or	r24, r25
     68c:	41 f5       	brne	.+80     	; 0x6de <do_spin_180+0x16a>
     68e:	80 91 bc 01 	lds	r24, 0x01BC
     692:	90 91 bd 01 	lds	r25, 0x01BD
     696:	89 2b       	or	r24, r25
     698:	11 f5       	brne	.+68     	; 0x6de <do_spin_180+0x16a>
			{
				if ( alternate_motor_cycle == 0 )  //alternates which motor is used each cycle if sitting still
     69a:	80 91 4a 01 	lds	r24, 0x014A
     69e:	90 91 4b 01 	lds	r25, 0x014B
     6a2:	89 2b       	or	r24, r25
     6a4:	59 f4       	brne	.+22     	; 0x6bc <do_spin_180+0x148>
				{	
					if (spin_cycle == 1) motor1_on();
     6a6:	c1 30       	cpi	r28, 0x01	; 1
     6a8:	d1 05       	cpc	r29, r1
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <do_spin_180+0x13e>
     6ac:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <do_spin_180+0x148>
					if (spin_cycle == 2) motor2_on();
     6b2:	c2 30       	cpi	r28, 0x02	; 2
     6b4:	d1 05       	cpc	r29, r1
     6b6:	11 f4       	brne	.+4      	; 0x6bc <do_spin_180+0x148>
     6b8:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
				}

				if ( alternate_motor_cycle == 1 )
     6bc:	80 91 4a 01 	lds	r24, 0x014A
     6c0:	90 91 4b 01 	lds	r25, 0x014B
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	59 f4       	brne	.+22     	; 0x6de <do_spin_180+0x16a>
				{	
					if (spin_cycle == 1) motor2_on();
     6c8:	c1 30       	cpi	r28, 0x01	; 1
     6ca:	d1 05       	cpc	r29, r1
     6cc:	19 f4       	brne	.+6      	; 0x6d4 <do_spin_180+0x160>
     6ce:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <do_spin_180+0x16a>
					if (spin_cycle == 2) motor1_on();
     6d4:	c2 30       	cpi	r28, 0x02	; 2
     6d6:	d1 05       	cpc	r29, r1
     6d8:	11 f4       	brne	.+4      	; 0x6de <do_spin_180+0x16a>
     6da:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
				}

			}

			//if ( going forward / back set motors appropriately (this is "where it happens")
			if ( forward == 1)
     6de:	80 91 ac 01 	lds	r24, 0x01AC
     6e2:	90 91 ad 01 	lds	r25, 0x01AD
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	59 f4       	brne	.+22     	; 0x700 <do_spin_180+0x18c>
			{	
				if (spin_cycle == 1) motor1_on();
     6ea:	c1 30       	cpi	r28, 0x01	; 1
     6ec:	d1 05       	cpc	r29, r1
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <do_spin_180+0x182>
     6f0:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <do_spin_180+0x18c>
				if (spin_cycle == 2) motor2_on();
     6f6:	c2 30       	cpi	r28, 0x02	; 2
     6f8:	d1 05       	cpc	r29, r1
     6fa:	11 f4       	brne	.+4      	; 0x700 <do_spin_180+0x18c>
     6fc:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
			}

			if ( backward == 1)
     700:	80 91 bc 01 	lds	r24, 0x01BC
     704:	90 91 bd 01 	lds	r25, 0x01BD
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	59 f4       	brne	.+22     	; 0x722 <do_spin_180+0x1ae>
			{	
				if (spin_cycle == 1) motor2_on();
     70c:	c1 30       	cpi	r28, 0x01	; 1
     70e:	d1 05       	cpc	r29, r1
     710:	19 f4       	brne	.+6      	; 0x718 <do_spin_180+0x1a4>
     712:	0e 94 a6 02 	call	0x54c	; 0x54c <motor2_on>
     716:	05 c0       	rjmp	.+10     	; 0x722 <do_spin_180+0x1ae>
				if (spin_cycle == 2) motor1_on();
     718:	c2 30       	cpi	r28, 0x02	; 2
     71a:	d1 05       	cpc	r29, r1
     71c:	11 f4       	brne	.+4      	; 0x722 <do_spin_180+0x1ae>
     71e:	0e 94 93 02 	call	0x526	; 0x526 <motor1_on>
			}
				
		}

		if ( TCNT1 > end_brake ) motors_left();                 //if we hit end of brake cycle - go to full power
     722:	60 91 84 00 	lds	r22, 0x0084
     726:	70 91 85 00 	lds	r23, 0x0085
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     732:	20 91 9e 01 	lds	r18, 0x019E
     736:	30 91 9f 01 	lds	r19, 0x019F
     73a:	40 91 a0 01 	lds	r20, 0x01A0
     73e:	50 91 a1 01 	lds	r21, 0x01A1
     742:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	14 f4       	brge	.+4      	; 0x74e <do_spin_180+0x1da>
     74a:	0e 94 81 02 	call	0x502	; 0x502 <motors_left>

		if ( TCNT1 < power_kill_part1 ) motors_low();            //if throttle is less that 100% - kill power at appropriate time
     74e:	60 91 84 00 	lds	r22, 0x0084
     752:	70 91 85 00 	lds	r23, 0x0085
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     75e:	20 91 8e 01 	lds	r18, 0x018E
     762:	30 91 8f 01 	lds	r19, 0x018F
     766:	40 91 90 01 	lds	r20, 0x0190
     76a:	50 91 91 01 	lds	r21, 0x0191
     76e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     772:	88 23       	and	r24, r24
     774:	14 f4       	brge	.+4      	; 0x77a <do_spin_180+0x206>
     776:	0e 94 6e 02 	call	0x4dc	; 0x4dc <motors_low>
		if ( TCNT1 > power_kill_part2 ) motors_low();            //if throttle is less that 100% - kill power at appropriate time
     77a:	60 91 84 00 	lds	r22, 0x0084
     77e:	70 91 85 00 	lds	r23, 0x0085
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     78a:	20 91 86 01 	lds	r18, 0x0186
     78e:	30 91 87 01 	lds	r19, 0x0187
     792:	40 91 88 01 	lds	r20, 0x0188
     796:	50 91 89 01 	lds	r21, 0x0189
     79a:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     79e:	18 16       	cp	r1, r24
     7a0:	14 f4       	brge	.+4      	; 0x7a6 <do_spin_180+0x232>
     7a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <motors_low>

		
		//following code handles turning on and off LED (little confusing)
		
		if (led_on > led_off)
     7a6:	a0 90 a2 01 	lds	r10, 0x01A2
     7aa:	b0 90 a3 01 	lds	r11, 0x01A3
     7ae:	c0 90 a4 01 	lds	r12, 0x01A4
     7b2:	d0 90 a5 01 	lds	r13, 0x01A5
     7b6:	60 90 c4 01 	lds	r6, 0x01C4
     7ba:	70 90 c5 01 	lds	r7, 0x01C5
     7be:	80 90 c6 01 	lds	r8, 0x01C6
     7c2:	90 90 c7 01 	lds	r9, 0x01C7
     7c6:	c6 01       	movw	r24, r12
     7c8:	b5 01       	movw	r22, r10
     7ca:	a4 01       	movw	r20, r8
     7cc:	93 01       	movw	r18, r6
     7ce:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	24 f5       	brge	.+72     	; 0x81e <do_spin_180+0x2aa>
		{
			led_is_on_now = 1;
     7d6:	50 92 7d 01 	sts	0x017D, r5
     7da:	40 92 7c 01 	sts	0x017C, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     7de:	e0 90 7e 01 	lds	r14, 0x017E
     7e2:	f0 90 7f 01 	lds	r15, 0x017F
     7e6:	00 91 80 01 	lds	r16, 0x0180
     7ea:	10 91 81 01 	lds	r17, 0x0181
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 01       	movw	r22, r14
     7f2:	a4 01       	movw	r20, r8
     7f4:	93 01       	movw	r18, r6
     7f6:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     7fa:	18 16       	cp	r1, r24
     7fc:	24 f4       	brge	.+8      	; 0x806 <do_spin_180+0x292>
     7fe:	10 92 7d 01 	sts	0x017D, r1
     802:	10 92 7c 01 	sts	0x017C, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	a6 01       	movw	r20, r12
     80c:	95 01       	movw	r18, r10
     80e:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	24 f4       	brge	.+8      	; 0x81e <do_spin_180+0x2aa>
     816:	50 92 7d 01 	sts	0x017D, r5
     81a:	40 92 7c 01 	sts	0x017C, r4
		}


		if (led_off > led_on)
     81e:	c4 01       	movw	r24, r8
     820:	b3 01       	movw	r22, r6
     822:	a6 01       	movw	r20, r12
     824:	95 01       	movw	r18, r10
     826:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     82a:	18 16       	cp	r1, r24
     82c:	24 f5       	brge	.+72     	; 0x876 <do_spin_180+0x302>
		{
		
			led_is_on_now = 0;
     82e:	10 92 7d 01 	sts	0x017D, r1
     832:	10 92 7c 01 	sts	0x017C, r1
			if ( led_ref > led_on ) led_is_on_now = 1;
     836:	e0 90 7e 01 	lds	r14, 0x017E
     83a:	f0 90 7f 01 	lds	r15, 0x017F
     83e:	00 91 80 01 	lds	r16, 0x0180
     842:	10 91 81 01 	lds	r17, 0x0181
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	a6 01       	movw	r20, r12
     84c:	95 01       	movw	r18, r10
     84e:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	24 f4       	brge	.+8      	; 0x85e <do_spin_180+0x2ea>
     856:	50 92 7d 01 	sts	0x017D, r5
     85a:	40 92 7c 01 	sts	0x017C, r4
			if ( led_ref > led_off ) led_is_on_now = 0;
     85e:	c8 01       	movw	r24, r16
     860:	b7 01       	movw	r22, r14
     862:	a4 01       	movw	r20, r8
     864:	93 01       	movw	r18, r6
     866:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     86a:	18 16       	cp	r1, r24
     86c:	24 f4       	brge	.+8      	; 0x876 <do_spin_180+0x302>
     86e:	10 92 7d 01 	sts	0x017D, r1
     872:	10 92 7c 01 	sts	0x017C, r1
		
		}
	
	
		if ( led_is_on_now == 1 )
     876:	80 91 7c 01 	lds	r24, 0x017C
     87a:	90 91 7d 01 	lds	r25, 0x017D
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	91 05       	cpc	r25, r1
     882:	91 f4       	brne	.+36     	; 0x8a8 <do_spin_180+0x334>
		{
			//flash the LED if we're in flashy mode - otherwise it's just on
			if ( flashy_led == 1 )
     884:	80 91 ae 01 	lds	r24, 0x01AE
     888:	90 91 af 01 	lds	r25, 0x01AF
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	51 f4       	brne	.+20     	; 0x8a4 <do_spin_180+0x330>
			{
				
				if ((TCNT1 / 160) % 2 == 0) set_led_on(); else set_led_off();
     890:	80 91 84 00 	lds	r24, 0x0084
     894:	90 91 85 00 	lds	r25, 0x0085
     898:	60 ea       	ldi	r22, 0xA0	; 160
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	0e 94 21 12 	call	0x2442	; 0x2442 <__udivmodhi4>
     8a0:	60 fd       	sbrc	r22, 0
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <do_spin_180+0x338>
			}
			else
			{
				set_led_on();
     8a4:	5d 9a       	sbi	0x0b, 5	; 11
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <do_spin_180+0x33a>
			}
		}

		if ( led_is_on_now == 0 )
     8a8:	89 2b       	or	r24, r25
     8aa:	09 f4       	brne	.+2      	; 0x8ae <do_spin_180+0x33a>
		{
			set_led_off();
     8ac:	5d 98       	cbi	0x0b, 5	; 11

	
void do_spin_180(int spin_cycle)
{	

	while (TCNT1 < half_spin_time)
     8ae:	60 91 84 00 	lds	r22, 0x0084
     8b2:	70 91 85 00 	lds	r23, 0x0085
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     8be:	20 91 96 01 	lds	r18, 0x0196
     8c2:	30 91 97 01 	lds	r19, 0x0197
     8c6:	40 91 98 01 	lds	r20, 0x0198
     8ca:	50 91 99 01 	lds	r21, 0x0199
     8ce:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     8d2:	87 fd       	sbrc	r24, 7
     8d4:	64 ce       	rjmp	.-824    	; 0x59e <do_spin_180+0x2a>
			set_led_off();
		}
		
	}

}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	9f 90       	pop	r9
     8ec:	8f 90       	pop	r8
     8ee:	7f 90       	pop	r7
     8f0:	6f 90       	pop	r6
     8f2:	5f 90       	pop	r5
     8f4:	4f 90       	pop	r4
     8f6:	08 95       	ret

000008f8 <reset_rc>:


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     8f8:	10 92 56 01 	sts	0x0156, r1
     8fc:	10 92 57 01 	sts	0x0157, r1
     900:	10 92 58 01 	sts	0x0158, r1
     904:	10 92 59 01 	sts	0x0159, r1
	leftright_hightime = 0;
     908:	10 92 5e 01 	sts	0x015E, r1
     90c:	10 92 5f 01 	sts	0x015F, r1
     910:	10 92 60 01 	sts	0x0160, r1
     914:	10 92 61 01 	sts	0x0161, r1
	forwardback_hightime = 0;
     918:	10 92 5a 01 	sts	0x015A, r1
     91c:	10 92 5b 01 	sts	0x015B, r1
     920:	10 92 5c 01 	sts	0x015C, r1
     924:	10 92 5d 01 	sts	0x015D, r1

}
     928:	08 95       	ret

0000092a <throttle_change>:

//updates RC channels any time specified pin goes high/low
//following 3 routines are all identical except for channels and some safety code in throttle_change (not easy to consolidate them)
void throttle_change(void)
{
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
	
	//did the pin go HIGH? - then note time
	if ( throttle_pin != 0 ) throttle_hightime = TCNT1;    
     932:	18 9b       	sbis	0x03, 0	; 3
     934:	0e c0       	rjmp	.+28     	; 0x952 <throttle_change+0x28>
     936:	80 91 84 00 	lds	r24, 0x0084
     93a:	90 91 85 00 	lds	r25, 0x0085
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	80 93 56 01 	sts	0x0156, r24
     946:	90 93 57 01 	sts	0x0157, r25
     94a:	a0 93 58 01 	sts	0x0158, r26
     94e:	b0 93 59 01 	sts	0x0159, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if ( throttle_pin == 0 && throttle_hightime != 0 && TCNT1 > throttle_hightime)
     952:	18 99       	sbic	0x03, 0	; 3
     954:	59 c0       	rjmp	.+178    	; 0xa08 <throttle_change+0xde>
     956:	e0 90 56 01 	lds	r14, 0x0156
     95a:	f0 90 57 01 	lds	r15, 0x0157
     95e:	00 91 58 01 	lds	r16, 0x0158
     962:	10 91 59 01 	lds	r17, 0x0159
     966:	e1 14       	cp	r14, r1
     968:	f1 04       	cpc	r15, r1
     96a:	01 05       	cpc	r16, r1
     96c:	11 05       	cpc	r17, r1
     96e:	09 f4       	brne	.+2      	; 0x972 <throttle_change+0x48>
     970:	4b c0       	rjmp	.+150    	; 0xa08 <throttle_change+0xde>
     972:	80 91 84 00 	lds	r24, 0x0084
     976:	90 91 85 00 	lds	r25, 0x0085
     97a:	a0 e0       	ldi	r26, 0x00	; 0
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e8 16       	cp	r14, r24
     980:	f9 06       	cpc	r15, r25
     982:	0a 07       	cpc	r16, r26
     984:	1b 07       	cpc	r17, r27
     986:	0c f0       	brlt	.+2      	; 0x98a <throttle_change+0x60>
     988:	3f c0       	rjmp	.+126    	; 0xa08 <throttle_change+0xde>
	{		
		throttle = ((throttle * 85) + ((TCNT1 - throttle_hightime) * 15)) / 100;		//smoothed RC data
     98a:	60 91 92 01 	lds	r22, 0x0192
     98e:	70 91 93 01 	lds	r23, 0x0193
     992:	80 91 94 01 	lds	r24, 0x0194
     996:	90 91 95 01 	lds	r25, 0x0195
     99a:	20 91 84 00 	lds	r18, 0x0084
     99e:	30 91 85 00 	lds	r19, 0x0085
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	2e 19       	sub	r18, r14
     9a8:	3f 09       	sbc	r19, r15
     9aa:	40 0b       	sbc	r20, r16
     9ac:	51 0b       	sbc	r21, r17
     9ae:	79 01       	movw	r14, r18
     9b0:	8a 01       	movw	r16, r20
     9b2:	e4 e0       	ldi	r30, 0x04	; 4
     9b4:	ee 0c       	add	r14, r14
     9b6:	ff 1c       	adc	r15, r15
     9b8:	00 1f       	adc	r16, r16
     9ba:	11 1f       	adc	r17, r17
     9bc:	ea 95       	dec	r30
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <throttle_change+0x8a>
     9c0:	e2 1a       	sub	r14, r18
     9c2:	f3 0a       	sbc	r15, r19
     9c4:	04 0b       	sbc	r16, r20
     9c6:	15 0b       	sbc	r17, r21
     9c8:	25 e5       	ldi	r18, 0x55	; 85
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 02 12 	call	0x2404	; 0x2404 <__mulsi3>
     9d4:	e6 0e       	add	r14, r22
     9d6:	f7 1e       	adc	r15, r23
     9d8:	08 1f       	adc	r16, r24
     9da:	19 1f       	adc	r17, r25
     9dc:	c8 01       	movw	r24, r16
     9de:	b7 01       	movw	r22, r14
     9e0:	24 e6       	ldi	r18, 0x64	; 100
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	0e 94 48 12 	call	0x2490	; 0x2490 <__divmodsi4>
     9ec:	c9 01       	movw	r24, r18
     9ee:	da 01       	movw	r26, r20
     9f0:	80 93 92 01 	sts	0x0192, r24
     9f4:	90 93 93 01 	sts	0x0193, r25
     9f8:	a0 93 94 01 	sts	0x0194, r26
     9fc:	b0 93 95 01 	sts	0x0195, r27
																						//throttle is highly smoothed to help prevent accidental spin-down
		rotations_since_throttle_was_set = 0;					 //note that throttle was successfully set (for safety)
     a00:	10 92 4f 01 	sts	0x014F, r1
     a04:	10 92 4e 01 	sts	0x014E, r1
	}


	throttle_hilow = throttle_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     a08:	83 b1       	in	r24, 0x03	; 3
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	90 93 cb 01 	sts	0x01CB, r25
     a14:	80 93 ca 01 	sts	0x01CA, r24
	
}
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <leftright_change>:

void leftright_change(void)
{
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
	//did the pin go HIGH? - then note time
	if (leftright_pin != 0 ) leftright_hightime = TCNT1;    
     a2a:	19 9b       	sbis	0x03, 1	; 3
     a2c:	0e c0       	rjmp	.+28     	; 0xa4a <leftright_change+0x28>
     a2e:	80 91 84 00 	lds	r24, 0x0084
     a32:	90 91 85 00 	lds	r25, 0x0085
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	80 93 5e 01 	sts	0x015E, r24
     a3e:	90 93 5f 01 	sts	0x015F, r25
     a42:	a0 93 60 01 	sts	0x0160, r26
     a46:	b0 93 61 01 	sts	0x0161, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (leftright_pin == 0 && leftright_hightime != 0 && TCNT1 > leftright_hightime)
     a4a:	19 99       	sbic	0x03, 1	; 3
     a4c:	3e c0       	rjmp	.+124    	; 0xaca <leftright_change+0xa8>
     a4e:	e0 90 5e 01 	lds	r14, 0x015E
     a52:	f0 90 5f 01 	lds	r15, 0x015F
     a56:	00 91 60 01 	lds	r16, 0x0160
     a5a:	10 91 61 01 	lds	r17, 0x0161
     a5e:	e1 14       	cp	r14, r1
     a60:	f1 04       	cpc	r15, r1
     a62:	01 05       	cpc	r16, r1
     a64:	11 05       	cpc	r17, r1
     a66:	89 f1       	breq	.+98     	; 0xaca <leftright_change+0xa8>
     a68:	80 91 84 00 	lds	r24, 0x0084
     a6c:	90 91 85 00 	lds	r25, 0x0085
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e8 16       	cp	r14, r24
     a76:	f9 06       	cpc	r15, r25
     a78:	0a 07       	cpc	r16, r26
     a7a:	1b 07       	cpc	r17, r27
     a7c:	34 f5       	brge	.+76     	; 0xaca <leftright_change+0xa8>
	{
			leftright = ((leftright * 50) + ((TCNT1 - leftright_hightime) * 50)) / 100;		//smoothed RC data
     a7e:	20 91 9a 01 	lds	r18, 0x019A
     a82:	30 91 9b 01 	lds	r19, 0x019B
     a86:	40 91 9c 01 	lds	r20, 0x019C
     a8a:	50 91 9d 01 	lds	r21, 0x019D
     a8e:	60 91 84 00 	lds	r22, 0x0084
     a92:	70 91 85 00 	lds	r23, 0x0085
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	6e 19       	sub	r22, r14
     a9c:	7f 09       	sbc	r23, r15
     a9e:	80 0b       	sbc	r24, r16
     aa0:	91 0b       	sbc	r25, r17
     aa2:	62 0f       	add	r22, r18
     aa4:	73 1f       	adc	r23, r19
     aa6:	84 1f       	adc	r24, r20
     aa8:	95 1f       	adc	r25, r21
     aaa:	22 e0       	ldi	r18, 0x02	; 2
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	0e 94 48 12 	call	0x2490	; 0x2490 <__divmodsi4>
     ab6:	c9 01       	movw	r24, r18
     ab8:	da 01       	movw	r26, r20
     aba:	80 93 9a 01 	sts	0x019A, r24
     abe:	90 93 9b 01 	sts	0x019B, r25
     ac2:	a0 93 9c 01 	sts	0x019C, r26
     ac6:	b0 93 9d 01 	sts	0x019D, r27
	}
  
	leftright_hilow = leftright_pin;                                  //make note of pin state for reference next time interrupt is triggered...	
     aca:	83 b1       	in	r24, 0x03	; 3
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	82 70       	andi	r24, 0x02	; 2
     ad0:	90 70       	andi	r25, 0x00	; 0
     ad2:	90 93 67 01 	sts	0x0167, r25
     ad6:	80 93 66 01 	sts	0x0166, r24
		
}
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <forwardback_change>:

void forwardback_change(void)
{
	//did the pin go HIGH? - then note time
	if (forwardback_pin != 0 ) forwardback_hightime = TCNT1;    
     ae4:	1a 9b       	sbis	0x03, 2	; 3
     ae6:	0e c0       	rjmp	.+28     	; 0xb04 <forwardback_change+0x20>
     ae8:	80 91 84 00 	lds	r24, 0x0084
     aec:	90 91 85 00 	lds	r25, 0x0085
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	80 93 5a 01 	sts	0x015A, r24
     af8:	90 93 5b 01 	sts	0x015B, r25
     afc:	a0 93 5c 01 	sts	0x015C, r26
     b00:	b0 93 5d 01 	sts	0x015D, r27

	//did the pin go low? - then set timer value as value for this channel / if timer has overflowed then ignore
	if (forwardback_pin == 0 && forwardback_hightime != 0 && TCNT1 > forwardback_hightime) forwardback = TCNT1 - forwardback_hightime;      
     b04:	1a 99       	sbic	0x03, 2	; 3
     b06:	2a c0       	rjmp	.+84     	; 0xb5c <forwardback_change+0x78>
     b08:	20 91 5a 01 	lds	r18, 0x015A
     b0c:	30 91 5b 01 	lds	r19, 0x015B
     b10:	40 91 5c 01 	lds	r20, 0x015C
     b14:	50 91 5d 01 	lds	r21, 0x015D
     b18:	21 15       	cp	r18, r1
     b1a:	31 05       	cpc	r19, r1
     b1c:	41 05       	cpc	r20, r1
     b1e:	51 05       	cpc	r21, r1
     b20:	e9 f0       	breq	.+58     	; 0xb5c <forwardback_change+0x78>
     b22:	80 91 84 00 	lds	r24, 0x0084
     b26:	90 91 85 00 	lds	r25, 0x0085
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	28 17       	cp	r18, r24
     b30:	39 07       	cpc	r19, r25
     b32:	4a 07       	cpc	r20, r26
     b34:	5b 07       	cpc	r21, r27
     b36:	94 f4       	brge	.+36     	; 0xb5c <forwardback_change+0x78>
     b38:	80 91 84 00 	lds	r24, 0x0084
     b3c:	90 91 85 00 	lds	r25, 0x0085
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	82 1b       	sub	r24, r18
     b46:	93 0b       	sbc	r25, r19
     b48:	a4 0b       	sbc	r26, r20
     b4a:	b5 0b       	sbc	r27, r21
     b4c:	80 93 78 01 	sts	0x0178, r24
     b50:	90 93 79 01 	sts	0x0179, r25
     b54:	a0 93 7a 01 	sts	0x017A, r26
     b58:	b0 93 7b 01 	sts	0x017B, r27
  
	forwardback_hilow = forwardback_pin;                               //make note of pin state for reference next time interrupt is triggered...
     b5c:	83 b1       	in	r24, 0x03	; 3
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	84 70       	andi	r24, 0x04	; 4
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	90 93 c3 01 	sts	0x01C3, r25
     b68:	80 93 c2 01 	sts	0x01C2, r24

}
     b6c:	08 95       	ret

00000b6e <__vector_3>:


//main interrupt handler - is called any time any ports on PORTB change

ISR (PCINT0_vect)
{
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
	
	//check all RC channels to see if they were updated
	if (throttle_hilow != throttle_pin) throttle_change();
     b90:	83 b1       	in	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	81 70       	andi	r24, 0x01	; 1
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	20 91 ca 01 	lds	r18, 0x01CA
     b9c:	30 91 cb 01 	lds	r19, 0x01CB
     ba0:	28 17       	cp	r18, r24
     ba2:	39 07       	cpc	r19, r25
     ba4:	11 f0       	breq	.+4      	; 0xbaa <__vector_3+0x3c>
     ba6:	0e 94 95 04 	call	0x92a	; 0x92a <throttle_change>
	if (leftright_hilow != leftright_pin) leftright_change();
     baa:	83 b1       	in	r24, 0x03	; 3
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	82 70       	andi	r24, 0x02	; 2
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	20 91 66 01 	lds	r18, 0x0166
     bb6:	30 91 67 01 	lds	r19, 0x0167
     bba:	28 17       	cp	r18, r24
     bbc:	39 07       	cpc	r19, r25
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <__vector_3+0x56>
     bc0:	0e 94 11 05 	call	0xa22	; 0xa22 <leftright_change>
	if (forwardback_hilow != forwardback_pin) forwardback_change();
     bc4:	83 b1       	in	r24, 0x03	; 3
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	84 70       	andi	r24, 0x04	; 4
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	20 91 c2 01 	lds	r18, 0x01C2
     bd0:	30 91 c3 01 	lds	r19, 0x01C3
     bd4:	28 17       	cp	r18, r24
     bd6:	39 07       	cpc	r19, r25
     bd8:	11 f0       	breq	.+4      	; 0xbde <__vector_3+0x70>
     bda:	0e 94 72 05 	call	0xae4	; 0xae4 <forwardback_change>

}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <SetupTimer1>:



void SetupTimer1(void)
{
	TCCR1A = 0;                               //mode = 0
     c00:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0<<CS12 | 1<<CS11 | 1<<CS10;    //prescaler = 64
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	80 93 81 00 	sts	0x0081, r24
}
     c0a:	08 95       	ret

00000c0c <SetupTimer2>:

void SetupTimer2(void)
{
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A) | _BV(OCIE2B);  //enable interrupt on overflow  + enable interrupts for comparator
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = _BV(CS22) | _BV(CS21);	//prescaler to 256
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	80 93 b1 00 	sts	0x00B1, r24
 }
     c18:	08 95       	ret

00000c1a <__vector_9>:

ISR(TIMER2_OVF_vect)    //sets both motor pins high on timer 2 overflow if using PWM
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
	set_motor1_pin_on();
     c24:	5a 9a       	sbi	0x0b, 2	; 11
	set_motor2_pin_on();
     c26:	5c 9a       	sbi	0x0b, 4	; 11
}
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_7>:

ISR(TIMER2_COMPA_vect)	//set motor1 low on compare match
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
	set_motor1_pin_off();
     c3c:	5a 98       	cbi	0x0b, 2	; 11
}
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <__vector_8>:

ISR(TIMER2_COMPB_vect)	//set motor2 low on compare match
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
	set_motor2_pin_off();
     c52:	5c 98       	cbi	0x0b, 4	; 11
}
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <adc_init>:

void adc_init(void)
{
 
  	// Free running Mode
	ADCSRB = 0x00;
     c5e:	10 92 7b 00 	sts	0x007B, r1

   // Set ADCSRA Register in ATMega168
   ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     c62:	86 e8       	ldi	r24, 0x86	; 134
     c64:	80 93 7a 00 	sts	0x007A, r24

   // Set ADMUX Register in ATMega168
   ADMUX=ADC_PORT_FOR_ACCEL;	
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	80 93 7c 00 	sts	0x007C, r24
}
     c6e:	08 95       	ret

00000c70 <read_adc>:
{

    unsigned int adc_data;
	
	// Start conversion by setting ADSC on ADCSRA Register
	  ADCSRA |= (1<<ADSC);
     c70:	80 91 7a 00 	lds	r24, 0x007A
     c74:	80 64       	ori	r24, 0x40	; 64
     c76:	80 93 7a 00 	sts	0x007A, r24

	// wait until convertion complete ADSC=0 -> Complete
    while (ADCSRA & (1<<ADSC));
     c7a:	80 91 7a 00 	lds	r24, 0x007A
     c7e:	86 fd       	sbrc	r24, 6
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <read_adc+0xa>
	    
	adc_data = ADCL;   
     c82:	90 91 78 00 	lds	r25, 0x0078

	//shift from low level to high level ADC, from 8bit to 10bit

	adc_data += (ADCH<<8);	  
     c86:	80 91 79 00 	lds	r24, 0x0079
     c8a:	38 2f       	mov	r19, r24
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	29 0f       	add	r18, r25
     c90:	31 1d       	adc	r19, r1

	return (adc_data);

}
     c92:	c9 01       	movw	r24, r18
     c94:	08 95       	ret

00000c96 <get_config_constants>:


}

void get_config_constants(void)
{
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
     c9e:	10 92 41 01 	sts	0x0141, r1
     ca2:	10 92 40 01 	sts	0x0140, r1
	for (x = 0; x < 20; x++)
     ca6:	10 92 70 01 	sts	0x0170, r1
     caa:	10 92 71 01 	sts	0x0171, r1
     cae:	10 92 72 01 	sts	0x0172, r1
     cb2:	10 92 73 01 	sts	0x0173, r1
     cb6:	00 e5       	ldi	r16, 0x50	; 80
     cb8:	13 ec       	ldi	r17, 0xC3	; 195
     cba:	1e c0       	rjmp	.+60     	; 0xcf8 <get_config_constants+0x62>
	{
		base_accel = base_accel + read_adc();               				//get accel data
     cbc:	0e 94 38 06 	call	0xc70	; 0xc70 <read_adc>
     cc0:	c8 0f       	add	r28, r24
     cc2:	d9 1f       	adc	r29, r25
     cc4:	d0 93 41 01 	sts	0x0141, r29
     cc8:	c0 93 40 01 	sts	0x0140, r28
     ccc:	c8 01       	movw	r24, r16
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <get_config_constants+0x38>
{

	// sample and set the accelerometer base value (average a bunch of samples)

	base_accel = 0;
	for (x = 0; x < 20; x++)
     cd2:	80 91 70 01 	lds	r24, 0x0170
     cd6:	90 91 71 01 	lds	r25, 0x0171
     cda:	a0 91 72 01 	lds	r26, 0x0172
     cde:	b0 91 73 01 	lds	r27, 0x0173
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	80 93 70 01 	sts	0x0170, r24
     cec:	90 93 71 01 	sts	0x0171, r25
     cf0:	a0 93 72 01 	sts	0x0172, r26
     cf4:	b0 93 73 01 	sts	0x0173, r27
     cf8:	80 91 70 01 	lds	r24, 0x0170
     cfc:	90 91 71 01 	lds	r25, 0x0171
     d00:	a0 91 72 01 	lds	r26, 0x0172
     d04:	b0 91 73 01 	lds	r27, 0x0173
     d08:	c0 91 40 01 	lds	r28, 0x0140
     d0c:	d0 91 41 01 	lds	r29, 0x0141
     d10:	44 97       	sbiw	r24, 0x14	; 20
     d12:	a1 05       	cpc	r26, r1
     d14:	b1 05       	cpc	r27, r1
     d16:	94 f2       	brlt	.-92     	; 0xcbc <get_config_constants+0x26>
	{
		base_accel = base_accel + read_adc();               				//get accel data
		_delay_ms(10);
	}
	base_accel = base_accel / 20;
     d18:	ce 01       	movw	r24, r28
     d1a:	64 e1       	ldi	r22, 0x14	; 20
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	0e 94 35 12 	call	0x246a	; 0x246a <__divmodhi4>
     d22:	70 93 41 01 	sts	0x0141, r23
     d26:	60 93 40 01 	sts	0x0140, r22
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	c4 ef       	ldi	r28, 0xF4	; 244
     d38:	d1 e0       	ldi	r29, 0x01	; 1
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <get_config_constants+0xd0>
	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
	{
		heading_center = heading_center + leftright;               		
     d3c:	80 91 9a 01 	lds	r24, 0x019A
     d40:	90 91 9b 01 	lds	r25, 0x019B
     d44:	a0 91 9c 01 	lds	r26, 0x019C
     d48:	b0 91 9d 01 	lds	r27, 0x019D
     d4c:	68 0f       	add	r22, r24
     d4e:	79 1f       	adc	r23, r25
     d50:	88 ec       	ldi	r24, 0xC8	; 200
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fe 01       	movw	r30, r28
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <get_config_constants+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	d9 f7       	brne	.-10     	; 0xd54 <get_config_constants+0xbe>
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	4f 4f       	sbci	r20, 0xFF	; 255
     d64:	5f 4f       	sbci	r21, 0xFF	; 255


	// sample and set the left / right center value for the control stick (average a bunch of samples)

	heading_center = 0;
	for (x = 0; x < 20; x++)
     d66:	24 31       	cpi	r18, 0x14	; 20
     d68:	31 05       	cpc	r19, r1
     d6a:	41 05       	cpc	r20, r1
     d6c:	51 05       	cpc	r21, r1
     d6e:	34 f3       	brlt	.-52     	; 0xd3c <get_config_constants+0xa6>
     d70:	20 93 70 01 	sts	0x0170, r18
     d74:	30 93 71 01 	sts	0x0171, r19
     d78:	40 93 72 01 	sts	0x0172, r20
     d7c:	50 93 73 01 	sts	0x0173, r21
	{
		heading_center = heading_center + leftright;               		
		_delay_ms(20);

	}
	heading_center = heading_center / 20;
     d80:	cb 01       	movw	r24, r22
     d82:	64 e1       	ldi	r22, 0x14	; 20
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	0e 94 35 12 	call	0x246a	; 0x246a <__divmodhi4>
     d8a:	70 93 17 01 	sts	0x0117, r23
     d8e:	60 93 16 01 	sts	0x0116, r22


}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <main_calculations>:



void main_calculations(void)

{
     d9c:	2f 92       	push	r2
     d9e:	3f 92       	push	r3
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <main_calculations+0x26>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <main_calculations+0x28>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <main_calculations+0x2a>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62


void reset_rc(void)
{
	//this routine voids existing RC data - used if timer is going to get reset
	throttle_hightime = 0;
     dca:	10 92 56 01 	sts	0x0156, r1
     dce:	10 92 57 01 	sts	0x0157, r1
     dd2:	10 92 58 01 	sts	0x0158, r1
     dd6:	10 92 59 01 	sts	0x0159, r1
	leftright_hightime = 0;
     dda:	10 92 5e 01 	sts	0x015E, r1
     dde:	10 92 5f 01 	sts	0x015F, r1
     de2:	10 92 60 01 	sts	0x0160, r1
     de6:	10 92 61 01 	sts	0x0161, r1
	forwardback_hightime = 0;
     dea:	10 92 5a 01 	sts	0x015A, r1
     dee:	10 92 5b 01 	sts	0x015B, r1
     df2:	10 92 5c 01 	sts	0x015C, r1
     df6:	10 92 5d 01 	sts	0x015D, r1

{

	reset_rc();				//resets existing RC data - must get called before timer1 is reset to prevent errors
	
	TCNT1 = 0;				//resets timer (used to track for time spent outside motor drive loop)
     dfa:	10 92 85 00 	sts	0x0085, r1
     dfe:	10 92 84 00 	sts	0x0084, r1
							//by resetting timer at beginning over each call to main_calculations - the calc time effectively gets included in the do_spin loop


	//Are we going forward or backwards?
	if ( forwardback > (forwardback_center + forwardback_forwardthresh)) forward = 1; else forward = 0;
     e02:	20 91 78 01 	lds	r18, 0x0178
     e06:	30 91 79 01 	lds	r19, 0x0179
     e0a:	40 91 7a 01 	lds	r20, 0x017A
     e0e:	50 91 7b 01 	lds	r21, 0x017B
     e12:	60 91 10 01 	lds	r22, 0x0110
     e16:	70 91 11 01 	lds	r23, 0x0111
     e1a:	80 91 12 01 	lds	r24, 0x0112
     e1e:	90 91 13 01 	lds	r25, 0x0113
     e22:	86 0f       	add	r24, r22
     e24:	97 1f       	adc	r25, r23
     e26:	aa 27       	eor	r26, r26
     e28:	97 fd       	sbrc	r25, 7
     e2a:	a0 95       	com	r26
     e2c:	ba 2f       	mov	r27, r26
     e2e:	82 17       	cp	r24, r18
     e30:	93 07       	cpc	r25, r19
     e32:	a4 07       	cpc	r26, r20
     e34:	b5 07       	cpc	r27, r21
     e36:	3c f4       	brge	.+14     	; 0xe46 <main_calculations+0xaa>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	90 93 ad 01 	sts	0x01AD, r25
     e40:	80 93 ac 01 	sts	0x01AC, r24
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <main_calculations+0xb2>
     e46:	10 92 ad 01 	sts	0x01AD, r1
     e4a:	10 92 ac 01 	sts	0x01AC, r1
	if ( forwardback < (forwardback_center + forwardback_backthresh)) backward = 1; else backward = 0;
     e4e:	20 91 78 01 	lds	r18, 0x0178
     e52:	30 91 79 01 	lds	r19, 0x0179
     e56:	40 91 7a 01 	lds	r20, 0x017A
     e5a:	50 91 7b 01 	lds	r21, 0x017B
     e5e:	80 91 14 01 	lds	r24, 0x0114
     e62:	90 91 15 01 	lds	r25, 0x0115
     e66:	68 0f       	add	r22, r24
     e68:	79 1f       	adc	r23, r25
     e6a:	cb 01       	movw	r24, r22
     e6c:	aa 27       	eor	r26, r26
     e6e:	97 fd       	sbrc	r25, 7
     e70:	a0 95       	com	r26
     e72:	ba 2f       	mov	r27, r26
     e74:	28 17       	cp	r18, r24
     e76:	39 07       	cpc	r19, r25
     e78:	4a 07       	cpc	r20, r26
     e7a:	5b 07       	cpc	r21, r27
     e7c:	3c f4       	brge	.+14     	; 0xe8c <main_calculations+0xf0>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 bd 01 	sts	0x01BD, r25
     e86:	80 93 bc 01 	sts	0x01BC, r24
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <main_calculations+0xf8>
     e8c:	10 92 bd 01 	sts	0x01BD, r1
     e90:	10 92 bc 01 	sts	0x01BC, r1

	flashy_led = 0;											//by default LED isn't flashy
     e94:	10 92 af 01 	sts	0x01AF, r1
     e98:	10 92 ae 01 	sts	0x01AE, r1

	accel_raw_data = read_adc();               				//get accel data
     e9c:	0e 94 38 06 	call	0xc70	; 0xc70 <read_adc>
     ea0:	9c 01       	movw	r18, r24
     ea2:	90 93 ab 01 	sts	0x01AB, r25
     ea6:	80 93 aa 01 	sts	0x01AA, r24
	
	accel_read = accel_raw_data;                              //move it over to single in case we want to do floating point
	accel_read = accel_read - base_accel;                     //compensate for base (2.5v) level
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	ca 01       	movw	r24, r20
     eb0:	b9 01       	movw	r22, r18
     eb2:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
     eb6:	7b 01       	movw	r14, r22
     eb8:	8c 01       	movw	r16, r24
     eba:	60 91 40 01 	lds	r22, 0x0140
     ebe:	70 91 41 01 	lds	r23, 0x0141
     ec2:	88 27       	eor	r24, r24
     ec4:	77 fd       	sbrc	r23, 7
     ec6:	80 95       	com	r24
     ec8:	98 2f       	mov	r25, r24
     eca:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	c8 01       	movw	r24, r16
     ed4:	b7 01       	movw	r22, r14
     ed6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
     eda:	60 93 a6 01 	sts	0x01A6, r22
     ede:	70 93 a7 01 	sts	0x01A7, r23
     ee2:	80 93 a8 01 	sts	0x01A8, r24
     ee6:	90 93 a9 01 	sts	0x01A9, r25
	g = accel_read * g_per_adc_increment;                    //convert to g's
     eea:	20 91 2c 01 	lds	r18, 0x012C
     eee:	30 91 2d 01 	lds	r19, 0x012D
     ef2:	40 91 2e 01 	lds	r20, 0x012E
     ef6:	50 91 2f 01 	lds	r21, 0x012F
     efa:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     efe:	3b 01       	movw	r6, r22
     f00:	4c 01       	movw	r8, r24
     f02:	60 93 82 01 	sts	0x0182, r22
     f06:	70 93 83 01 	sts	0x0183, r23
     f0a:	80 93 84 01 	sts	0x0184, r24
     f0e:	90 93 85 01 	sts	0x0185, r25

	rpm = g * 89445;                                //calculate RPM from g's - derived from "G = 0.00001118 * r * RPM^2"
	rpm = rpm / radius;
	rpm = pow(rpm, .5);								
     f12:	20 e8       	ldi	r18, 0x80	; 128
     f14:	32 eb       	ldi	r19, 0xB2	; 178
     f16:	4e ea       	ldi	r20, 0xAE	; 174
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     f1e:	20 91 28 01 	lds	r18, 0x0128
     f22:	30 91 29 01 	lds	r19, 0x0129
     f26:	40 91 2a 01 	lds	r20, 0x012A
     f2a:	50 91 2b 01 	lds	r21, 0x012B
     f2e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
     f32:	0e 94 af 11 	call	0x235e	; 0x235e <sqrt>
     f36:	7b 01       	movw	r14, r22
     f38:	8c 01       	movw	r16, r24
     f3a:	17 01       	movw	r2, r14
     f3c:	28 01       	movw	r4, r16
     f3e:	e0 92 b0 01 	sts	0x01B0, r14
     f42:	f0 92 b1 01 	sts	0x01B1, r15
     f46:	00 93 b2 01 	sts	0x01B2, r16
     f4a:	10 93 b3 01 	sts	0x01B3, r17
	
	if (rpm > max_observed_rpm) max_observed_rpm = rpm;		//update max_observed_rpm if current rpm is higher
     f4e:	60 91 52 01 	lds	r22, 0x0152
     f52:	70 91 53 01 	lds	r23, 0x0153
     f56:	80 91 54 01 	lds	r24, 0x0154
     f5a:	90 91 55 01 	lds	r25, 0x0155
     f5e:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
     f62:	9b 01       	movw	r18, r22
     f64:	ac 01       	movw	r20, r24
     f66:	c8 01       	movw	r24, r16
     f68:	b7 01       	movw	r22, r14
     f6a:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
     f6e:	18 16       	cp	r1, r24
     f70:	64 f4       	brge	.+24     	; 0xf8a <main_calculations+0x1ee>
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__fixsfsi>
     f7a:	60 93 52 01 	sts	0x0152, r22
     f7e:	70 93 53 01 	sts	0x0153, r23
     f82:	80 93 54 01 	sts	0x0154, r24
     f86:	90 93 55 01 	sts	0x0155, r25
	
	full_spin_time_ms = rpm / 60;                                      //convert RPM to duration of each spin in milliseconds
     f8a:	c2 01       	movw	r24, r4
     f8c:	b1 01       	movw	r22, r2
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e7       	ldi	r20, 0x70	; 112
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
     f9a:	60 93 68 01 	sts	0x0168, r22
     f9e:	70 93 69 01 	sts	0x0169, r23
     fa2:	80 93 6a 01 	sts	0x016A, r24
     fa6:	90 93 6b 01 	sts	0x016B, r25
		
	if (full_spin_time_ms == 0) full_spin_time_ms = 1;                          //must prevent any possible division by zero!!!
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	61 f4       	brne	.+24     	; 0xfd2 <main_calculations+0x236>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e8       	ldi	r26, 0x80	; 128
     fc0:	bf e3       	ldi	r27, 0x3F	; 63
     fc2:	80 93 68 01 	sts	0x0168, r24
     fc6:	90 93 69 01 	sts	0x0169, r25
     fca:	a0 93 6a 01 	sts	0x016A, r26
     fce:	b0 93 6b 01 	sts	0x016B, r27
	full_spin_time_ms = 1 / full_spin_time_ms;
	full_spin_time_ms = full_spin_time_ms * 1000;									//seconds to milliseconds

	full_spin_time_ms = full_spin_time_ms * tracking_comp;                      //compensate with user-set tracking adjustment
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	9f e3       	ldi	r25, 0x3F	; 63
     fda:	20 91 68 01 	lds	r18, 0x0168
     fde:	30 91 69 01 	lds	r19, 0x0169
     fe2:	40 91 6a 01 	lds	r20, 0x016A
     fe6:	50 91 6b 01 	lds	r21, 0x016B
     fea:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a e7       	ldi	r20, 0x7A	; 122
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
     ffa:	20 91 38 01 	lds	r18, 0x0138
     ffe:	30 91 39 01 	lds	r19, 0x0139
    1002:	40 91 3a 01 	lds	r20, 0x013A
    1006:	50 91 3b 01 	lds	r21, 0x013B
    100a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	60 93 68 01 	sts	0x0168, r22
    1016:	70 93 69 01 	sts	0x0169, r23
    101a:	80 93 6a 01 	sts	0x016A, r24
    101e:	90 93 6b 01 	sts	0x016B, r25

  
	if ( forward == 1 ) full_spin_time_ms = full_spin_time_ms * forward_comp;   //extra compensation if going forward
    1022:	80 91 ac 01 	lds	r24, 0x01AC
    1026:	90 91 ad 01 	lds	r25, 0x01AD
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	a1 f4       	brne	.+40     	; 0x1056 <main_calculations+0x2ba>
    102e:	ca 01       	movw	r24, r20
    1030:	b9 01       	movw	r22, r18
    1032:	20 91 30 01 	lds	r18, 0x0130
    1036:	30 91 31 01 	lds	r19, 0x0131
    103a:	40 91 32 01 	lds	r20, 0x0132
    103e:	50 91 33 01 	lds	r21, 0x0133
    1042:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1046:	60 93 68 01 	sts	0x0168, r22
    104a:	70 93 69 01 	sts	0x0169, r23
    104e:	80 93 6a 01 	sts	0x016A, r24
    1052:	90 93 6b 01 	sts	0x016B, r25
	if ( backward == 1 ) full_spin_time_ms = full_spin_time_ms * backward_comp; //extra compensation if going backward
    1056:	80 91 bc 01 	lds	r24, 0x01BC
    105a:	90 91 bd 01 	lds	r25, 0x01BD
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	d1 f4       	brne	.+52     	; 0x1096 <main_calculations+0x2fa>
    1062:	60 91 68 01 	lds	r22, 0x0168
    1066:	70 91 69 01 	lds	r23, 0x0169
    106a:	80 91 6a 01 	lds	r24, 0x016A
    106e:	90 91 6b 01 	lds	r25, 0x016B
    1072:	20 91 34 01 	lds	r18, 0x0134
    1076:	30 91 35 01 	lds	r19, 0x0135
    107a:	40 91 36 01 	lds	r20, 0x0136
    107e:	50 91 37 01 	lds	r21, 0x0137
    1082:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1086:	60 93 68 01 	sts	0x0168, r22
    108a:	70 93 69 01 	sts	0x0169, r23
    108e:	80 93 6a 01 	sts	0x016A, r24
    1092:	90 93 6b 01 	sts	0x016B, r25



	//converts throttle reading from remote into percentage
	throttle_percent = ((throttle - throttle_low) * 100) / (throttle_high - throttle_low);
    1096:	60 91 92 01 	lds	r22, 0x0192
    109a:	70 91 93 01 	lds	r23, 0x0193
    109e:	80 91 94 01 	lds	r24, 0x0194
    10a2:	90 91 95 01 	lds	r25, 0x0195
    10a6:	00 91 0c 01 	lds	r16, 0x010C
    10aa:	10 91 0d 01 	lds	r17, 0x010D
    10ae:	98 01       	movw	r18, r16
    10b0:	44 27       	eor	r20, r20
    10b2:	37 fd       	sbrc	r19, 7
    10b4:	40 95       	com	r20
    10b6:	54 2f       	mov	r21, r20
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	95 0b       	sbc	r25, r21
    10c0:	24 e6       	ldi	r18, 0x64	; 100
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	0e 94 02 12 	call	0x2404	; 0x2404 <__mulsi3>
    10cc:	20 91 0e 01 	lds	r18, 0x010E
    10d0:	30 91 0f 01 	lds	r19, 0x010F
    10d4:	20 1b       	sub	r18, r16
    10d6:	31 0b       	sbc	r19, r17
    10d8:	44 27       	eor	r20, r20
    10da:	37 fd       	sbrc	r19, 7
    10dc:	40 95       	com	r20
    10de:	54 2f       	mov	r21, r20
    10e0:	0e 94 48 12 	call	0x2490	; 0x2490 <__divmodsi4>
    10e4:	ca 01       	movw	r24, r20
    10e6:	b9 01       	movw	r22, r18
    10e8:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
    10ec:	60 93 b8 01 	sts	0x01B8, r22
    10f0:	70 93 b9 01 	sts	0x01B9, r23
    10f4:	80 93 ba 01 	sts	0x01BA, r24
    10f8:	90 93 bb 01 	sts	0x01BB, r25
	if ( throttle_percent < 12 ) throttle_percent = 12;    //don't got under X%	 (throttle percent is only set if we exit safety - so lack of "0" throttle isn't a problem)
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e4       	ldi	r20, 0x40	; 64
    1102:	51 e4       	ldi	r21, 0x41	; 65
    1104:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    1108:	88 23       	and	r24, r24
    110a:	64 f4       	brge	.+24     	; 0x1124 <main_calculations+0x388>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e4       	ldi	r26, 0x40	; 64
    1112:	b1 e4       	ldi	r27, 0x41	; 65
    1114:	80 93 b8 01 	sts	0x01B8, r24
    1118:	90 93 b9 01 	sts	0x01B9, r25
    111c:	a0 93 ba 01 	sts	0x01BA, r26
    1120:	b0 93 bb 01 	sts	0x01BB, r27
	if ( throttle_percent > 100 ) throttle_percent = 100;    //don't got over 100%
    1124:	60 91 b8 01 	lds	r22, 0x01B8
    1128:	70 91 b9 01 	lds	r23, 0x01B9
    112c:	80 91 ba 01 	lds	r24, 0x01BA
    1130:	90 91 bb 01 	lds	r25, 0x01BB
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	48 ec       	ldi	r20, 0xC8	; 200
    113a:	52 e4       	ldi	r21, 0x42	; 66
    113c:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    1140:	18 16       	cp	r1, r24
    1142:	64 f4       	brge	.+24     	; 0x115c <main_calculations+0x3c0>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a8 ec       	ldi	r26, 0xC8	; 200
    114a:	b2 e4       	ldi	r27, 0x42	; 66
    114c:	80 93 b8 01 	sts	0x01B8, r24
    1150:	90 93 b9 01 	sts	0x01B9, r25
    1154:	a0 93 ba 01 	sts	0x01BA, r26
    1158:	b0 93 bb 01 	sts	0x01BB, r27
	

	config_mode_throttle_percent = throttle_percent;				//second copy of variable used in config mode (since we're otherwise locking it at 50%)
    115c:	20 91 b8 01 	lds	r18, 0x01B8
    1160:	30 91 b9 01 	lds	r19, 0x01B9
    1164:	40 91 ba 01 	lds	r20, 0x01BA
    1168:	50 91 bb 01 	lds	r21, 0x01BB
    116c:	20 93 be 01 	sts	0x01BE, r18
    1170:	30 93 bf 01 	sts	0x01BF, r19
    1174:	40 93 c0 01 	sts	0x01C0, r20
    1178:	50 93 c1 01 	sts	0x01C1, r21
	if (in_config_mode == 1) throttle_percent = 50;			//throttle is locked at 50 percent in config mode
    117c:	80 91 cc 01 	lds	r24, 0x01CC
    1180:	90 91 cd 01 	lds	r25, 0x01CD
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	69 f4       	brne	.+26     	; 0x11a6 <main_calculations+0x40a>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a8 e4       	ldi	r26, 0x48	; 72
    1192:	b2 e4       	ldi	r27, 0x42	; 66
    1194:	80 93 b8 01 	sts	0x01B8, r24
    1198:	90 93 b9 01 	sts	0x01B9, r25
    119c:	a0 93 ba 01 	sts	0x01BA, r26
    11a0:	b0 93 bb 01 	sts	0x01BB, r27
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <main_calculations+0x412>


	//calculates + modifies changes to heading based on input from transmitter - not done if in config mode (and not in the 90+% normal drive mode)
	
	if (in_config_mode == 0 || config_mode_throttle_percent > 90)
    11a6:	ad 81       	ldd	r26, Y+5	; 0x05
    11a8:	be 81       	ldd	r27, Y+6	; 0x06
    11aa:	ab 2b       	or	r26, r27
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <main_calculations+0x428>
    11ae:	ca 01       	movw	r24, r20
    11b0:	b9 01       	movw	r22, r18
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	44 eb       	ldi	r20, 0xB4	; 180
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    11be:	18 16       	cp	r1, r24
    11c0:	0c f0       	brlt	.+2      	; 0x11c4 <main_calculations+0x428>
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <main_calculations+0x4b0>
	{
		steering_multiplier = heading_center - leftright;
    11c4:	20 91 9a 01 	lds	r18, 0x019A
    11c8:	30 91 9b 01 	lds	r19, 0x019B
    11cc:	40 91 9c 01 	lds	r20, 0x019C
    11d0:	50 91 9d 01 	lds	r21, 0x019D
		steering_multiplier = steering_multiplier * turn_speed;
    11d4:	60 91 16 01 	lds	r22, 0x0116
    11d8:	70 91 17 01 	lds	r23, 0x0117
    11dc:	88 27       	eor	r24, r24
    11de:	77 fd       	sbrc	r23, 7
    11e0:	80 95       	com	r24
    11e2:	98 2f       	mov	r25, r24
    11e4:	62 1b       	sub	r22, r18
    11e6:	73 0b       	sbc	r23, r19
    11e8:	84 0b       	sbc	r24, r20
    11ea:	95 0b       	sbc	r25, r21
    11ec:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
    11f0:	20 91 42 01 	lds	r18, 0x0142
    11f4:	30 91 43 01 	lds	r19, 0x0143
    11f8:	40 91 44 01 	lds	r20, 0x0144
    11fc:	50 91 45 01 	lds	r21, 0x0145
    1200:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
		steering_multiplier = 1 - steering_multiplier;		//starts with 1 as a base value (ie - if it was 0.0 it becomes 1.0 - so there's no change in heading)
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	9f e3       	ldi	r25, 0x3F	; 63
    1210:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	60 93 62 01 	sts	0x0162, r22
    121c:	70 93 63 01 	sts	0x0163, r23
    1220:	80 93 64 01 	sts	0x0164, r24
    1224:	90 93 65 01 	sts	0x0165, r25
		full_spin_time_ms = full_spin_time_ms * steering_multiplier;
    1228:	60 91 68 01 	lds	r22, 0x0168
    122c:	70 91 69 01 	lds	r23, 0x0169
    1230:	80 91 6a 01 	lds	r24, 0x016A
    1234:	90 91 6b 01 	lds	r25, 0x016B
    1238:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    123c:	60 93 68 01 	sts	0x0168, r22
    1240:	70 93 69 01 	sts	0x0169, r23
    1244:	80 93 6a 01 	sts	0x016A, r24
    1248:	90 93 6b 01 	sts	0x016B, r25
	}
	

	half_spin_time = full_spin_time_ms / 2;                          //sets period in MS for each half of spin
    124c:	a0 90 68 01 	lds	r10, 0x0168
    1250:	b0 90 69 01 	lds	r11, 0x0169
    1254:	c0 90 6a 01 	lds	r12, 0x016A
    1258:	d0 90 6b 01 	lds	r13, 0x016B
    125c:	c6 01       	movw	r24, r12
    125e:	b5 01       	movw	r22, r10
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    126c:	60 93 96 01 	sts	0x0196, r22
    1270:	70 93 97 01 	sts	0x0197, r23
    1274:	80 93 98 01 	sts	0x0198, r24
    1278:	90 93 99 01 	sts	0x0199, r25

	//caps on timing if going too slow or fast
	if ( half_spin_time > 200) half_spin_time = 200;			//slowest allowed - 200ms per half-cycle = 150rpm
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	48 e4       	ldi	r20, 0x48	; 72
    1282:	53 e4       	ldi	r21, 0x43	; 67
    1284:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	64 f4       	brge	.+24     	; 0x12a4 <main_calculations+0x508>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a8 e4       	ldi	r26, 0x48	; 72
    1292:	b3 e4       	ldi	r27, 0x43	; 67
    1294:	80 93 96 01 	sts	0x0196, r24
    1298:	90 93 97 01 	sts	0x0197, r25
    129c:	a0 93 98 01 	sts	0x0198, r26
    12a0:	b0 93 99 01 	sts	0x0199, r27
	if ( half_spin_time < 5) half_spin_time = 5;				//fastest - 5ms per half-cycle = 6000rpm
    12a4:	60 91 96 01 	lds	r22, 0x0196
    12a8:	70 91 97 01 	lds	r23, 0x0197
    12ac:	80 91 98 01 	lds	r24, 0x0198
    12b0:	90 91 99 01 	lds	r25, 0x0199
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 ea       	ldi	r20, 0xA0	; 160
    12ba:	50 e4       	ldi	r21, 0x40	; 64
    12bc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	64 f4       	brge	.+24     	; 0x12dc <main_calculations+0x540>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 ea       	ldi	r26, 0xA0	; 160
    12ca:	b0 e4       	ldi	r27, 0x40	; 64
    12cc:	80 93 96 01 	sts	0x0196, r24
    12d0:	90 93 97 01 	sts	0x0197, r25
    12d4:	a0 93 98 01 	sts	0x0198, r26
    12d8:	b0 93 99 01 	sts	0x0199, r27


	//set heading beacon size and location

	led_on = full_spin_time_ms * led_adjust;
	led_on = led_on / 100;
    12dc:	c6 01       	movw	r24, r12
    12de:	b5 01       	movw	r22, r10
    12e0:	20 91 3c 01 	lds	r18, 0x013C
    12e4:	30 91 3d 01 	lds	r19, 0x013D
    12e8:	40 91 3e 01 	lds	r20, 0x013E
    12ec:	50 91 3f 01 	lds	r21, 0x013F
    12f0:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	48 ec       	ldi	r20, 0xC8	; 200
    12fa:	52 e4       	ldi	r21, 0x42	; 66
    12fc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    1300:	7b 01       	movw	r14, r22
    1302:	8c 01       	movw	r16, r24
    1304:	60 93 a2 01 	sts	0x01A2, r22
    1308:	70 93 a3 01 	sts	0x01A3, r23
    130c:	80 93 a4 01 	sts	0x01A4, r24
    1310:	90 93 a5 01 	sts	0x01A5, r25
	led_off = full_spin_time_ms / 3;                                  //led signal is 33% of circle
	led_off = led_off + led_on;
    1314:	c6 01       	movw	r24, r12
    1316:	b5 01       	movw	r22, r10
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e4       	ldi	r20, 0x40	; 64
    131e:	50 e4       	ldi	r21, 0x40	; 64
    1320:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    1324:	a8 01       	movw	r20, r16
    1326:	97 01       	movw	r18, r14
    1328:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
    132c:	7b 01       	movw	r14, r22
    132e:	8c 01       	movw	r16, r24
    1330:	60 93 c4 01 	sts	0x01C4, r22
    1334:	70 93 c5 01 	sts	0x01C5, r23
    1338:	80 93 c6 01 	sts	0x01C6, r24
    133c:	90 93 c7 01 	sts	0x01C7, r25


	if (led_off >= full_spin_time_ms ) //if led_off is "later" or at end of cycle - shift led_off behind by one cycle
    1340:	a6 01       	movw	r20, r12
    1342:	95 01       	movw	r18, r10
    1344:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    1348:	88 23       	and	r24, r24
    134a:	74 f0       	brlt	.+28     	; 0x1368 <main_calculations+0x5cc>
	{                        
		led_off = led_off - full_spin_time_ms;
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	a6 01       	movw	r20, r12
    1352:	95 01       	movw	r18, r10
    1354:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    1358:	60 93 c4 01 	sts	0x01C4, r22
    135c:	70 93 c5 01 	sts	0x01C5, r23
    1360:	80 93 c6 01 	sts	0x01C6, r24
    1364:	90 93 c7 01 	sts	0x01C7, r25
	}

	if ( led_off < 1 ) led_off = led_off + full_spin_time_ms;
    1368:	e0 90 c4 01 	lds	r14, 0x01C4
    136c:	f0 90 c5 01 	lds	r15, 0x01C5
    1370:	00 91 c6 01 	lds	r16, 0x01C6
    1374:	10 91 c7 01 	lds	r17, 0x01C7
    1378:	c8 01       	movw	r24, r16
    137a:	b7 01       	movw	r22, r14
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    1388:	88 23       	and	r24, r24
    138a:	74 f4       	brge	.+28     	; 0x13a8 <main_calculations+0x60c>
    138c:	c8 01       	movw	r24, r16
    138e:	b7 01       	movw	r22, r14
    1390:	a6 01       	movw	r20, r12
    1392:	95 01       	movw	r18, r10
    1394:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
    1398:	60 93 c4 01 	sts	0x01C4, r22
    139c:	70 93 c5 01 	sts	0x01C5, r23
    13a0:	80 93 c6 01 	sts	0x01C6, r24
    13a4:	90 93 c7 01 	sts	0x01C7, r25

	//throttling

	full_power_spin = 0;
    13a8:	10 92 c9 01 	sts	0x01C9, r1
    13ac:	10 92 c8 01 	sts	0x01C8, r1
	if ( rpm < min_rpm ) full_power_spin = 1;                //if we're under the minimum RPM for translation - do the full power spin!
    13b0:	c2 01       	movw	r24, r4
    13b2:	b1 01       	movw	r22, r2
    13b4:	20 91 1c 01 	lds	r18, 0x011C
    13b8:	30 91 1d 01 	lds	r19, 0x011D
    13bc:	40 91 1e 01 	lds	r20, 0x011E
    13c0:	50 91 1f 01 	lds	r21, 0x011F
    13c4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	34 f4       	brge	.+12     	; 0x13d8 <main_calculations+0x63c>
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	90 93 c9 01 	sts	0x01C9, r25
    13d4:	80 93 c8 01 	sts	0x01C8, r24
	if ( g > max_g || rpm > max_allowed_rpm ) throttle_percent = 10;  				     //if we're over max alowed G's or RPM - reduce throttle
    13d8:	c4 01       	movw	r24, r8
    13da:	b3 01       	movw	r22, r6
    13dc:	20 91 24 01 	lds	r18, 0x0124
    13e0:	30 91 25 01 	lds	r19, 0x0125
    13e4:	40 91 26 01 	lds	r20, 0x0126
    13e8:	50 91 27 01 	lds	r21, 0x0127
    13ec:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	74 f0       	brlt	.+28     	; 0x1410 <main_calculations+0x674>
    13f4:	c2 01       	movw	r24, r4
    13f6:	b1 01       	movw	r22, r2
    13f8:	20 91 20 01 	lds	r18, 0x0120
    13fc:	30 91 21 01 	lds	r19, 0x0121
    1400:	40 91 22 01 	lds	r20, 0x0122
    1404:	50 91 23 01 	lds	r21, 0x0123
    1408:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    140c:	18 16       	cp	r1, r24
    140e:	64 f4       	brge	.+24     	; 0x1428 <main_calculations+0x68c>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e2       	ldi	r26, 0x20	; 32
    1416:	b1 e4       	ldi	r27, 0x41	; 65
    1418:	80 93 b8 01 	sts	0x01B8, r24
    141c:	90 93 b9 01 	sts	0x01B9, r25
    1420:	a0 93 ba 01 	sts	0x01BA, r26
    1424:	b0 93 bb 01 	sts	0x01BB, r27
	
	
	//if throttle is at or over 50% throttle - adjust time spent in braking
	if ( throttle_percent > 50 )
    1428:	80 91 b8 01 	lds	r24, 0x01B8
    142c:	90 91 b9 01 	lds	r25, 0x01B9
    1430:	a0 91 ba 01 	lds	r26, 0x01BA
    1434:	b0 91 bb 01 	lds	r27, 0x01BB
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	ab 83       	std	Y+3, r26	; 0x03
    143e:	bc 83       	std	Y+4, r27	; 0x04
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	48 e4       	ldi	r20, 0x48	; 72
    144a:	52 e4       	ldi	r21, 0x42	; 66
    144c:	0e 94 44 11 	call	0x2288	; 0x2288 <__gesf2>
    1450:	18 16       	cp	r1, r24
    1452:	0c f0       	brlt	.+2      	; 0x1456 <main_calculations+0x6ba>
    1454:	76 c0       	rjmp	.+236    	; 0x1542 <main_calculations+0x7a6>
	{                          

		flashy_led = 1;                                        //flash the LED to indicate we're in fast mode
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	90 93 af 01 	sts	0x01AF, r25
    145e:	80 93 ae 01 	sts	0x01AE, r24

		braking_length = half_spin_time * 25;                  
    1462:	20 90 96 01 	lds	r2, 0x0196
    1466:	30 90 97 01 	lds	r3, 0x0197
    146a:	40 90 98 01 	lds	r4, 0x0198
    146e:	50 90 99 01 	lds	r5, 0x0199
    1472:	c2 01       	movw	r24, r4
    1474:	b1 01       	movw	r22, r2
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	48 ec       	ldi	r20, 0xC8	; 200
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
		braking_length = braking_length / throttle_percent;    
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	3a 81       	ldd	r19, Y+2	; 0x02
    1486:	4b 81       	ldd	r20, Y+3	; 0x03
    1488:	5c 81       	ldd	r21, Y+4	; 0x04
    148a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    148e:	7b 01       	movw	r14, r22
    1490:	8c 01       	movw	r16, r24
    1492:	60 93 6c 01 	sts	0x016C, r22
    1496:	70 93 6d 01 	sts	0x016D, r23
    149a:	80 93 6e 01 	sts	0x016E, r24
    149e:	90 93 6f 01 	sts	0x016F, r25

		begin_brake = half_spin_time / 2;
    14a2:	c2 01       	movw	r24, r4
    14a4:	b1 01       	movw	r22, r2
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    14b2:	5b 01       	movw	r10, r22
    14b4:	6c 01       	movw	r12, r24
		begin_brake = begin_brake - braking_length;
    14b6:	a8 01       	movw	r20, r16
    14b8:	97 01       	movw	r18, r14
    14ba:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    14be:	3b 01       	movw	r6, r22
    14c0:	4c 01       	movw	r8, r24
    14c2:	60 93 ce 01 	sts	0x01CE, r22
    14c6:	70 93 cf 01 	sts	0x01CF, r23
    14ca:	80 93 d0 01 	sts	0x01D0, r24
    14ce:	90 93 d1 01 	sts	0x01D1, r25

		end_brake = half_spin_time / 2;
		end_brake = end_brake + braking_length;
    14d2:	c6 01       	movw	r24, r12
    14d4:	b5 01       	movw	r22, r10
    14d6:	a8 01       	movw	r20, r16
    14d8:	97 01       	movw	r18, r14
    14da:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
    14de:	60 93 9e 01 	sts	0x019E, r22
    14e2:	70 93 9f 01 	sts	0x019F, r23
    14e6:	80 93 a0 01 	sts	0x01A0, r24
    14ea:	90 93 a1 01 	sts	0x01A1, r25
	
		if ( begin_brake < 1 )	begin_brake = 1;               //make sure begin_brake isn't getting set to 0
    14ee:	c4 01       	movw	r24, r8
    14f0:	b3 01       	movw	r22, r6
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    14fe:	88 23       	and	r24, r24
    1500:	64 f4       	brge	.+24     	; 0x151a <main_calculations+0x77e>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	80 93 ce 01 	sts	0x01CE, r24
    150e:	90 93 cf 01 	sts	0x01CF, r25
    1512:	a0 93 d0 01 	sts	0x01D0, r26
    1516:	b0 93 d1 01 	sts	0x01D1, r27
			
		power_kill_part1 = 0;                                  //power_kill not used if throttle over 50%
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	80 93 8e 01 	sts	0x018E, r24
    1526:	90 93 8f 01 	sts	0x018F, r25
    152a:	a0 93 90 01 	sts	0x0190, r26
    152e:	b0 93 91 01 	sts	0x0191, r27
		power_kill_part2 = half_spin_time;
    1532:	20 92 86 01 	sts	0x0186, r2
    1536:	30 92 87 01 	sts	0x0187, r3
    153a:	40 92 88 01 	sts	0x0188, r4
    153e:	50 92 89 01 	sts	0x0189, r5

	}


	if ( throttle_percent <= 50 )                           //if throttle under 50% - kill the motors for a portion of each spin
    1542:	69 81       	ldd	r22, Y+1	; 0x01
    1544:	7a 81       	ldd	r23, Y+2	; 0x02
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	48 e4       	ldi	r20, 0x48	; 72
    1550:	52 e4       	ldi	r21, 0x42	; 66
    1552:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__cmpsf2>
    1556:	18 16       	cp	r1, r24
    1558:	0c f4       	brge	.+2      	; 0x155c <main_calculations+0x7c0>
    155a:	4e c0       	rjmp	.+156    	; 0x15f8 <main_calculations+0x85c>
	{
		begin_brake = 1;
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a0 e8       	ldi	r26, 0x80	; 128
    1562:	bf e3       	ldi	r27, 0x3F	; 63
    1564:	80 93 ce 01 	sts	0x01CE, r24
    1568:	90 93 cf 01 	sts	0x01CF, r25
    156c:	a0 93 d0 01 	sts	0x01D0, r26
    1570:	b0 93 d1 01 	sts	0x01D1, r27
		end_brake = half_spin_time;
    1574:	e0 90 96 01 	lds	r14, 0x0196
    1578:	f0 90 97 01 	lds	r15, 0x0197
    157c:	00 91 98 01 	lds	r16, 0x0198
    1580:	10 91 99 01 	lds	r17, 0x0199
    1584:	e0 92 9e 01 	sts	0x019E, r14
    1588:	f0 92 9f 01 	sts	0x019F, r15
    158c:	00 93 a0 01 	sts	0x01A0, r16
    1590:	10 93 a1 01 	sts	0x01A1, r17

		power_kill_length = 50 - throttle_percent;           //set time in each cycle to cut power (throttling)
		power_kill_length = power_kill_length * half_spin_time;
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	88 e4       	ldi	r24, 0x48	; 72
    159a:	92 e4       	ldi	r25, 0x42	; 66
    159c:	29 81       	ldd	r18, Y+1	; 0x01
    159e:	3a 81       	ldd	r19, Y+2	; 0x02
    15a0:	4b 81       	ldd	r20, Y+3	; 0x03
    15a2:	5c 81       	ldd	r21, Y+4	; 0x04
    15a4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    15a8:	a8 01       	movw	r20, r16
    15aa:	97 01       	movw	r18, r14
    15ac:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
		power_kill_length = power_kill_length / 150;
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	46 e1       	ldi	r20, 0x16	; 22
    15b6:	53 e4       	ldi	r21, 0x43	; 67
    15b8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	60 93 b4 01 	sts	0x01B4, r22
    15c4:	70 93 b5 01 	sts	0x01B5, r23
    15c8:	80 93 b6 01 	sts	0x01B6, r24
    15cc:	90 93 b7 01 	sts	0x01B7, r25

		power_kill_part1 = power_kill_length;
    15d0:	60 93 8e 01 	sts	0x018E, r22
    15d4:	70 93 8f 01 	sts	0x018F, r23
    15d8:	80 93 90 01 	sts	0x0190, r24
    15dc:	90 93 91 01 	sts	0x0191, r25
		power_kill_part2 = half_spin_time - power_kill_length;
    15e0:	c8 01       	movw	r24, r16
    15e2:	b7 01       	movw	r22, r14
    15e4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    15e8:	60 93 86 01 	sts	0x0186, r22
    15ec:	70 93 87 01 	sts	0x0187, r23
    15f0:	80 93 88 01 	sts	0x0188, r24
    15f4:	90 93 89 01 	sts	0x0189, r25

	}

	if ( full_power_spin == 1 )      //if we're actually doing full power this spin (no translation) - ignore any calculations / reset variables
    15f8:	80 91 c8 01 	lds	r24, 0x01C8
    15fc:	90 91 c9 01 	lds	r25, 0x01C9
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	81 f5       	brne	.+96     	; 0x1664 <main_calculations+0x8c8>
	{
		end_brake = 1;
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	bf e3       	ldi	r27, 0x3F	; 63
    160c:	80 93 9e 01 	sts	0x019E, r24
    1610:	90 93 9f 01 	sts	0x019F, r25
    1614:	a0 93 a0 01 	sts	0x01A0, r26
    1618:	b0 93 a1 01 	sts	0x01A1, r27
		begin_brake = 0;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	80 93 ce 01 	sts	0x01CE, r24
    1628:	90 93 cf 01 	sts	0x01CF, r25
    162c:	a0 93 d0 01 	sts	0x01D0, r26
    1630:	b0 93 d1 01 	sts	0x01D1, r27

		power_kill_part1 = 0;
    1634:	80 93 8e 01 	sts	0x018E, r24
    1638:	90 93 8f 01 	sts	0x018F, r25
    163c:	a0 93 90 01 	sts	0x0190, r26
    1640:	b0 93 91 01 	sts	0x0191, r27
		power_kill_part2 = half_spin_time;
    1644:	80 91 96 01 	lds	r24, 0x0196
    1648:	90 91 97 01 	lds	r25, 0x0197
    164c:	a0 91 98 01 	lds	r26, 0x0198
    1650:	b0 91 99 01 	lds	r27, 0x0199
    1654:	80 93 86 01 	sts	0x0186, r24
    1658:	90 93 87 01 	sts	0x0187, r25
    165c:	a0 93 88 01 	sts	0x0188, r26
    1660:	b0 93 89 01 	sts	0x0189, r27
	}
	
	if (in_config_mode == 1) config_mode();	//do config_mode stuff if we're in configuration mode
    1664:	ad 81       	ldd	r26, Y+5	; 0x05
    1666:	be 81       	ldd	r27, Y+6	; 0x06
    1668:	11 97       	sbiw	r26, 0x01	; 1
    166a:	11 f4       	brne	.+4      	; 0x1670 <main_calculations+0x8d4>
    166c:	0e 94 53 00 	call	0xa6	; 0xa6 <config_mode>
		
	//adjustments - convert times from milliseconds to timer ticks
	led_on = led_on * timer_ticks_per_ms;
    1670:	e0 90 00 01 	lds	r14, 0x0100
    1674:	f0 90 01 01 	lds	r15, 0x0101
    1678:	00 91 02 01 	lds	r16, 0x0102
    167c:	10 91 03 01 	lds	r17, 0x0103
    1680:	60 91 a2 01 	lds	r22, 0x01A2
    1684:	70 91 a3 01 	lds	r23, 0x01A3
    1688:	80 91 a4 01 	lds	r24, 0x01A4
    168c:	90 91 a5 01 	lds	r25, 0x01A5
    1690:	a8 01       	movw	r20, r16
    1692:	97 01       	movw	r18, r14
    1694:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1698:	60 93 a2 01 	sts	0x01A2, r22
    169c:	70 93 a3 01 	sts	0x01A3, r23
    16a0:	80 93 a4 01 	sts	0x01A4, r24
    16a4:	90 93 a5 01 	sts	0x01A5, r25
	led_off = led_off * timer_ticks_per_ms;
    16a8:	60 91 c4 01 	lds	r22, 0x01C4
    16ac:	70 91 c5 01 	lds	r23, 0x01C5
    16b0:	80 91 c6 01 	lds	r24, 0x01C6
    16b4:	90 91 c7 01 	lds	r25, 0x01C7
    16b8:	a8 01       	movw	r20, r16
    16ba:	97 01       	movw	r18, r14
    16bc:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    16c0:	60 93 c4 01 	sts	0x01C4, r22
    16c4:	70 93 c5 01 	sts	0x01C5, r23
    16c8:	80 93 c6 01 	sts	0x01C6, r24
    16cc:	90 93 c7 01 	sts	0x01C7, r25
	half_spin_time = half_spin_time * timer_ticks_per_ms;
    16d0:	60 91 96 01 	lds	r22, 0x0196
    16d4:	70 91 97 01 	lds	r23, 0x0197
    16d8:	80 91 98 01 	lds	r24, 0x0198
    16dc:	90 91 99 01 	lds	r25, 0x0199
    16e0:	a8 01       	movw	r20, r16
    16e2:	97 01       	movw	r18, r14
    16e4:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    16e8:	60 93 96 01 	sts	0x0196, r22
    16ec:	70 93 97 01 	sts	0x0197, r23
    16f0:	80 93 98 01 	sts	0x0198, r24
    16f4:	90 93 99 01 	sts	0x0199, r25
	power_kill_part1 = power_kill_part1 * timer_ticks_per_ms;
    16f8:	60 91 8e 01 	lds	r22, 0x018E
    16fc:	70 91 8f 01 	lds	r23, 0x018F
    1700:	80 91 90 01 	lds	r24, 0x0190
    1704:	90 91 91 01 	lds	r25, 0x0191
    1708:	a8 01       	movw	r20, r16
    170a:	97 01       	movw	r18, r14
    170c:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1710:	60 93 8e 01 	sts	0x018E, r22
    1714:	70 93 8f 01 	sts	0x018F, r23
    1718:	80 93 90 01 	sts	0x0190, r24
    171c:	90 93 91 01 	sts	0x0191, r25
	power_kill_part2 = power_kill_part2 * timer_ticks_per_ms;
    1720:	60 91 86 01 	lds	r22, 0x0186
    1724:	70 91 87 01 	lds	r23, 0x0187
    1728:	80 91 88 01 	lds	r24, 0x0188
    172c:	90 91 89 01 	lds	r25, 0x0189
    1730:	a8 01       	movw	r20, r16
    1732:	97 01       	movw	r18, r14
    1734:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1738:	60 93 86 01 	sts	0x0186, r22
    173c:	70 93 87 01 	sts	0x0187, r23
    1740:	80 93 88 01 	sts	0x0188, r24
    1744:	90 93 89 01 	sts	0x0189, r25
	begin_brake = begin_brake * timer_ticks_per_ms;
    1748:	60 91 ce 01 	lds	r22, 0x01CE
    174c:	70 91 cf 01 	lds	r23, 0x01CF
    1750:	80 91 d0 01 	lds	r24, 0x01D0
    1754:	90 91 d1 01 	lds	r25, 0x01D1
    1758:	a8 01       	movw	r20, r16
    175a:	97 01       	movw	r18, r14
    175c:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1760:	60 93 ce 01 	sts	0x01CE, r22
    1764:	70 93 cf 01 	sts	0x01CF, r23
    1768:	80 93 d0 01 	sts	0x01D0, r24
    176c:	90 93 d1 01 	sts	0x01D1, r25
	end_brake = end_brake * timer_ticks_per_ms;
    1770:	60 91 9e 01 	lds	r22, 0x019E
    1774:	70 91 9f 01 	lds	r23, 0x019F
    1778:	80 91 a0 01 	lds	r24, 0x01A0
    177c:	90 91 a1 01 	lds	r25, 0x01A1
    1780:	a8 01       	movw	r20, r16
    1782:	97 01       	movw	r18, r14
    1784:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    1788:	60 93 9e 01 	sts	0x019E, r22
    178c:	70 93 9f 01 	sts	0x019F, r23
    1790:	80 93 a0 01 	sts	0x01A0, r24
    1794:	90 93 a1 01 	sts	0x01A1, r25
	

}
    1798:	26 96       	adiw	r28, 0x06	; 6
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	08 95       	ret

000017ca <save_config>:
	}

}

void save_config(void)
{
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
	long tracking_word1;	//first word of tracking_comp
	float tracking_word2;	//second word of tracking_comp
	
	//this code busts up tracking_comp (float) into two words for storage to ROM (there are probably cleaner ways to do this)
	
	tracking_word1 = tracking_comp * 1000;							//mulitply tracking_comp by 1000 to get 1st word
    17da:	60 91 38 01 	lds	r22, 0x0138
    17de:	70 91 39 01 	lds	r23, 0x0139
    17e2:	80 91 3a 01 	lds	r24, 0x013A
    17e6:	90 91 3b 01 	lds	r25, 0x013B
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a e7       	ldi	r20, 0x7A	; 122
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    17f6:	7b 01       	movw	r14, r22
    17f8:	8c 01       	movw	r16, r24
    17fa:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__fixsfsi>
    17fe:	5b 01       	movw	r10, r22
    1800:	6c 01       	movw	r12, r24
	tracking_word2 = ((tracking_comp * 1000) - tracking_word1);	//amount that didn't make it into word1 goes into word2
    1802:	0e 94 94 10 	call	0x2128	; 0x2128 <__floatsisf>
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	c8 01       	movw	r24, r16
    180c:	b7 01       	movw	r22, r14
    180e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__subsf3>
    1812:	7b 01       	movw	r14, r22
    1814:	8c 01       	movw	r16, r24
	tracking_word2 = tracking_word2 * 10000;						//multiply that by 10,000
		
	//EPROM variables - for saved configuration data
	eeprom_write_word(&saved_data_valid, 128);	//used as an indicator that saved data is good
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	60 e8       	ldi	r22, 0x80	; 128
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>
	eeprom_write_word(&led_adjust_save, led_adjust);	//saves out led offset
    1822:	60 91 3c 01 	lds	r22, 0x013C
    1826:	70 91 3d 01 	lds	r23, 0x013D
    182a:	80 91 3e 01 	lds	r24, 0x013E
    182e:	90 91 3f 01 	lds	r25, 0x013F
    1832:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b9 01       	movw	r22, r18
    1840:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word1, tracking_word1);	//saves out tracking calibration word1 (converted to integer)
    1844:	84 e0       	ldi	r24, 0x04	; 4
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b5 01       	movw	r22, r10
    184a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>
	eeprom_write_word(&tracking_comp_save_word2, tracking_word2);	//saves out tracking calibration word2 (converted to integer)
    184e:	c8 01       	movw	r24, r16
    1850:	b7 01       	movw	r22, r14
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e4       	ldi	r19, 0x40	; 64
    1856:	4c e1       	ldi	r20, 0x1C	; 28
    1858:	56 e4       	ldi	r21, 0x46	; 70
    185a:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsf3>
    185e:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	86 e0       	ldi	r24, 0x06	; 6
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	b9 01       	movw	r22, r18
    186c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>
	eeprom_write_word(&heading_center_save, heading_center);	//saves out RC center value for left/right 
    1870:	60 91 16 01 	lds	r22, 0x0116
    1874:	70 91 17 01 	lds	r23, 0x0117
    1878:	88 e0       	ldi	r24, 0x08	; 8
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>
	eeprom_write_word(&base_accel_save, base_accel);	//saves out accelerometer 0G value
    1880:	60 91 40 01 	lds	r22, 0x0140
    1884:	70 91 41 01 	lds	r23, 0x0141
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__eewr_word_m168>


}
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	08 95       	ret

000018a2 <safety_and_idle>:
}



void safety_and_idle(void)
{
    18a2:	2f 92       	push	r2
    18a4:	3f 92       	push	r3
    18a6:	4f 92       	push	r4
    18a8:	5f 92       	push	r5
    18aa:	6f 92       	push	r6
    18ac:	7f 92       	push	r7
    18ae:	8f 92       	push	r8
    18b0:	9f 92       	push	r9
    18b2:	af 92       	push	r10
    18b4:	bf 92       	push	r11
    18b6:	cf 92       	push	r12
    18b8:	df 92       	push	r13
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	c4 ef       	ldi	r28, 0xF4	; 244
    18c8:	d1 e0       	ldi	r29, 0x01	; 1
		{

			_delay_ms(10);
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
			{
				got_centered_forwardback = 1;
    18ca:	a1 e0       	ldi	r26, 0x01	; 1
    18cc:	4a 2e       	mov	r4, r26
    18ce:	51 2c       	mov	r5, r1
    18d0:	f8 ea       	ldi	r31, 0xA8	; 168
    18d2:	2f 2e       	mov	r2, r31
    18d4:	f1 e6       	ldi	r31, 0x61	; 97
    18d6:	3f 2e       	mov	r3, r31
    18d8:	04 c2       	rjmp	.+1032   	; 0x1ce2 <safety_and_idle+0x440>

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
	{


		motors_brake();			//motors are off (braked if pwm) while sitting idle
    18da:	0e 94 ed 01 	call	0x3da	; 0x3da <motors_brake>

		if (throttle < throttle_low || throttle > (throttle_high + 100)) throttle_up_count = 0;		//single low / bad throttle resets the counter to 0
    18de:	20 91 92 01 	lds	r18, 0x0192
    18e2:	30 91 93 01 	lds	r19, 0x0193
    18e6:	40 91 94 01 	lds	r20, 0x0194
    18ea:	50 91 95 01 	lds	r21, 0x0195
    18ee:	80 91 0c 01 	lds	r24, 0x010C
    18f2:	90 91 0d 01 	lds	r25, 0x010D
    18f6:	7c 01       	movw	r14, r24
    18f8:	00 27       	eor	r16, r16
    18fa:	f7 fc       	sbrc	r15, 7
    18fc:	00 95       	com	r16
    18fe:	10 2f       	mov	r17, r16
    1900:	2e 15       	cp	r18, r14
    1902:	3f 05       	cpc	r19, r15
    1904:	40 07       	cpc	r20, r16
    1906:	51 07       	cpc	r21, r17
    1908:	bc f0       	brlt	.+46     	; 0x1938 <safety_and_idle+0x96>
    190a:	20 91 92 01 	lds	r18, 0x0192
    190e:	30 91 93 01 	lds	r19, 0x0193
    1912:	40 91 94 01 	lds	r20, 0x0194
    1916:	50 91 95 01 	lds	r21, 0x0195
    191a:	80 91 0e 01 	lds	r24, 0x010E
    191e:	90 91 0f 01 	lds	r25, 0x010F
    1922:	8c 59       	subi	r24, 0x9C	; 156
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	aa 27       	eor	r26, r26
    1928:	97 fd       	sbrc	r25, 7
    192a:	a0 95       	com	r26
    192c:	ba 2f       	mov	r27, r26
    192e:	82 17       	cp	r24, r18
    1930:	93 07       	cpc	r25, r19
    1932:	a4 07       	cpc	r26, r20
    1934:	b5 07       	cpc	r27, r21
    1936:	24 f4       	brge	.+8      	; 0x1940 <safety_and_idle+0x9e>
    1938:	10 92 51 01 	sts	0x0151, r1
    193c:	10 92 50 01 	sts	0x0150, r1
		if (throttle > throttle_low && throttle < (throttle_high + 100)) throttle_up_count ++;		//if the throttle has been moved high - increment the counter
    1940:	80 91 92 01 	lds	r24, 0x0192
    1944:	90 91 93 01 	lds	r25, 0x0193
    1948:	a0 91 94 01 	lds	r26, 0x0194
    194c:	b0 91 95 01 	lds	r27, 0x0195
    1950:	e8 16       	cp	r14, r24
    1952:	f9 06       	cpc	r15, r25
    1954:	0a 07       	cpc	r16, r26
    1956:	1b 07       	cpc	r17, r27
    1958:	04 f5       	brge	.+64     	; 0x199a <safety_and_idle+0xf8>
    195a:	20 91 92 01 	lds	r18, 0x0192
    195e:	30 91 93 01 	lds	r19, 0x0193
    1962:	40 91 94 01 	lds	r20, 0x0194
    1966:	50 91 95 01 	lds	r21, 0x0195
    196a:	80 91 0e 01 	lds	r24, 0x010E
    196e:	90 91 0f 01 	lds	r25, 0x010F
    1972:	8c 59       	subi	r24, 0x9C	; 156
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	aa 27       	eor	r26, r26
    1978:	97 fd       	sbrc	r25, 7
    197a:	a0 95       	com	r26
    197c:	ba 2f       	mov	r27, r26
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	4a 07       	cpc	r20, r26
    1984:	5b 07       	cpc	r21, r27
    1986:	4c f4       	brge	.+18     	; 0x199a <safety_and_idle+0xf8>
    1988:	80 91 50 01 	lds	r24, 0x0150
    198c:	90 91 51 01 	lds	r25, 0x0151
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	90 93 51 01 	sts	0x0151, r25
    1996:	80 93 50 01 	sts	0x0150, r24

		//interrupt blinking if stick isn't centered (helps to verify TX is working)
		if ( leftright > (heading_center + heading_leftthresh) ) {set_led_on(); _delay_ms(200);}
    199a:	20 91 9a 01 	lds	r18, 0x019A
    199e:	30 91 9b 01 	lds	r19, 0x019B
    19a2:	40 91 9c 01 	lds	r20, 0x019C
    19a6:	50 91 9d 01 	lds	r21, 0x019D
    19aa:	60 91 16 01 	lds	r22, 0x0116
    19ae:	70 91 17 01 	lds	r23, 0x0117
    19b2:	80 91 18 01 	lds	r24, 0x0118
    19b6:	90 91 19 01 	lds	r25, 0x0119
    19ba:	86 0f       	add	r24, r22
    19bc:	97 1f       	adc	r25, r23
    19be:	aa 27       	eor	r26, r26
    19c0:	97 fd       	sbrc	r25, 7
    19c2:	a0 95       	com	r26
    19c4:	ba 2f       	mov	r27, r26
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	a4 07       	cpc	r26, r20
    19cc:	b5 07       	cpc	r27, r21
    19ce:	44 f4       	brge	.+16     	; 0x19e0 <safety_and_idle+0x13e>
    19d0:	5d 9a       	sbi	0x0b, 5	; 11
    19d2:	80 ed       	ldi	r24, 0xD0	; 208
    19d4:	97 e0       	ldi	r25, 0x07	; 7
    19d6:	fe 01       	movw	r30, r28
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <safety_and_idle+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	d9 f7       	brne	.-10     	; 0x19d6 <safety_and_idle+0x134>
		if ( leftright < (heading_center + heading_rightthresh) ) {set_led_on(); _delay_ms(200);}
    19e0:	20 91 9a 01 	lds	r18, 0x019A
    19e4:	30 91 9b 01 	lds	r19, 0x019B
    19e8:	40 91 9c 01 	lds	r20, 0x019C
    19ec:	50 91 9d 01 	lds	r21, 0x019D
    19f0:	80 91 1a 01 	lds	r24, 0x011A
    19f4:	90 91 1b 01 	lds	r25, 0x011B
    19f8:	68 0f       	add	r22, r24
    19fa:	79 1f       	adc	r23, r25
    19fc:	cb 01       	movw	r24, r22
    19fe:	aa 27       	eor	r26, r26
    1a00:	97 fd       	sbrc	r25, 7
    1a02:	a0 95       	com	r26
    1a04:	ba 2f       	mov	r27, r26
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	4a 07       	cpc	r20, r26
    1a0c:	5b 07       	cpc	r21, r27
    1a0e:	44 f4       	brge	.+16     	; 0x1a20 <safety_and_idle+0x17e>
    1a10:	5d 9a       	sbi	0x0b, 5	; 11
    1a12:	80 ed       	ldi	r24, 0xD0	; 208
    1a14:	97 e0       	ldi	r25, 0x07	; 7
    1a16:	fe 01       	movw	r30, r28
    1a18:	31 97       	sbiw	r30, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <safety_and_idle+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	d9 f7       	brne	.-10     	; 0x1a16 <safety_and_idle+0x174>

		//sit there and flash LED
		
		toggle_led();
    1a20:	8b b1       	in	r24, 0x0b	; 11
    1a22:	90 e2       	ldi	r25, 0x20	; 32
    1a24:	89 27       	eor	r24, r25
    1a26:	8b b9       	out	0x0b, r24	; 11
    1a28:	8c e2       	ldi	r24, 0x2C	; 44
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <safety_and_idle+0x18c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	d9 f7       	brne	.-10     	; 0x1a2c <safety_and_idle+0x18a>
		_delay_ms(30);		
		

		//slower LED flash if in config mode
		if (in_config_mode == 1) {set_led_off(); _delay_ms(200);}		
    1a36:	80 90 cc 01 	lds	r8, 0x01CC
    1a3a:	90 90 cd 01 	lds	r9, 0x01CD
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	88 16       	cp	r8, r24
    1a42:	91 04       	cpc	r9, r1
    1a44:	41 f4       	brne	.+16     	; 0x1a56 <safety_and_idle+0x1b4>
    1a46:	5d 98       	cbi	0x0b, 5	; 11
    1a48:	80 ed       	ldi	r24, 0xD0	; 208
    1a4a:	97 e0       	ldi	r25, 0x07	; 7
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	31 97       	sbiw	r30, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <safety_and_idle+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	d9 f7       	brne	.-10     	; 0x1a4c <safety_and_idle+0x1aa>
		
		
		//verifies we got a centered forwardback stick at least once before allowing config mode (prevents boot directly into config mode if fail-safe is below center)
		if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))
    1a56:	20 91 78 01 	lds	r18, 0x0178
    1a5a:	30 91 79 01 	lds	r19, 0x0179
    1a5e:	40 91 7a 01 	lds	r20, 0x017A
    1a62:	50 91 7b 01 	lds	r21, 0x017B
    1a66:	60 91 10 01 	lds	r22, 0x0110
    1a6a:	70 91 11 01 	lds	r23, 0x0111
    1a6e:	80 91 14 01 	lds	r24, 0x0114
    1a72:	90 91 15 01 	lds	r25, 0x0115
    1a76:	86 0f       	add	r24, r22
    1a78:	97 1f       	adc	r25, r23
    1a7a:	7c 01       	movw	r14, r24
    1a7c:	00 27       	eor	r16, r16
    1a7e:	f7 fc       	sbrc	r15, 7
    1a80:	00 95       	com	r16
    1a82:	10 2f       	mov	r17, r16
    1a84:	e2 16       	cp	r14, r18
    1a86:	f3 06       	cpc	r15, r19
    1a88:	04 07       	cpc	r16, r20
    1a8a:	15 07       	cpc	r17, r21
    1a8c:	d4 f5       	brge	.+116    	; 0x1b02 <safety_and_idle+0x260>
    1a8e:	20 91 78 01 	lds	r18, 0x0178
    1a92:	30 91 79 01 	lds	r19, 0x0179
    1a96:	40 91 7a 01 	lds	r20, 0x017A
    1a9a:	50 91 7b 01 	lds	r21, 0x017B
    1a9e:	80 91 12 01 	lds	r24, 0x0112
    1aa2:	90 91 13 01 	lds	r25, 0x0113
    1aa6:	68 0f       	add	r22, r24
    1aa8:	79 1f       	adc	r23, r25
    1aaa:	5b 01       	movw	r10, r22
    1aac:	cc 24       	eor	r12, r12
    1aae:	b7 fc       	sbrc	r11, 7
    1ab0:	c0 94       	com	r12
    1ab2:	dc 2c       	mov	r13, r12
    1ab4:	2a 15       	cp	r18, r10
    1ab6:	3b 05       	cpc	r19, r11
    1ab8:	4c 05       	cpc	r20, r12
    1aba:	5d 05       	cpc	r21, r13
    1abc:	14 f5       	brge	.+68     	; 0x1b02 <safety_and_idle+0x260>
    1abe:	80 e5       	ldi	r24, 0x50	; 80
    1ac0:	93 ec       	ldi	r25, 0xC3	; 195
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <safety_and_idle+0x220>
		{

			_delay_ms(10);
			if (forwardback > (forwardback_center + forwardback_backthresh) && forwardback < (forwardback_center + forwardback_forwardthresh))	//check it again to be sure
    1ac6:	80 91 78 01 	lds	r24, 0x0178
    1aca:	90 91 79 01 	lds	r25, 0x0179
    1ace:	a0 91 7a 01 	lds	r26, 0x017A
    1ad2:	b0 91 7b 01 	lds	r27, 0x017B
    1ad6:	e8 16       	cp	r14, r24
    1ad8:	f9 06       	cpc	r15, r25
    1ada:	0a 07       	cpc	r16, r26
    1adc:	1b 07       	cpc	r17, r27
    1ade:	8c f4       	brge	.+34     	; 0x1b02 <safety_and_idle+0x260>
    1ae0:	80 91 78 01 	lds	r24, 0x0178
    1ae4:	90 91 79 01 	lds	r25, 0x0179
    1ae8:	a0 91 7a 01 	lds	r26, 0x017A
    1aec:	b0 91 7b 01 	lds	r27, 0x017B
    1af0:	8a 15       	cp	r24, r10
    1af2:	9b 05       	cpc	r25, r11
    1af4:	ac 05       	cpc	r26, r12
    1af6:	bd 05       	cpc	r27, r13
    1af8:	24 f4       	brge	.+8      	; 0x1b02 <safety_and_idle+0x260>
			{
				got_centered_forwardback = 1;
    1afa:	50 92 4d 01 	sts	0x014D, r5
    1afe:	40 92 4c 01 	sts	0x014C, r4
			}
		}
 

		//check for enter / leave config mode
		if (forwardback < (forwardback_center + forwardback_backthresh) && got_centered_forwardback == 1)		//is the stick being held back?
    1b02:	80 91 78 01 	lds	r24, 0x0178
    1b06:	90 91 79 01 	lds	r25, 0x0179
    1b0a:	a0 91 7a 01 	lds	r26, 0x017A
    1b0e:	b0 91 7b 01 	lds	r27, 0x017B
    1b12:	8e 15       	cp	r24, r14
    1b14:	9f 05       	cpc	r25, r15
    1b16:	a0 07       	cpc	r26, r16
    1b18:	b1 07       	cpc	r27, r17
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <safety_and_idle+0x27c>
    1b1c:	97 c0       	rjmp	.+302    	; 0x1c4c <safety_and_idle+0x3aa>
    1b1e:	80 91 4c 01 	lds	r24, 0x014C
    1b22:	90 91 4d 01 	lds	r25, 0x014D
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <safety_and_idle+0x28a>
    1b2a:	90 c0       	rjmp	.+288    	; 0x1c4c <safety_and_idle+0x3aa>
    1b2c:	80 e1       	ldi	r24, 0x10	; 16
    1b2e:	97 e2       	ldi	r25, 0x27	; 39
    1b30:	fe 01       	movw	r30, r28
    1b32:	31 97       	sbiw	r30, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <safety_and_idle+0x290>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <safety_and_idle+0x28e>
		{

			//wait a bit to make sure stick is being held...
			_delay_ms(1000);
			//still being held back - then enter / leave config mode
			if (forwardback < (forwardback_center + forwardback_backthresh))
    1b3a:	80 91 78 01 	lds	r24, 0x0178
    1b3e:	90 91 79 01 	lds	r25, 0x0179
    1b42:	a0 91 7a 01 	lds	r26, 0x017A
    1b46:	b0 91 7b 01 	lds	r27, 0x017B
    1b4a:	8e 15       	cp	r24, r14
    1b4c:	9f 05       	cpc	r25, r15
    1b4e:	a0 07       	cpc	r26, r16
    1b50:	b1 07       	cpc	r27, r17
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <safety_and_idle+0x2b4>
    1b54:	7b c0       	rjmp	.+246    	; 0x1c4c <safety_and_idle+0x3aa>
			{
				in_config_mode = !in_config_mode;
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	89 28       	or	r8, r9
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <safety_and_idle+0x2c0>
    1b5e:	21 e0       	ldi	r18, 0x01	; 1
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	30 93 cd 01 	sts	0x01CD, r19
    1b66:	20 93 cc 01 	sts	0x01CC, r18
    1b6a:	88 e9       	ldi	r24, 0x98	; 152
    1b6c:	9a e3       	ldi	r25, 0x3A	; 58
    1b6e:	fe 01       	movw	r30, r28
    1b70:	31 97       	sbiw	r30, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <safety_and_idle+0x2ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	d9 f7       	brne	.-10     	; 0x1b6e <safety_and_idle+0x2cc>
				_delay_ms(1500);				//delay a bit longer to help assure config_mode isn't toggled again

				cli();                	//disable interrupts - seems like a good idea before saving stuff to ROM
    1b78:	f8 94       	cli
				if (in_config_mode == 1) get_config_constants();		//read + set a few constants prior to actually going into config mode
    1b7a:	21 30       	cpi	r18, 0x01	; 1
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <safety_and_idle+0x2e2>
    1b80:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_config_constants>
				if (in_config_mode == 0) save_config();				//if we're exiting config mode - save the configuration
    1b84:	80 91 cc 01 	lds	r24, 0x01CC
    1b88:	90 91 cd 01 	lds	r25, 0x01CD
    1b8c:	89 2b       	or	r24, r25
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <safety_and_idle+0x2f2>
    1b90:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <save_config>
				sei();  //re-enable interrupts
    1b94:	78 94       	sei
    1b96:	5a c0       	rjmp	.+180    	; 0x1c4c <safety_and_idle+0x3aa>
	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
		{
		   
			set_led_off();
    1b98:	5d 98       	cbi	0x0b, 5	; 11
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1b9a:	e1 14       	cp	r14, r1
    1b9c:	f1 04       	cpc	r15, r1
    1b9e:	01 05       	cpc	r16, r1
    1ba0:	11 05       	cpc	r17, r1
    1ba2:	99 f4       	brne	.+38     	; 0x1bca <safety_and_idle+0x328>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
			{
				for (x = 0; x < 15; x++)
				{
					set_led_on();
    1ba8:	5d 9a       	sbi	0x0b, 5	; 11
    1baa:	c1 01       	movw	r24, r2
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <safety_and_idle+0x30a>
					_delay_ms (5);
					set_led_off();
    1bb0:	5d 98       	cbi	0x0b, 5	; 11
    1bb2:	8c e2       	ldi	r24, 0x2C	; 44
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	31 97       	sbiw	r30, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <safety_and_idle+0x316>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	d9 f7       	brne	.-10     	; 0x1bb6 <safety_and_idle+0x314>
    1bc0:	2f 5f       	subi	r18, 0xFF	; 255
    1bc2:	3f 4f       	sbci	r19, 0xFF	; 255
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
			{
				for (x = 0; x < 15; x++)
    1bc4:	2f 30       	cpi	r18, 0x0F	; 15
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	79 f7       	brne	.-34     	; 0x1ba8 <safety_and_idle+0x306>
    1bca:	80 e4       	ldi	r24, 0x40	; 64
    1bcc:	9f e1       	ldi	r25, 0x1F	; 31
    1bce:	fe 01       	movw	r30, r28
    1bd0:	31 97       	sbiw	r30, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <safety_and_idle+0x32e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	d9 f7       	brne	.-10     	; 0x1bce <safety_and_idle+0x32c>
    1bd8:	21 e3       	ldi	r18, 0x31	; 49
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <safety_and_idle+0x368>
}



void safety_and_idle(void)
{
    1be2:	2c 59       	subi	r18, 0x9C	; 156
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	4f 4f       	sbci	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
			{
				x = x + 100;		
				set_led_on();
    1bea:	5d 9a       	sbi	0x0b, 5	; 11
    1bec:	84 ef       	ldi	r24, 0xF4	; 244
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	31 97       	sbiw	r30, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <safety_and_idle+0x350>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	d9 f7       	brne	.-10     	; 0x1bf0 <safety_and_idle+0x34e>
				_delay_ms (50);
				set_led_off();
    1bfa:	5d 98       	cbi	0x0b, 5	; 11
    1bfc:	80 ea       	ldi	r24, 0xA0	; 160
    1bfe:	9f e0       	ldi	r25, 0x0F	; 15
    1c00:	fe 01       	movw	r30, r28
    1c02:	31 97       	sbiw	r30, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <safety_and_idle+0x360>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	d9 f7       	brne	.-10     	; 0x1c00 <safety_and_idle+0x35e>
			}
			
			_delay_ms (800);
			
			x = 49;					//little confusing - but this effectively rounds up (600 rpm = 6 flashes, 650 rpm = 7 flashes)
			while ((x < (max_observed_rpm)) && (forwardback > (forwardback_center + forwardback_forwardthresh)) && throttle < throttle_low)
    1c0a:	2e 15       	cp	r18, r14
    1c0c:	3f 05       	cpc	r19, r15
    1c0e:	40 07       	cpc	r20, r16
    1c10:	51 07       	cpc	r21, r17
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <safety_and_idle+0x374>
    1c14:	43 c0       	rjmp	.+134    	; 0x1c9c <safety_and_idle+0x3fa>
    1c16:	80 91 78 01 	lds	r24, 0x0178
    1c1a:	90 91 79 01 	lds	r25, 0x0179
    1c1e:	a0 91 7a 01 	lds	r26, 0x017A
    1c22:	b0 91 7b 01 	lds	r27, 0x017B
    1c26:	68 16       	cp	r6, r24
    1c28:	79 06       	cpc	r7, r25
    1c2a:	8a 06       	cpc	r8, r26
    1c2c:	9b 06       	cpc	r9, r27
    1c2e:	b4 f5       	brge	.+108    	; 0x1c9c <safety_and_idle+0x3fa>
    1c30:	80 91 92 01 	lds	r24, 0x0192
    1c34:	90 91 93 01 	lds	r25, 0x0193
    1c38:	a0 91 94 01 	lds	r26, 0x0194
    1c3c:	b0 91 95 01 	lds	r27, 0x0195
    1c40:	8a 15       	cp	r24, r10
    1c42:	9b 05       	cpc	r25, r11
    1c44:	ac 05       	cpc	r26, r12
    1c46:	bd 05       	cpc	r27, r13
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <safety_and_idle+0x3fa>
    1c4a:	cb cf       	rjmp	.-106    	; 0x1be2 <safety_and_idle+0x340>
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1c4c:	80 91 12 01 	lds	r24, 0x0112
    1c50:	90 91 13 01 	lds	r25, 0x0113
    1c54:	20 91 10 01 	lds	r18, 0x0110
    1c58:	30 91 11 01 	lds	r19, 0x0111
    1c5c:	82 0f       	add	r24, r18
    1c5e:	93 1f       	adc	r25, r19
    1c60:	3c 01       	movw	r6, r24
    1c62:	88 24       	eor	r8, r8
    1c64:	77 fc       	sbrc	r7, 7
    1c66:	80 94       	com	r8
    1c68:	98 2c       	mov	r9, r8
    1c6a:	80 91 0c 01 	lds	r24, 0x010C
    1c6e:	90 91 0d 01 	lds	r25, 0x010D
    1c72:	5c 01       	movw	r10, r24
    1c74:	cc 24       	eor	r12, r12
    1c76:	b7 fc       	sbrc	r11, 7
    1c78:	c0 94       	com	r12
    1c7a:	dc 2c       	mov	r13, r12
		{
		   
			set_led_off();
			
			//if we haven't recorded an RPM - show a little status flash to show we have signal
			if (max_observed_rpm == 0)
    1c7c:	e0 90 52 01 	lds	r14, 0x0152
    1c80:	f0 90 53 01 	lds	r15, 0x0153
    1c84:	00 91 54 01 	lds	r16, 0x0154
    1c88:	10 91 55 01 	lds	r17, 0x0155
    1c8c:	20 91 70 01 	lds	r18, 0x0170
    1c90:	30 91 71 01 	lds	r19, 0x0171
    1c94:	40 91 72 01 	lds	r20, 0x0172
    1c98:	50 91 73 01 	lds	r21, 0x0173
		}
		      

	  
		// if stick is forward - flash out highest rpm this boot
		while (forwardback > (forwardback_center + forwardback_forwardthresh) && throttle < throttle_low)
    1c9c:	80 91 78 01 	lds	r24, 0x0178
    1ca0:	90 91 79 01 	lds	r25, 0x0179
    1ca4:	a0 91 7a 01 	lds	r26, 0x017A
    1ca8:	b0 91 7b 01 	lds	r27, 0x017B
    1cac:	68 16       	cp	r6, r24
    1cae:	79 06       	cpc	r7, r25
    1cb0:	8a 06       	cpc	r8, r26
    1cb2:	9b 06       	cpc	r9, r27
    1cb4:	74 f4       	brge	.+28     	; 0x1cd2 <safety_and_idle+0x430>
    1cb6:	80 91 92 01 	lds	r24, 0x0192
    1cba:	90 91 93 01 	lds	r25, 0x0193
    1cbe:	a0 91 94 01 	lds	r26, 0x0194
    1cc2:	b0 91 95 01 	lds	r27, 0x0195
    1cc6:	8a 15       	cp	r24, r10
    1cc8:	9b 05       	cpc	r25, r11
    1cca:	ac 05       	cpc	r26, r12
    1ccc:	bd 05       	cpc	r27, r13
    1cce:	0c f4       	brge	.+2      	; 0x1cd2 <safety_and_idle+0x430>
    1cd0:	63 cf       	rjmp	.-314    	; 0x1b98 <safety_and_idle+0x2f6>
    1cd2:	20 93 70 01 	sts	0x0170, r18
    1cd6:	30 93 71 01 	sts	0x0171, r19
    1cda:	40 93 72 01 	sts	0x0172, r20
    1cde:	50 93 73 01 	sts	0x0173, r21
	//also - if we've gone more than 11 rotations without getting fresh throttle data - assume something has gone wrong / shutdown
	//since max allowed rotation time is 400ms - should always fail-safe in under 5 seconds
	//in addition - requires 4 good "throttle up" reads in a row before allowing the loop to be left (hopefully prevents stray RC data from causing spin-up)
		

	while (throttle < throttle_low || throttle > (throttle_high + 100) || rotations_since_throttle_was_set > 11 || throttle_up_count < 4)
    1ce2:	20 91 92 01 	lds	r18, 0x0192
    1ce6:	30 91 93 01 	lds	r19, 0x0193
    1cea:	40 91 94 01 	lds	r20, 0x0194
    1cee:	50 91 95 01 	lds	r21, 0x0195
    1cf2:	80 91 0c 01 	lds	r24, 0x010C
    1cf6:	90 91 0d 01 	lds	r25, 0x010D
    1cfa:	aa 27       	eor	r26, r26
    1cfc:	97 fd       	sbrc	r25, 7
    1cfe:	a0 95       	com	r26
    1d00:	ba 2f       	mov	r27, r26
    1d02:	28 17       	cp	r18, r24
    1d04:	39 07       	cpc	r19, r25
    1d06:	4a 07       	cpc	r20, r26
    1d08:	5b 07       	cpc	r21, r27
    1d0a:	0c f4       	brge	.+2      	; 0x1d0e <safety_and_idle+0x46c>
    1d0c:	e6 cd       	rjmp	.-1076   	; 0x18da <safety_and_idle+0x38>
    1d0e:	20 91 92 01 	lds	r18, 0x0192
    1d12:	30 91 93 01 	lds	r19, 0x0193
    1d16:	40 91 94 01 	lds	r20, 0x0194
    1d1a:	50 91 95 01 	lds	r21, 0x0195
    1d1e:	80 91 0e 01 	lds	r24, 0x010E
    1d22:	90 91 0f 01 	lds	r25, 0x010F
    1d26:	8c 59       	subi	r24, 0x9C	; 156
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	aa 27       	eor	r26, r26
    1d2c:	97 fd       	sbrc	r25, 7
    1d2e:	a0 95       	com	r26
    1d30:	ba 2f       	mov	r27, r26
    1d32:	82 17       	cp	r24, r18
    1d34:	93 07       	cpc	r25, r19
    1d36:	a4 07       	cpc	r26, r20
    1d38:	b5 07       	cpc	r27, r21
    1d3a:	0c f4       	brge	.+2      	; 0x1d3e <safety_and_idle+0x49c>
    1d3c:	ce cd       	rjmp	.-1124   	; 0x18da <safety_and_idle+0x38>
    1d3e:	80 91 4e 01 	lds	r24, 0x014E
    1d42:	90 91 4f 01 	lds	r25, 0x014F
    1d46:	0c 97       	sbiw	r24, 0x0c	; 12
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <safety_and_idle+0x4aa>
    1d4a:	c7 cd       	rjmp	.-1138   	; 0x18da <safety_and_idle+0x38>
    1d4c:	80 91 50 01 	lds	r24, 0x0150
    1d50:	90 91 51 01 	lds	r25, 0x0151
    1d54:	04 97       	sbiw	r24, 0x04	; 4
    1d56:	0c f4       	brge	.+2      	; 0x1d5a <safety_and_idle+0x4b8>
    1d58:	c0 cd       	rjmp	.-1152   	; 0x18da <safety_and_idle+0x38>
		}


	}

}
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	bf 90       	pop	r11
    1d6c:	af 90       	pop	r10
    1d6e:	9f 90       	pop	r9
    1d70:	8f 90       	pop	r8
    1d72:	7f 90       	pop	r7
    1d74:	6f 90       	pop	r6
    1d76:	5f 90       	pop	r5
    1d78:	4f 90       	pop	r4
    1d7a:	3f 90       	pop	r3
    1d7c:	2f 90       	pop	r2
    1d7e:	08 95       	ret

00001d80 <load_config>:

void load_config(void)
{
    1d80:	af 92       	push	r10
    1d82:	bf 92       	push	r11
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17

	float tracking_word1;		//first word of tracking_comp
	float tracking_word2;		//second word of tracking_comp

	//only load config data if "saved_data_valid" indicates it was saved previously
	if (eeprom_read_word(&saved_data_valid) == 128)
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1d98:	80 38       	cpi	r24, 0x80	; 128
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <load_config+0x20>
    1d9e:	64 c0       	rjmp	.+200    	; 0x1e68 <load_config+0xe8>
	{

		led_adjust = eeprom_read_word(&led_adjust_save);	//loads led offset
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
    1db4:	60 93 3c 01 	sts	0x013C, r22
    1db8:	70 93 3d 01 	sts	0x013D, r23
    1dbc:	80 93 3e 01 	sts	0x013E, r24
    1dc0:	90 93 3f 01 	sts	0x013F, r25
		tracking_word1 = (eeprom_read_word(&tracking_comp_save_word1));		//loads tracking comp
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1dcc:	a0 e0       	ldi	r26, 0x00	; 0
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
    1dd8:	5b 01       	movw	r10, r22
    1dda:	6c 01       	movw	r12, r24
		tracking_word2 = (eeprom_read_word(&tracking_comp_save_word2));		//loads tracking comp
    1ddc:	86 e0       	ldi	r24, 0x06	; 6
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 92 10 	call	0x2124	; 0x2124 <__floatunsisf>
    1df0:	7b 01       	movw	r14, r22
    1df2:	8c 01       	movw	r16, r24
		heading_center = eeprom_read_word(&heading_center_save);	//loads heading_center
    1df4:	88 e0       	ldi	r24, 0x08	; 8
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1dfc:	90 93 17 01 	sts	0x0117, r25
    1e00:	80 93 16 01 	sts	0x0116, r24
		base_accel = eeprom_read_word(&base_accel_save);		//loads base accelerometer value
    1e04:	8a e0       	ldi	r24, 0x0A	; 10
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 85 12 	call	0x250a	; 0x250a <__eerd_word_m168>
    1e0c:	90 93 41 01 	sts	0x0141, r25
    1e10:	80 93 40 01 	sts	0x0140, r24
	
		tracking_word1 = tracking_word1 / 1000;	//converts 1st tracking comp word back to float
		
		tracking_word2 = tracking_word2 / 1000;		//converts 2nd tracking comp word back to float
    1e14:	c8 01       	movw	r24, r16
    1e16:	b7 01       	movw	r22, r14
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    1e24:	7b 01       	movw	r14, r22
    1e26:	8c 01       	movw	r16, r24
		tracking_word2 = tracking_word2 / 10000;	//put it in the correct decimal place
		
		tracking_comp = tracking_word1 + tracking_word2;	//puts the two floats together
    1e28:	c6 01       	movw	r24, r12
    1e2a:	b5 01       	movw	r22, r10
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    1e38:	5b 01       	movw	r10, r22
    1e3a:	6c 01       	movw	r12, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	b7 01       	movw	r22, r14
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e4       	ldi	r19, 0x40	; 64
    1e44:	4c e1       	ldi	r20, 0x1C	; 28
    1e46:	56 e4       	ldi	r21, 0x46	; 70
    1e48:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__divsf3>
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	ac 01       	movw	r20, r24
    1e50:	c6 01       	movw	r24, r12
    1e52:	b5 01       	movw	r22, r10
    1e54:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__addsf3>
    1e58:	60 93 38 01 	sts	0x0138, r22
    1e5c:	70 93 39 01 	sts	0x0139, r23
    1e60:	80 93 3a 01 	sts	0x013A, r24
    1e64:	90 93 3b 01 	sts	0x013B, r25
	}

}
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	bf 90       	pop	r11
    1e76:	af 90       	pop	r10
    1e78:	08 95       	ret

00001e7a <main>:

int main(void)
{
	
		
	setup();			//do initial setup stuff - set pins / interrupts / etc.
    1e7a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <setup>
			
	load_config();		//try to load configuration data from ROM
    1e7e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <load_config>
	{		
		
												//the lines before main_calculations don't have their execution time accounted for in the code 
												//but only take approximately 2us to execute (measured) - (0.006% of a rotation at 2000 rpm)
												
		rotations_since_throttle_was_set ++;	//used as a safety counter - if no good throttle data is received for certain number of rotations - the bot shuts down
    1e82:	80 91 4e 01 	lds	r24, 0x014E
    1e86:	90 91 4f 01 	lds	r25, 0x014F
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	90 93 4f 01 	sts	0x014F, r25
    1e90:	80 93 4e 01 	sts	0x014E, r24
		rotation_count ++;
    1e94:	80 91 46 01 	lds	r24, 0x0146
    1e98:	90 91 47 01 	lds	r25, 0x0147
    1e9c:	a0 91 48 01 	lds	r26, 0x0148
    1ea0:	b0 91 49 01 	lds	r27, 0x0149
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	a1 1d       	adc	r26, r1
    1ea8:	b1 1d       	adc	r27, r1
    1eaa:	80 93 46 01 	sts	0x0146, r24
    1eae:	90 93 47 01 	sts	0x0147, r25
    1eb2:	a0 93 48 01 	sts	0x0148, r26
    1eb6:	b0 93 49 01 	sts	0x0149, r27
				
		safety_and_idle();						//does safety check / sees if we're just sitting idle - also checks if config mode is requested
    1eba:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <safety_and_idle>
		
		alternate_motor_cycle = !alternate_motor_cycle;     //alternates alternate_motor_cycle - used to balance spin / avoid favoring one motor
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	80 91 4a 01 	lds	r24, 0x014A
    1ec6:	90 91 4b 01 	lds	r25, 0x014B
    1eca:	89 2b       	or	r24, r25
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <main+0x58>
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	30 93 4b 01 	sts	0x014B, r19
    1ed6:	20 93 4a 01 	sts	0x014A, r18

		led_hold_over = 0;						//reset the LED counter
    1eda:	10 92 74 01 	sts	0x0174, r1
    1ede:	10 92 75 01 	sts	0x0175, r1
    1ee2:	10 92 76 01 	sts	0x0176, r1
    1ee6:	10 92 77 01 	sts	0x0177, r1
		
		main_calculations();					//reads accel data and does all the math
    1eea:	0e 94 ce 06 	call	0xd9c	; 0xd9c <main_calculations>
												//takes about 400us - but is measured real-time / compensated for

		do_spin_180(1);							//1st 180 degrees of spin
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 ba 02 	call	0x574	; 0x574 <do_spin_180>

		led_hold_over = TCNT1;					//carry over led_counter from last spin
    1ef6:	80 91 84 00 	lds	r24, 0x0084
    1efa:	90 91 85 00 	lds	r25, 0x0085
    1efe:	a0 e0       	ldi	r26, 0x00	; 0
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	80 93 74 01 	sts	0x0174, r24
    1f06:	90 93 75 01 	sts	0x0175, r25
    1f0a:	a0 93 76 01 	sts	0x0176, r26
    1f0e:	b0 93 77 01 	sts	0x0177, r27
				
		main_calculations();					//read accel / do the main calculations again
    1f12:	0e 94 ce 06 	call	0xd9c	; 0xd9c <main_calculations>
												//time doing math is tracked - but since time doing calculations is outside the motor loop - if it all falls in one cycle or the other...
												//..it may still be enough to cause a slight bias when translating
												//should really present a very small amount of time (less than 1% at 2000rpm) 
												//since we're resampling the accel - this may also provide a little better accuracy

		do_spin_180(2);							//2nd 180 degrees of spin
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 ba 02 	call	0x574	; 0x574 <do_spin_180>
    1f1e:	b1 cf       	rjmp	.-158    	; 0x1e82 <main+0x8>

00001f20 <__subsf3>:
    1f20:	50 58       	subi	r21, 0x80	; 128

00001f22 <__addsf3>:
    1f22:	bb 27       	eor	r27, r27
    1f24:	aa 27       	eor	r26, r26
    1f26:	0e d0       	rcall	.+28     	; 0x1f44 <__addsf3x>
    1f28:	75 c1       	rjmp	.+746    	; 0x2214 <__fp_round>
    1f2a:	66 d1       	rcall	.+716    	; 0x21f8 <__fp_pscA>
    1f2c:	30 f0       	brcs	.+12     	; 0x1f3a <__addsf3+0x18>
    1f2e:	6b d1       	rcall	.+726    	; 0x2206 <__fp_pscB>
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <__addsf3+0x18>
    1f32:	31 f4       	brne	.+12     	; 0x1f40 <__addsf3+0x1e>
    1f34:	9f 3f       	cpi	r25, 0xFF	; 255
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <__addsf3+0x1a>
    1f38:	1e f4       	brtc	.+6      	; 0x1f40 <__addsf3+0x1e>
    1f3a:	5b c1       	rjmp	.+694    	; 0x21f2 <__fp_nan>
    1f3c:	0e f4       	brtc	.+2      	; 0x1f40 <__addsf3+0x1e>
    1f3e:	e0 95       	com	r30
    1f40:	e7 fb       	bst	r30, 7
    1f42:	51 c1       	rjmp	.+674    	; 0x21e6 <__fp_inf>

00001f44 <__addsf3x>:
    1f44:	e9 2f       	mov	r30, r25
    1f46:	77 d1       	rcall	.+750    	; 0x2236 <__fp_split3>
    1f48:	80 f3       	brcs	.-32     	; 0x1f2a <__addsf3+0x8>
    1f4a:	ba 17       	cp	r27, r26
    1f4c:	62 07       	cpc	r22, r18
    1f4e:	73 07       	cpc	r23, r19
    1f50:	84 07       	cpc	r24, r20
    1f52:	95 07       	cpc	r25, r21
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <__addsf3x+0x18>
    1f56:	71 f4       	brne	.+28     	; 0x1f74 <__addsf3x+0x30>
    1f58:	9e f5       	brtc	.+102    	; 0x1fc0 <__addsf3x+0x7c>
    1f5a:	8f c1       	rjmp	.+798    	; 0x227a <__fp_zero>
    1f5c:	0e f4       	brtc	.+2      	; 0x1f60 <__addsf3x+0x1c>
    1f5e:	e0 95       	com	r30
    1f60:	0b 2e       	mov	r0, r27
    1f62:	ba 2f       	mov	r27, r26
    1f64:	a0 2d       	mov	r26, r0
    1f66:	0b 01       	movw	r0, r22
    1f68:	b9 01       	movw	r22, r18
    1f6a:	90 01       	movw	r18, r0
    1f6c:	0c 01       	movw	r0, r24
    1f6e:	ca 01       	movw	r24, r20
    1f70:	a0 01       	movw	r20, r0
    1f72:	11 24       	eor	r1, r1
    1f74:	ff 27       	eor	r31, r31
    1f76:	59 1b       	sub	r21, r25
    1f78:	99 f0       	breq	.+38     	; 0x1fa0 <__addsf3x+0x5c>
    1f7a:	59 3f       	cpi	r21, 0xF9	; 249
    1f7c:	50 f4       	brcc	.+20     	; 0x1f92 <__addsf3x+0x4e>
    1f7e:	50 3e       	cpi	r21, 0xE0	; 224
    1f80:	68 f1       	brcs	.+90     	; 0x1fdc <__addsf3x+0x98>
    1f82:	1a 16       	cp	r1, r26
    1f84:	f0 40       	sbci	r31, 0x00	; 0
    1f86:	a2 2f       	mov	r26, r18
    1f88:	23 2f       	mov	r18, r19
    1f8a:	34 2f       	mov	r19, r20
    1f8c:	44 27       	eor	r20, r20
    1f8e:	58 5f       	subi	r21, 0xF8	; 248
    1f90:	f3 cf       	rjmp	.-26     	; 0x1f78 <__addsf3x+0x34>
    1f92:	46 95       	lsr	r20
    1f94:	37 95       	ror	r19
    1f96:	27 95       	ror	r18
    1f98:	a7 95       	ror	r26
    1f9a:	f0 40       	sbci	r31, 0x00	; 0
    1f9c:	53 95       	inc	r21
    1f9e:	c9 f7       	brne	.-14     	; 0x1f92 <__addsf3x+0x4e>
    1fa0:	7e f4       	brtc	.+30     	; 0x1fc0 <__addsf3x+0x7c>
    1fa2:	1f 16       	cp	r1, r31
    1fa4:	ba 0b       	sbc	r27, r26
    1fa6:	62 0b       	sbc	r22, r18
    1fa8:	73 0b       	sbc	r23, r19
    1faa:	84 0b       	sbc	r24, r20
    1fac:	ba f0       	brmi	.+46     	; 0x1fdc <__addsf3x+0x98>
    1fae:	91 50       	subi	r25, 0x01	; 1
    1fb0:	a1 f0       	breq	.+40     	; 0x1fda <__addsf3x+0x96>
    1fb2:	ff 0f       	add	r31, r31
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	66 1f       	adc	r22, r22
    1fb8:	77 1f       	adc	r23, r23
    1fba:	88 1f       	adc	r24, r24
    1fbc:	c2 f7       	brpl	.-16     	; 0x1fae <__addsf3x+0x6a>
    1fbe:	0e c0       	rjmp	.+28     	; 0x1fdc <__addsf3x+0x98>
    1fc0:	ba 0f       	add	r27, r26
    1fc2:	62 1f       	adc	r22, r18
    1fc4:	73 1f       	adc	r23, r19
    1fc6:	84 1f       	adc	r24, r20
    1fc8:	48 f4       	brcc	.+18     	; 0x1fdc <__addsf3x+0x98>
    1fca:	87 95       	ror	r24
    1fcc:	77 95       	ror	r23
    1fce:	67 95       	ror	r22
    1fd0:	b7 95       	ror	r27
    1fd2:	f7 95       	ror	r31
    1fd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <__addsf3x+0x96>
    1fd8:	b3 cf       	rjmp	.-154    	; 0x1f40 <__addsf3+0x1e>
    1fda:	93 95       	inc	r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <__addsf3x+0x9e>
    1fe0:	99 27       	eor	r25, r25
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	97 95       	ror	r25
    1fe6:	87 95       	ror	r24
    1fe8:	08 95       	ret

00001fea <__cmpsf2>:
    1fea:	d9 d0       	rcall	.+434    	; 0x219e <__fp_cmp>
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <__cmpsf2+0x6>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	08 95       	ret

00001ff2 <__divsf3>:
    1ff2:	0c d0       	rcall	.+24     	; 0x200c <__divsf3x>
    1ff4:	0f c1       	rjmp	.+542    	; 0x2214 <__fp_round>
    1ff6:	07 d1       	rcall	.+526    	; 0x2206 <__fp_pscB>
    1ff8:	40 f0       	brcs	.+16     	; 0x200a <__divsf3+0x18>
    1ffa:	fe d0       	rcall	.+508    	; 0x21f8 <__fp_pscA>
    1ffc:	30 f0       	brcs	.+12     	; 0x200a <__divsf3+0x18>
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <__divsf3+0x16>
    2000:	5f 3f       	cpi	r21, 0xFF	; 255
    2002:	19 f0       	breq	.+6      	; 0x200a <__divsf3+0x18>
    2004:	f0 c0       	rjmp	.+480    	; 0x21e6 <__fp_inf>
    2006:	51 11       	cpse	r21, r1
    2008:	39 c1       	rjmp	.+626    	; 0x227c <__fp_szero>
    200a:	f3 c0       	rjmp	.+486    	; 0x21f2 <__fp_nan>

0000200c <__divsf3x>:
    200c:	14 d1       	rcall	.+552    	; 0x2236 <__fp_split3>
    200e:	98 f3       	brcs	.-26     	; 0x1ff6 <__divsf3+0x4>

00002010 <__divsf3_pse>:
    2010:	99 23       	and	r25, r25
    2012:	c9 f3       	breq	.-14     	; 0x2006 <__divsf3+0x14>
    2014:	55 23       	and	r21, r21
    2016:	b1 f3       	breq	.-20     	; 0x2004 <__divsf3+0x12>
    2018:	95 1b       	sub	r25, r21
    201a:	55 0b       	sbc	r21, r21
    201c:	bb 27       	eor	r27, r27
    201e:	aa 27       	eor	r26, r26
    2020:	62 17       	cp	r22, r18
    2022:	73 07       	cpc	r23, r19
    2024:	84 07       	cpc	r24, r20
    2026:	38 f0       	brcs	.+14     	; 0x2036 <__divsf3_pse+0x26>
    2028:	9f 5f       	subi	r25, 0xFF	; 255
    202a:	5f 4f       	sbci	r21, 0xFF	; 255
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	44 1f       	adc	r20, r20
    2032:	aa 1f       	adc	r26, r26
    2034:	a9 f3       	breq	.-22     	; 0x2020 <__divsf3_pse+0x10>
    2036:	33 d0       	rcall	.+102    	; 0x209e <__divsf3_pse+0x8e>
    2038:	0e 2e       	mov	r0, r30
    203a:	3a f0       	brmi	.+14     	; 0x204a <__divsf3_pse+0x3a>
    203c:	e0 e8       	ldi	r30, 0x80	; 128
    203e:	30 d0       	rcall	.+96     	; 0x20a0 <__divsf3_pse+0x90>
    2040:	91 50       	subi	r25, 0x01	; 1
    2042:	50 40       	sbci	r21, 0x00	; 0
    2044:	e6 95       	lsr	r30
    2046:	00 1c       	adc	r0, r0
    2048:	ca f7       	brpl	.-14     	; 0x203c <__divsf3_pse+0x2c>
    204a:	29 d0       	rcall	.+82     	; 0x209e <__divsf3_pse+0x8e>
    204c:	fe 2f       	mov	r31, r30
    204e:	27 d0       	rcall	.+78     	; 0x209e <__divsf3_pse+0x8e>
    2050:	66 0f       	add	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	bb 1f       	adc	r27, r27
    2058:	26 17       	cp	r18, r22
    205a:	37 07       	cpc	r19, r23
    205c:	48 07       	cpc	r20, r24
    205e:	ab 07       	cpc	r26, r27
    2060:	b0 e8       	ldi	r27, 0x80	; 128
    2062:	09 f0       	breq	.+2      	; 0x2066 <__divsf3_pse+0x56>
    2064:	bb 0b       	sbc	r27, r27
    2066:	80 2d       	mov	r24, r0
    2068:	bf 01       	movw	r22, r30
    206a:	ff 27       	eor	r31, r31
    206c:	93 58       	subi	r25, 0x83	; 131
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	2a f0       	brmi	.+10     	; 0x207c <__divsf3_pse+0x6c>
    2072:	9e 3f       	cpi	r25, 0xFE	; 254
    2074:	51 05       	cpc	r21, r1
    2076:	68 f0       	brcs	.+26     	; 0x2092 <__divsf3_pse+0x82>
    2078:	b6 c0       	rjmp	.+364    	; 0x21e6 <__fp_inf>
    207a:	00 c1       	rjmp	.+512    	; 0x227c <__fp_szero>
    207c:	5f 3f       	cpi	r21, 0xFF	; 255
    207e:	ec f3       	brlt	.-6      	; 0x207a <__divsf3_pse+0x6a>
    2080:	98 3e       	cpi	r25, 0xE8	; 232
    2082:	dc f3       	brlt	.-10     	; 0x207a <__divsf3_pse+0x6a>
    2084:	86 95       	lsr	r24
    2086:	77 95       	ror	r23
    2088:	67 95       	ror	r22
    208a:	b7 95       	ror	r27
    208c:	f7 95       	ror	r31
    208e:	9f 5f       	subi	r25, 0xFF	; 255
    2090:	c9 f7       	brne	.-14     	; 0x2084 <__divsf3_pse+0x74>
    2092:	88 0f       	add	r24, r24
    2094:	91 1d       	adc	r25, r1
    2096:	96 95       	lsr	r25
    2098:	87 95       	ror	r24
    209a:	97 f9       	bld	r25, 7
    209c:	08 95       	ret
    209e:	e1 e0       	ldi	r30, 0x01	; 1
    20a0:	66 0f       	add	r22, r22
    20a2:	77 1f       	adc	r23, r23
    20a4:	88 1f       	adc	r24, r24
    20a6:	bb 1f       	adc	r27, r27
    20a8:	62 17       	cp	r22, r18
    20aa:	73 07       	cpc	r23, r19
    20ac:	84 07       	cpc	r24, r20
    20ae:	ba 07       	cpc	r27, r26
    20b0:	20 f0       	brcs	.+8      	; 0x20ba <__divsf3_pse+0xaa>
    20b2:	62 1b       	sub	r22, r18
    20b4:	73 0b       	sbc	r23, r19
    20b6:	84 0b       	sbc	r24, r20
    20b8:	ba 0b       	sbc	r27, r26
    20ba:	ee 1f       	adc	r30, r30
    20bc:	88 f7       	brcc	.-30     	; 0x20a0 <__divsf3_pse+0x90>
    20be:	e0 95       	com	r30
    20c0:	08 95       	ret

000020c2 <__fixsfsi>:
    20c2:	04 d0       	rcall	.+8      	; 0x20cc <__fixunssfsi>
    20c4:	68 94       	set
    20c6:	b1 11       	cpse	r27, r1
    20c8:	d9 c0       	rjmp	.+434    	; 0x227c <__fp_szero>
    20ca:	08 95       	ret

000020cc <__fixunssfsi>:
    20cc:	bc d0       	rcall	.+376    	; 0x2246 <__fp_splitA>
    20ce:	88 f0       	brcs	.+34     	; 0x20f2 <__fixunssfsi+0x26>
    20d0:	9f 57       	subi	r25, 0x7F	; 127
    20d2:	90 f0       	brcs	.+36     	; 0x20f8 <__fixunssfsi+0x2c>
    20d4:	b9 2f       	mov	r27, r25
    20d6:	99 27       	eor	r25, r25
    20d8:	b7 51       	subi	r27, 0x17	; 23
    20da:	a0 f0       	brcs	.+40     	; 0x2104 <__fixunssfsi+0x38>
    20dc:	d1 f0       	breq	.+52     	; 0x2112 <__fixunssfsi+0x46>
    20de:	66 0f       	add	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	1a f0       	brmi	.+6      	; 0x20ee <__fixunssfsi+0x22>
    20e8:	ba 95       	dec	r27
    20ea:	c9 f7       	brne	.-14     	; 0x20de <__fixunssfsi+0x12>
    20ec:	12 c0       	rjmp	.+36     	; 0x2112 <__fixunssfsi+0x46>
    20ee:	b1 30       	cpi	r27, 0x01	; 1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <__fixunssfsi+0x46>
    20f2:	c3 d0       	rcall	.+390    	; 0x227a <__fp_zero>
    20f4:	b1 e0       	ldi	r27, 0x01	; 1
    20f6:	08 95       	ret
    20f8:	c0 c0       	rjmp	.+384    	; 0x227a <__fp_zero>
    20fa:	67 2f       	mov	r22, r23
    20fc:	78 2f       	mov	r23, r24
    20fe:	88 27       	eor	r24, r24
    2100:	b8 5f       	subi	r27, 0xF8	; 248
    2102:	39 f0       	breq	.+14     	; 0x2112 <__fixunssfsi+0x46>
    2104:	b9 3f       	cpi	r27, 0xF9	; 249
    2106:	cc f3       	brlt	.-14     	; 0x20fa <__fixunssfsi+0x2e>
    2108:	86 95       	lsr	r24
    210a:	77 95       	ror	r23
    210c:	67 95       	ror	r22
    210e:	b3 95       	inc	r27
    2110:	d9 f7       	brne	.-10     	; 0x2108 <__fixunssfsi+0x3c>
    2112:	3e f4       	brtc	.+14     	; 0x2122 <__fixunssfsi+0x56>
    2114:	90 95       	com	r25
    2116:	80 95       	com	r24
    2118:	70 95       	com	r23
    211a:	61 95       	neg	r22
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	8f 4f       	sbci	r24, 0xFF	; 255
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	08 95       	ret

00002124 <__floatunsisf>:
    2124:	e8 94       	clt
    2126:	09 c0       	rjmp	.+18     	; 0x213a <__floatsisf+0x12>

00002128 <__floatsisf>:
    2128:	97 fb       	bst	r25, 7
    212a:	3e f4       	brtc	.+14     	; 0x213a <__floatsisf+0x12>
    212c:	90 95       	com	r25
    212e:	80 95       	com	r24
    2130:	70 95       	com	r23
    2132:	61 95       	neg	r22
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	8f 4f       	sbci	r24, 0xFF	; 255
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	99 23       	and	r25, r25
    213c:	a9 f0       	breq	.+42     	; 0x2168 <__floatsisf+0x40>
    213e:	f9 2f       	mov	r31, r25
    2140:	96 e9       	ldi	r25, 0x96	; 150
    2142:	bb 27       	eor	r27, r27
    2144:	93 95       	inc	r25
    2146:	f6 95       	lsr	r31
    2148:	87 95       	ror	r24
    214a:	77 95       	ror	r23
    214c:	67 95       	ror	r22
    214e:	b7 95       	ror	r27
    2150:	f1 11       	cpse	r31, r1
    2152:	f8 cf       	rjmp	.-16     	; 0x2144 <__floatsisf+0x1c>
    2154:	fa f4       	brpl	.+62     	; 0x2194 <__floatsisf+0x6c>
    2156:	bb 0f       	add	r27, r27
    2158:	11 f4       	brne	.+4      	; 0x215e <__floatsisf+0x36>
    215a:	60 ff       	sbrs	r22, 0
    215c:	1b c0       	rjmp	.+54     	; 0x2194 <__floatsisf+0x6c>
    215e:	6f 5f       	subi	r22, 0xFF	; 255
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	8f 4f       	sbci	r24, 0xFF	; 255
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	16 c0       	rjmp	.+44     	; 0x2194 <__floatsisf+0x6c>
    2168:	88 23       	and	r24, r24
    216a:	11 f0       	breq	.+4      	; 0x2170 <__floatsisf+0x48>
    216c:	96 e9       	ldi	r25, 0x96	; 150
    216e:	11 c0       	rjmp	.+34     	; 0x2192 <__floatsisf+0x6a>
    2170:	77 23       	and	r23, r23
    2172:	21 f0       	breq	.+8      	; 0x217c <__floatsisf+0x54>
    2174:	9e e8       	ldi	r25, 0x8E	; 142
    2176:	87 2f       	mov	r24, r23
    2178:	76 2f       	mov	r23, r22
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <__floatsisf+0x5e>
    217c:	66 23       	and	r22, r22
    217e:	71 f0       	breq	.+28     	; 0x219c <__floatsisf+0x74>
    2180:	96 e8       	ldi	r25, 0x86	; 134
    2182:	86 2f       	mov	r24, r22
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	2a f0       	brmi	.+10     	; 0x2194 <__floatsisf+0x6c>
    218a:	9a 95       	dec	r25
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	da f7       	brpl	.-10     	; 0x218a <__floatsisf+0x62>
    2194:	88 0f       	add	r24, r24
    2196:	96 95       	lsr	r25
    2198:	87 95       	ror	r24
    219a:	97 f9       	bld	r25, 7
    219c:	08 95       	ret

0000219e <__fp_cmp>:
    219e:	99 0f       	add	r25, r25
    21a0:	00 08       	sbc	r0, r0
    21a2:	55 0f       	add	r21, r21
    21a4:	aa 0b       	sbc	r26, r26
    21a6:	e0 e8       	ldi	r30, 0x80	; 128
    21a8:	fe ef       	ldi	r31, 0xFE	; 254
    21aa:	16 16       	cp	r1, r22
    21ac:	17 06       	cpc	r1, r23
    21ae:	e8 07       	cpc	r30, r24
    21b0:	f9 07       	cpc	r31, r25
    21b2:	c0 f0       	brcs	.+48     	; 0x21e4 <__fp_cmp+0x46>
    21b4:	12 16       	cp	r1, r18
    21b6:	13 06       	cpc	r1, r19
    21b8:	e4 07       	cpc	r30, r20
    21ba:	f5 07       	cpc	r31, r21
    21bc:	98 f0       	brcs	.+38     	; 0x21e4 <__fp_cmp+0x46>
    21be:	62 1b       	sub	r22, r18
    21c0:	73 0b       	sbc	r23, r19
    21c2:	84 0b       	sbc	r24, r20
    21c4:	95 0b       	sbc	r25, r21
    21c6:	39 f4       	brne	.+14     	; 0x21d6 <__fp_cmp+0x38>
    21c8:	0a 26       	eor	r0, r26
    21ca:	61 f0       	breq	.+24     	; 0x21e4 <__fp_cmp+0x46>
    21cc:	23 2b       	or	r18, r19
    21ce:	24 2b       	or	r18, r20
    21d0:	25 2b       	or	r18, r21
    21d2:	21 f4       	brne	.+8      	; 0x21dc <__fp_cmp+0x3e>
    21d4:	08 95       	ret
    21d6:	0a 26       	eor	r0, r26
    21d8:	09 f4       	brne	.+2      	; 0x21dc <__fp_cmp+0x3e>
    21da:	a1 40       	sbci	r26, 0x01	; 1
    21dc:	a6 95       	lsr	r26
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	81 1d       	adc	r24, r1
    21e2:	81 1d       	adc	r24, r1
    21e4:	08 95       	ret

000021e6 <__fp_inf>:
    21e6:	97 f9       	bld	r25, 7
    21e8:	9f 67       	ori	r25, 0x7F	; 127
    21ea:	80 e8       	ldi	r24, 0x80	; 128
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	08 95       	ret

000021f2 <__fp_nan>:
    21f2:	9f ef       	ldi	r25, 0xFF	; 255
    21f4:	80 ec       	ldi	r24, 0xC0	; 192
    21f6:	08 95       	ret

000021f8 <__fp_pscA>:
    21f8:	00 24       	eor	r0, r0
    21fa:	0a 94       	dec	r0
    21fc:	16 16       	cp	r1, r22
    21fe:	17 06       	cpc	r1, r23
    2200:	18 06       	cpc	r1, r24
    2202:	09 06       	cpc	r0, r25
    2204:	08 95       	ret

00002206 <__fp_pscB>:
    2206:	00 24       	eor	r0, r0
    2208:	0a 94       	dec	r0
    220a:	12 16       	cp	r1, r18
    220c:	13 06       	cpc	r1, r19
    220e:	14 06       	cpc	r1, r20
    2210:	05 06       	cpc	r0, r21
    2212:	08 95       	ret

00002214 <__fp_round>:
    2214:	09 2e       	mov	r0, r25
    2216:	03 94       	inc	r0
    2218:	00 0c       	add	r0, r0
    221a:	11 f4       	brne	.+4      	; 0x2220 <__fp_round+0xc>
    221c:	88 23       	and	r24, r24
    221e:	52 f0       	brmi	.+20     	; 0x2234 <__fp_round+0x20>
    2220:	bb 0f       	add	r27, r27
    2222:	40 f4       	brcc	.+16     	; 0x2234 <__fp_round+0x20>
    2224:	bf 2b       	or	r27, r31
    2226:	11 f4       	brne	.+4      	; 0x222c <__fp_round+0x18>
    2228:	60 ff       	sbrs	r22, 0
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__fp_round+0x20>
    222c:	6f 5f       	subi	r22, 0xFF	; 255
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	8f 4f       	sbci	r24, 0xFF	; 255
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	08 95       	ret

00002236 <__fp_split3>:
    2236:	57 fd       	sbrc	r21, 7
    2238:	90 58       	subi	r25, 0x80	; 128
    223a:	44 0f       	add	r20, r20
    223c:	55 1f       	adc	r21, r21
    223e:	59 f0       	breq	.+22     	; 0x2256 <__fp_splitA+0x10>
    2240:	5f 3f       	cpi	r21, 0xFF	; 255
    2242:	71 f0       	breq	.+28     	; 0x2260 <__fp_splitA+0x1a>
    2244:	47 95       	ror	r20

00002246 <__fp_splitA>:
    2246:	88 0f       	add	r24, r24
    2248:	97 fb       	bst	r25, 7
    224a:	99 1f       	adc	r25, r25
    224c:	61 f0       	breq	.+24     	; 0x2266 <__fp_splitA+0x20>
    224e:	9f 3f       	cpi	r25, 0xFF	; 255
    2250:	79 f0       	breq	.+30     	; 0x2270 <__fp_splitA+0x2a>
    2252:	87 95       	ror	r24
    2254:	08 95       	ret
    2256:	12 16       	cp	r1, r18
    2258:	13 06       	cpc	r1, r19
    225a:	14 06       	cpc	r1, r20
    225c:	55 1f       	adc	r21, r21
    225e:	f2 cf       	rjmp	.-28     	; 0x2244 <__fp_split3+0xe>
    2260:	46 95       	lsr	r20
    2262:	f1 df       	rcall	.-30     	; 0x2246 <__fp_splitA>
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <__fp_splitA+0x30>
    2266:	16 16       	cp	r1, r22
    2268:	17 06       	cpc	r1, r23
    226a:	18 06       	cpc	r1, r24
    226c:	99 1f       	adc	r25, r25
    226e:	f1 cf       	rjmp	.-30     	; 0x2252 <__fp_splitA+0xc>
    2270:	86 95       	lsr	r24
    2272:	71 05       	cpc	r23, r1
    2274:	61 05       	cpc	r22, r1
    2276:	08 94       	sec
    2278:	08 95       	ret

0000227a <__fp_zero>:
    227a:	e8 94       	clt

0000227c <__fp_szero>:
    227c:	bb 27       	eor	r27, r27
    227e:	66 27       	eor	r22, r22
    2280:	77 27       	eor	r23, r23
    2282:	cb 01       	movw	r24, r22
    2284:	97 f9       	bld	r25, 7
    2286:	08 95       	ret

00002288 <__gesf2>:
    2288:	8a df       	rcall	.-236    	; 0x219e <__fp_cmp>
    228a:	08 f4       	brcc	.+2      	; 0x228e <__gesf2+0x6>
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	08 95       	ret

00002290 <__mulsf3>:
    2290:	0b d0       	rcall	.+22     	; 0x22a8 <__mulsf3x>
    2292:	c0 cf       	rjmp	.-128    	; 0x2214 <__fp_round>
    2294:	b1 df       	rcall	.-158    	; 0x21f8 <__fp_pscA>
    2296:	28 f0       	brcs	.+10     	; 0x22a2 <__mulsf3+0x12>
    2298:	b6 df       	rcall	.-148    	; 0x2206 <__fp_pscB>
    229a:	18 f0       	brcs	.+6      	; 0x22a2 <__mulsf3+0x12>
    229c:	95 23       	and	r25, r21
    229e:	09 f0       	breq	.+2      	; 0x22a2 <__mulsf3+0x12>
    22a0:	a2 cf       	rjmp	.-188    	; 0x21e6 <__fp_inf>
    22a2:	a7 cf       	rjmp	.-178    	; 0x21f2 <__fp_nan>
    22a4:	11 24       	eor	r1, r1
    22a6:	ea cf       	rjmp	.-44     	; 0x227c <__fp_szero>

000022a8 <__mulsf3x>:
    22a8:	c6 df       	rcall	.-116    	; 0x2236 <__fp_split3>
    22aa:	a0 f3       	brcs	.-24     	; 0x2294 <__mulsf3+0x4>

000022ac <__mulsf3_pse>:
    22ac:	95 9f       	mul	r25, r21
    22ae:	d1 f3       	breq	.-12     	; 0x22a4 <__mulsf3+0x14>
    22b0:	95 0f       	add	r25, r21
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	55 1f       	adc	r21, r21
    22b6:	62 9f       	mul	r22, r18
    22b8:	f0 01       	movw	r30, r0
    22ba:	72 9f       	mul	r23, r18
    22bc:	bb 27       	eor	r27, r27
    22be:	f0 0d       	add	r31, r0
    22c0:	b1 1d       	adc	r27, r1
    22c2:	63 9f       	mul	r22, r19
    22c4:	aa 27       	eor	r26, r26
    22c6:	f0 0d       	add	r31, r0
    22c8:	b1 1d       	adc	r27, r1
    22ca:	aa 1f       	adc	r26, r26
    22cc:	64 9f       	mul	r22, r20
    22ce:	66 27       	eor	r22, r22
    22d0:	b0 0d       	add	r27, r0
    22d2:	a1 1d       	adc	r26, r1
    22d4:	66 1f       	adc	r22, r22
    22d6:	82 9f       	mul	r24, r18
    22d8:	22 27       	eor	r18, r18
    22da:	b0 0d       	add	r27, r0
    22dc:	a1 1d       	adc	r26, r1
    22de:	62 1f       	adc	r22, r18
    22e0:	73 9f       	mul	r23, r19
    22e2:	b0 0d       	add	r27, r0
    22e4:	a1 1d       	adc	r26, r1
    22e6:	62 1f       	adc	r22, r18
    22e8:	83 9f       	mul	r24, r19
    22ea:	a0 0d       	add	r26, r0
    22ec:	61 1d       	adc	r22, r1
    22ee:	22 1f       	adc	r18, r18
    22f0:	74 9f       	mul	r23, r20
    22f2:	33 27       	eor	r19, r19
    22f4:	a0 0d       	add	r26, r0
    22f6:	61 1d       	adc	r22, r1
    22f8:	23 1f       	adc	r18, r19
    22fa:	84 9f       	mul	r24, r20
    22fc:	60 0d       	add	r22, r0
    22fe:	21 1d       	adc	r18, r1
    2300:	82 2f       	mov	r24, r18
    2302:	76 2f       	mov	r23, r22
    2304:	6a 2f       	mov	r22, r26
    2306:	11 24       	eor	r1, r1
    2308:	9f 57       	subi	r25, 0x7F	; 127
    230a:	50 40       	sbci	r21, 0x00	; 0
    230c:	8a f0       	brmi	.+34     	; 0x2330 <__mulsf3_pse+0x84>
    230e:	e1 f0       	breq	.+56     	; 0x2348 <__mulsf3_pse+0x9c>
    2310:	88 23       	and	r24, r24
    2312:	4a f0       	brmi	.+18     	; 0x2326 <__mulsf3_pse+0x7a>
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	bb 1f       	adc	r27, r27
    231a:	66 1f       	adc	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	91 50       	subi	r25, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	a9 f7       	brne	.-22     	; 0x2310 <__mulsf3_pse+0x64>
    2326:	9e 3f       	cpi	r25, 0xFE	; 254
    2328:	51 05       	cpc	r21, r1
    232a:	70 f0       	brcs	.+28     	; 0x2348 <__mulsf3_pse+0x9c>
    232c:	5c cf       	rjmp	.-328    	; 0x21e6 <__fp_inf>
    232e:	a6 cf       	rjmp	.-180    	; 0x227c <__fp_szero>
    2330:	5f 3f       	cpi	r21, 0xFF	; 255
    2332:	ec f3       	brlt	.-6      	; 0x232e <__mulsf3_pse+0x82>
    2334:	98 3e       	cpi	r25, 0xE8	; 232
    2336:	dc f3       	brlt	.-10     	; 0x232e <__mulsf3_pse+0x82>
    2338:	86 95       	lsr	r24
    233a:	77 95       	ror	r23
    233c:	67 95       	ror	r22
    233e:	b7 95       	ror	r27
    2340:	f7 95       	ror	r31
    2342:	e7 95       	ror	r30
    2344:	9f 5f       	subi	r25, 0xFF	; 255
    2346:	c1 f7       	brne	.-16     	; 0x2338 <__mulsf3_pse+0x8c>
    2348:	fe 2b       	or	r31, r30
    234a:	88 0f       	add	r24, r24
    234c:	91 1d       	adc	r25, r1
    234e:	96 95       	lsr	r25
    2350:	87 95       	ror	r24
    2352:	97 f9       	bld	r25, 7
    2354:	08 95       	ret
    2356:	11 f4       	brne	.+4      	; 0x235c <__mulsf3_pse+0xb0>
    2358:	0e f4       	brtc	.+2      	; 0x235c <__mulsf3_pse+0xb0>
    235a:	4b cf       	rjmp	.-362    	; 0x21f2 <__fp_nan>
    235c:	3e c0       	rjmp	.+124    	; 0x23da <__fp_mpack>

0000235e <sqrt>:
    235e:	73 df       	rcall	.-282    	; 0x2246 <__fp_splitA>
    2360:	d0 f3       	brcs	.-12     	; 0x2356 <__mulsf3_pse+0xaa>
    2362:	99 23       	and	r25, r25
    2364:	d9 f3       	breq	.-10     	; 0x235c <__mulsf3_pse+0xb0>
    2366:	ce f3       	brts	.-14     	; 0x235a <__mulsf3_pse+0xae>
    2368:	9f 57       	subi	r25, 0x7F	; 127
    236a:	55 0b       	sbc	r21, r21
    236c:	87 ff       	sbrs	r24, 7
    236e:	43 d0       	rcall	.+134    	; 0x23f6 <__fp_norm2>
    2370:	00 24       	eor	r0, r0
    2372:	a0 e6       	ldi	r26, 0x60	; 96
    2374:	40 ea       	ldi	r20, 0xA0	; 160
    2376:	90 01       	movw	r18, r0
    2378:	80 58       	subi	r24, 0x80	; 128
    237a:	56 95       	lsr	r21
    237c:	97 95       	ror	r25
    237e:	28 f4       	brcc	.+10     	; 0x238a <sqrt+0x2c>
    2380:	80 5c       	subi	r24, 0xC0	; 192
    2382:	66 0f       	add	r22, r22
    2384:	77 1f       	adc	r23, r23
    2386:	88 1f       	adc	r24, r24
    2388:	20 f0       	brcs	.+8      	; 0x2392 <sqrt+0x34>
    238a:	26 17       	cp	r18, r22
    238c:	37 07       	cpc	r19, r23
    238e:	48 07       	cpc	r20, r24
    2390:	30 f4       	brcc	.+12     	; 0x239e <sqrt+0x40>
    2392:	62 1b       	sub	r22, r18
    2394:	73 0b       	sbc	r23, r19
    2396:	84 0b       	sbc	r24, r20
    2398:	20 29       	or	r18, r0
    239a:	31 29       	or	r19, r1
    239c:	4a 2b       	or	r20, r26
    239e:	a6 95       	lsr	r26
    23a0:	17 94       	ror	r1
    23a2:	07 94       	ror	r0
    23a4:	20 25       	eor	r18, r0
    23a6:	31 25       	eor	r19, r1
    23a8:	4a 27       	eor	r20, r26
    23aa:	58 f7       	brcc	.-42     	; 0x2382 <sqrt+0x24>
    23ac:	66 0f       	add	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	20 f0       	brcs	.+8      	; 0x23bc <sqrt+0x5e>
    23b4:	26 17       	cp	r18, r22
    23b6:	37 07       	cpc	r19, r23
    23b8:	48 07       	cpc	r20, r24
    23ba:	30 f4       	brcc	.+12     	; 0x23c8 <sqrt+0x6a>
    23bc:	62 0b       	sbc	r22, r18
    23be:	73 0b       	sbc	r23, r19
    23c0:	84 0b       	sbc	r24, r20
    23c2:	20 0d       	add	r18, r0
    23c4:	31 1d       	adc	r19, r1
    23c6:	41 1d       	adc	r20, r1
    23c8:	a0 95       	com	r26
    23ca:	81 f7       	brne	.-32     	; 0x23ac <sqrt+0x4e>
    23cc:	b9 01       	movw	r22, r18
    23ce:	84 2f       	mov	r24, r20
    23d0:	91 58       	subi	r25, 0x81	; 129
    23d2:	88 0f       	add	r24, r24
    23d4:	96 95       	lsr	r25
    23d6:	87 95       	ror	r24
    23d8:	08 95       	ret

000023da <__fp_mpack>:
    23da:	9f 3f       	cpi	r25, 0xFF	; 255
    23dc:	31 f0       	breq	.+12     	; 0x23ea <__fp_mpack_finite+0xc>

000023de <__fp_mpack_finite>:
    23de:	91 50       	subi	r25, 0x01	; 1
    23e0:	20 f4       	brcc	.+8      	; 0x23ea <__fp_mpack_finite+0xc>
    23e2:	87 95       	ror	r24
    23e4:	77 95       	ror	r23
    23e6:	67 95       	ror	r22
    23e8:	b7 95       	ror	r27
    23ea:	88 0f       	add	r24, r24
    23ec:	91 1d       	adc	r25, r1
    23ee:	96 95       	lsr	r25
    23f0:	87 95       	ror	r24
    23f2:	97 f9       	bld	r25, 7
    23f4:	08 95       	ret

000023f6 <__fp_norm2>:
    23f6:	91 50       	subi	r25, 0x01	; 1
    23f8:	50 40       	sbci	r21, 0x00	; 0
    23fa:	66 0f       	add	r22, r22
    23fc:	77 1f       	adc	r23, r23
    23fe:	88 1f       	adc	r24, r24
    2400:	d2 f7       	brpl	.-12     	; 0x23f6 <__fp_norm2>
    2402:	08 95       	ret

00002404 <__mulsi3>:
    2404:	62 9f       	mul	r22, r18
    2406:	d0 01       	movw	r26, r0
    2408:	73 9f       	mul	r23, r19
    240a:	f0 01       	movw	r30, r0
    240c:	82 9f       	mul	r24, r18
    240e:	e0 0d       	add	r30, r0
    2410:	f1 1d       	adc	r31, r1
    2412:	64 9f       	mul	r22, r20
    2414:	e0 0d       	add	r30, r0
    2416:	f1 1d       	adc	r31, r1
    2418:	92 9f       	mul	r25, r18
    241a:	f0 0d       	add	r31, r0
    241c:	83 9f       	mul	r24, r19
    241e:	f0 0d       	add	r31, r0
    2420:	74 9f       	mul	r23, r20
    2422:	f0 0d       	add	r31, r0
    2424:	65 9f       	mul	r22, r21
    2426:	f0 0d       	add	r31, r0
    2428:	99 27       	eor	r25, r25
    242a:	72 9f       	mul	r23, r18
    242c:	b0 0d       	add	r27, r0
    242e:	e1 1d       	adc	r30, r1
    2430:	f9 1f       	adc	r31, r25
    2432:	63 9f       	mul	r22, r19
    2434:	b0 0d       	add	r27, r0
    2436:	e1 1d       	adc	r30, r1
    2438:	f9 1f       	adc	r31, r25
    243a:	bd 01       	movw	r22, r26
    243c:	cf 01       	movw	r24, r30
    243e:	11 24       	eor	r1, r1
    2440:	08 95       	ret

00002442 <__udivmodhi4>:
    2442:	aa 1b       	sub	r26, r26
    2444:	bb 1b       	sub	r27, r27
    2446:	51 e1       	ldi	r21, 0x11	; 17
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <__udivmodhi4_ep>

0000244a <__udivmodhi4_loop>:
    244a:	aa 1f       	adc	r26, r26
    244c:	bb 1f       	adc	r27, r27
    244e:	a6 17       	cp	r26, r22
    2450:	b7 07       	cpc	r27, r23
    2452:	10 f0       	brcs	.+4      	; 0x2458 <__udivmodhi4_ep>
    2454:	a6 1b       	sub	r26, r22
    2456:	b7 0b       	sbc	r27, r23

00002458 <__udivmodhi4_ep>:
    2458:	88 1f       	adc	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	5a 95       	dec	r21
    245e:	a9 f7       	brne	.-22     	; 0x244a <__udivmodhi4_loop>
    2460:	80 95       	com	r24
    2462:	90 95       	com	r25
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	08 95       	ret

0000246a <__divmodhi4>:
    246a:	97 fb       	bst	r25, 7
    246c:	09 2e       	mov	r0, r25
    246e:	07 26       	eor	r0, r23
    2470:	0a d0       	rcall	.+20     	; 0x2486 <__divmodhi4_neg1>
    2472:	77 fd       	sbrc	r23, 7
    2474:	04 d0       	rcall	.+8      	; 0x247e <__divmodhi4_neg2>
    2476:	e5 df       	rcall	.-54     	; 0x2442 <__udivmodhi4>
    2478:	06 d0       	rcall	.+12     	; 0x2486 <__divmodhi4_neg1>
    247a:	00 20       	and	r0, r0
    247c:	1a f4       	brpl	.+6      	; 0x2484 <__divmodhi4_exit>

0000247e <__divmodhi4_neg2>:
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255

00002484 <__divmodhi4_exit>:
    2484:	08 95       	ret

00002486 <__divmodhi4_neg1>:
    2486:	f6 f7       	brtc	.-4      	; 0x2484 <__divmodhi4_exit>
    2488:	90 95       	com	r25
    248a:	81 95       	neg	r24
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	08 95       	ret

00002490 <__divmodsi4>:
    2490:	97 fb       	bst	r25, 7
    2492:	09 2e       	mov	r0, r25
    2494:	05 26       	eor	r0, r21
    2496:	0e d0       	rcall	.+28     	; 0x24b4 <__divmodsi4_neg1>
    2498:	57 fd       	sbrc	r21, 7
    249a:	04 d0       	rcall	.+8      	; 0x24a4 <__divmodsi4_neg2>
    249c:	14 d0       	rcall	.+40     	; 0x24c6 <__udivmodsi4>
    249e:	0a d0       	rcall	.+20     	; 0x24b4 <__divmodsi4_neg1>
    24a0:	00 1c       	adc	r0, r0
    24a2:	38 f4       	brcc	.+14     	; 0x24b2 <__divmodsi4_exit>

000024a4 <__divmodsi4_neg2>:
    24a4:	50 95       	com	r21
    24a6:	40 95       	com	r20
    24a8:	30 95       	com	r19
    24aa:	21 95       	neg	r18
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	4f 4f       	sbci	r20, 0xFF	; 255
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255

000024b2 <__divmodsi4_exit>:
    24b2:	08 95       	ret

000024b4 <__divmodsi4_neg1>:
    24b4:	f6 f7       	brtc	.-4      	; 0x24b2 <__divmodsi4_exit>
    24b6:	90 95       	com	r25
    24b8:	80 95       	com	r24
    24ba:	70 95       	com	r23
    24bc:	61 95       	neg	r22
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	8f 4f       	sbci	r24, 0xFF	; 255
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

000024c6 <__udivmodsi4>:
    24c6:	a1 e2       	ldi	r26, 0x21	; 33
    24c8:	1a 2e       	mov	r1, r26
    24ca:	aa 1b       	sub	r26, r26
    24cc:	bb 1b       	sub	r27, r27
    24ce:	fd 01       	movw	r30, r26
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__udivmodsi4_ep>

000024d2 <__udivmodsi4_loop>:
    24d2:	aa 1f       	adc	r26, r26
    24d4:	bb 1f       	adc	r27, r27
    24d6:	ee 1f       	adc	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	a2 17       	cp	r26, r18
    24dc:	b3 07       	cpc	r27, r19
    24de:	e4 07       	cpc	r30, r20
    24e0:	f5 07       	cpc	r31, r21
    24e2:	20 f0       	brcs	.+8      	; 0x24ec <__udivmodsi4_ep>
    24e4:	a2 1b       	sub	r26, r18
    24e6:	b3 0b       	sbc	r27, r19
    24e8:	e4 0b       	sbc	r30, r20
    24ea:	f5 0b       	sbc	r31, r21

000024ec <__udivmodsi4_ep>:
    24ec:	66 1f       	adc	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	1a 94       	dec	r1
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <__udivmodsi4_loop>
    24f8:	60 95       	com	r22
    24fa:	70 95       	com	r23
    24fc:	80 95       	com	r24
    24fe:	90 95       	com	r25
    2500:	9b 01       	movw	r18, r22
    2502:	ac 01       	movw	r20, r24
    2504:	bd 01       	movw	r22, r26
    2506:	cf 01       	movw	r24, r30
    2508:	08 95       	ret

0000250a <__eerd_word_m168>:
    250a:	a8 e1       	ldi	r26, 0x18	; 24
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	42 e0       	ldi	r20, 0x02	; 2
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__eerd_blraw_m168>

00002516 <__eewr_word_m168>:
    2516:	0e 94 a0 12 	call	0x2540	; 0x2540 <__eewr_byte_m168>
    251a:	27 2f       	mov	r18, r23
    251c:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__eewr_r18_m168>

00002520 <__eerd_block_m168>:
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22

00002524 <__eerd_blraw_m168>:
    2524:	fc 01       	movw	r30, r24
    2526:	f9 99       	sbic	0x1f, 1	; 31
    2528:	fe cf       	rjmp	.-4      	; 0x2526 <__eerd_blraw_m168+0x2>
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <__eerd_blraw_m168+0x14>
    252c:	f2 bd       	out	0x22, r31	; 34
    252e:	e1 bd       	out	0x21, r30	; 33
    2530:	f8 9a       	sbi	0x1f, 0	; 31
    2532:	31 96       	adiw	r30, 0x01	; 1
    2534:	00 b4       	in	r0, 0x20	; 32
    2536:	0d 92       	st	X+, r0
    2538:	41 50       	subi	r20, 0x01	; 1
    253a:	50 40       	sbci	r21, 0x00	; 0
    253c:	b8 f7       	brcc	.-18     	; 0x252c <__eerd_blraw_m168+0x8>
    253e:	08 95       	ret

00002540 <__eewr_byte_m168>:
    2540:	26 2f       	mov	r18, r22

00002542 <__eewr_r18_m168>:
    2542:	f9 99       	sbic	0x1f, 1	; 31
    2544:	fe cf       	rjmp	.-4      	; 0x2542 <__eewr_r18_m168>
    2546:	1f ba       	out	0x1f, r1	; 31
    2548:	92 bd       	out	0x22, r25	; 34
    254a:	81 bd       	out	0x21, r24	; 33
    254c:	20 bd       	out	0x20, r18	; 32
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	fa 9a       	sbi	0x1f, 2	; 31
    2554:	f9 9a       	sbi	0x1f, 1	; 31
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	08 95       	ret

0000255c <_exit>:
    255c:	f8 94       	cli

0000255e <__stop_program>:
    255e:	ff cf       	rjmp	.-2      	; 0x255e <__stop_program>
